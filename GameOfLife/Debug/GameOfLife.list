
GameOfLife.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .startup      00000084  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   00000690  08000800  08000800  00001800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000b414  08001000  08001000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000138c  0800c418  0800c418  0000d418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800d7a4  0800d7a4  0000f200  2**0
                  CONTENTS, READONLY
  6 .ARM          00000008  0800d7a4  0800d7a4  0000e7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800d7ac  0800d7ac  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800d7ac  0800d7ac  0000e7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  0800d7b0  0800d7b0  0000e7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000200  20000000  0800d7b4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003ff4  20000200  0800d9b4  0000f200  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200041f4  0800d9b4  000101f4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001644a  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040f6  00000000  00000000  0002567a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012f8  00000000  00000000  00029770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e56  00000000  00000000  0002aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000264f3  00000000  00000000  0002b8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b9e8  00000000  00000000  00051db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eb69b  00000000  00000000  0006d799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00158e34  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005df8  00000000  00000000  00158e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 0000029a  00000000  00000000  0015ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000066  00000000  00000000  0015ef0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .startup:

080001d8 <Delay_us>:
 80001d8:	f04f 0138 	mov.w	r1, #56	@ 0x38
 80001dc:	fb00 f201 	mul.w	r2, r0, r1

080001e0 <delay_us_loop>:
 80001e0:	3a01      	subs	r2, #1
 80001e2:	d1fd      	bne.n	80001e0 <delay_us_loop>
 80001e4:	4770      	bx	lr
	...

080001e8 <Reset_Handler>:
 80001e8:	4814      	ldr	r0, [pc, #80]	@ (800023c <LoopForever+0x4>)
 80001ea:	4685      	mov	sp, r0
 80001ec:	f04f 0000 	mov.w	r0, #0
 80001f0:	f000 fb06 	bl	8000800 <bootloader>
 80001f4:	f002 fbf8 	bl	80029e8 <SystemInit>
 80001f8:	4811      	ldr	r0, [pc, #68]	@ (8000240 <LoopForever+0x8>)
 80001fa:	4912      	ldr	r1, [pc, #72]	@ (8000244 <LoopForever+0xc>)
 80001fc:	4a12      	ldr	r2, [pc, #72]	@ (8000248 <LoopForever+0x10>)
 80001fe:	2300      	movs	r3, #0
 8000200:	e002      	b.n	8000208 <LoopCopyDataInit>

08000202 <CopyDataInit>:
 8000202:	58d4      	ldr	r4, [r2, r3]
 8000204:	50c4      	str	r4, [r0, r3]
 8000206:	3304      	adds	r3, #4

08000208 <LoopCopyDataInit>:
 8000208:	18c4      	adds	r4, r0, r3
 800020a:	428c      	cmp	r4, r1
 800020c:	d3f9      	bcc.n	8000202 <CopyDataInit>
 800020e:	4a0f      	ldr	r2, [pc, #60]	@ (800024c <LoopForever+0x14>)
 8000210:	4c0f      	ldr	r4, [pc, #60]	@ (8000250 <LoopForever+0x18>)
 8000212:	2300      	movs	r3, #0
 8000214:	e001      	b.n	800021a <LoopFillZerobss>

08000216 <FillZerobss>:
 8000216:	6013      	str	r3, [r2, #0]
 8000218:	3204      	adds	r2, #4

0800021a <LoopFillZerobss>:
 800021a:	42a2      	cmp	r2, r4
 800021c:	d3fb      	bcc.n	8000216 <FillZerobss>
 800021e:	f00a f995 	bl	800a54c <__libc_init_array>
 8000222:	f04f 3355 	mov.w	r3, #1431655765	@ 0x55555555
 8000226:	f1ad 0c04 	sub.w	ip, sp, #4
 800022a:	4a0a      	ldr	r2, [pc, #40]	@ (8000254 <LoopForever+0x1c>)

0800022c <LoopPaintStack>:
 800022c:	f84c 3904 	str.w	r3, [ip], #-4
 8000230:	4594      	cmp	ip, r2
 8000232:	d1fb      	bne.n	800022c <LoopPaintStack>
 8000234:	f002 fa8a 	bl	800274c <main>

08000238 <LoopForever>:
 8000238:	e7fe      	b.n	8000238 <LoopForever>
 800023a:	0000      	.short	0x0000
 800023c:	20008000 	.word	0x20008000
 8000240:	20000000 	.word	0x20000000
 8000244:	20000200 	.word	0x20000200
 8000248:	0800d7b4 	.word	0x0800d7b4
 800024c:	20000200 	.word	0x20000200
 8000250:	200041f4 	.word	0x200041f4
 8000254:	20007c00 	.word	0x20007c00

08000258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.startup.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000258:	e7fe      	b.n	8000258 <ADC1_2_IRQHandler>
	...

Disassembly of section .bootloader:

08000800 <bootloader>:
bl_func void TOASTER_ask_for_packet(uint8_t packet_number);
bl_func void msgToUART(msg_t * msg);

//seule fonction publique de ce fichier !
__attribute__((section(".bootloader.begin"))) void bootloader(uint32_t version_of_toaster)
{
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f5ad 4d80 	sub.w	sp, sp, #16384	@ 0x4000
 8000806:	b088      	sub	sp, #32
 8000808:	4604      	mov	r4, r0
	//return;
	RCC->AHB1ENR |= RCC_AHB1ENR_FLASHEN;
 800080a:	4b8f      	ldr	r3, [pc, #572]	@ (8000a48 <bootloader+0x248>)
 800080c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800080e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000812:	649a      	str	r2, [r3, #72]	@ 0x48
	RCC->APB2ENR = 1;
 8000814:	2201      	movs	r2, #1
 8000816:	661a      	str	r2, [r3, #96]	@ 0x60
	RCC->APB1ENR1 |= 1<<28;
 8000818:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800081a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800081e:	659a      	str	r2, [r3, #88]	@ 0x58
	RCC->ICSCR = 0x40950000;
 8000820:	4a8a      	ldr	r2, [pc, #552]	@ (8000a4c <bootloader+0x24c>)
 8000822:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = 0x10005532;
 8000824:	4a8a      	ldr	r2, [pc, #552]	@ (8000a50 <bootloader+0x250>)
 8000826:	60da      	str	r2, [r3, #12]
    RCC->CR = 0x03000500;
 8000828:	4a8a      	ldr	r2, [pc, #552]	@ (8000a54 <bootloader+0x254>)
 800082a:	601a      	str	r2, [r3, #0]
    RCC->PLLCFGR = 0x11005532;
 800082c:	4a8a      	ldr	r2, [pc, #552]	@ (8000a58 <bootloader+0x258>)
 800082e:	60da      	str	r2, [r3, #12]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0U);
 8000830:	4b85      	ldr	r3, [pc, #532]	@ (8000a48 <bootloader+0x248>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000838:	d0fa      	beq.n	8000830 <bootloader+0x30>
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLASH_LATENCY_4);
 800083a:	4a88      	ldr	r2, [pc, #544]	@ (8000a5c <bootloader+0x25c>)
 800083c:	6813      	ldr	r3, [r2, #0]
 800083e:	f023 030f 	bic.w	r3, r3, #15
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6013      	str	r3, [r2, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000848:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 800084c:	6893      	ldr	r3, [r2, #8]
 800084e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000856:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, 0x03);
 8000858:	6893      	ldr	r3, [r2, #8]
 800085a:	f043 0303 	orr.w	r3, r3, #3
 800085e:	6093      	str	r3, [r2, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (0x03 << RCC_CFGR_SWS_Pos));
 8000860:	4b79      	ldr	r3, [pc, #484]	@ (8000a48 <bootloader+0x248>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f003 030c 	and.w	r3, r3, #12
 8000868:	2b0c      	cmp	r3, #12
 800086a:	d1f9      	bne.n	8000860 <bootloader+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800086c:	4b76      	ldr	r3, [pc, #472]	@ (8000a48 <bootloader+0x248>)
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8000874:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800087c:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8000880:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, 0x00);
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000888:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, 0x00);
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000890:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((0x00) << 3U));
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	f422 5260 	bic.w	r2, r2, #14336	@ 0x3800
 8000898:	609a      	str	r2, [r3, #8]

    SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOAEN);	//GPIOA CLK ON
 800089a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800089c:	f042 0201 	orr.w	r2, r2, #1
 80008a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USART1_CONFIG(0);
 80008a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80008a6:	f022 0203 	bic.w	r2, r2, #3
 80008aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    GPIOA->AFR[1]=0x0770;
 80008ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80008b2:	f44f 61ee 	mov.w	r1, #1904	@ 0x770
 80008b6:	6251      	str	r1, [r2, #36]	@ 0x24
    GPIOA->MODER=0xABEBFFFF;
 80008b8:	4969      	ldr	r1, [pc, #420]	@ (8000a60 <bootloader+0x260>)
 80008ba:	6011      	str	r1, [r2, #0]
    SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); //USART1 CLK ON
 80008bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80008be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80008c2:	661a      	str	r2, [r3, #96]	@ 0x60
    USART1->CR1 &= ~USART_CR1_UE;		//USART1 OFF
 80008c4:	f5a3 4358 	sub.w	r3, r3, #55296	@ 0xd800
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	f022 0201 	bic.w	r2, r2, #1
 80008ce:	601a      	str	r2, [r3, #0]
    USART1->CR1 = 0x0000000C;
 80008d0:	220c      	movs	r2, #12
 80008d2:	601a      	str	r2, [r3, #0]
    USART1->CR2 = 0x00000000;
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
    USART1->CR3 = 0x00000000;
 80008d8:	609a      	str	r2, [r3, #8]
    USART1->BRR = 0x00000171;
 80008da:	f240 1171 	movw	r1, #369	@ 0x171
 80008de:	60d9      	str	r1, [r3, #12]
    USART1->PRESC = 0x00000000;
 80008e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    CLEAR_BIT(USART1->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80008e8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(USART1->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80008f0:	609a      	str	r2, [r3, #8]
    USART1->CR1 |= USART_CR1_UE;		//USART1 ON
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	f042 0201 	orr.w	r2, r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
	msg_t msg;
	uint32_t nb_packets;
	uint32_t program_size;
	uint32_t toaster_version_available;

	if(TOASTER_receive_B0(400000) == 0)
 80008fa:	485a      	ldr	r0, [pc, #360]	@ (8000a64 <bootloader+0x264>)
 80008fc:	f000 fa6d 	bl	8000dda <TOASTER_receive_B0>
 8000900:	b9a8      	cbnz	r0, 800092e <bootloader+0x12e>
	{
		USART1->CR1 = 0;
 8000902:	2200      	movs	r2, #0
 8000904:	4b58      	ldr	r3, [pc, #352]	@ (8000a68 <bootloader+0x268>)
 8000906:	601a      	str	r2, [r3, #0]
		RCC->APB2ENR = 0;
 8000908:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 800090c:	661a      	str	r2, [r3, #96]	@ 0x60
		RCC->APB1ENR1 &= ~(1<<28);
 800090e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000910:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8000914:	659a      	str	r2, [r3, #88]	@ 0x58
		CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOAEN);	//GPIOA CLK OFF
 8000916:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000918:	f022 0201 	bic.w	r2, r2, #1
 800091c:	64da      	str	r2, [r3, #76]	@ 0x4c
		CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); 	//USART1 CLK OFF
 800091e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000920:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000924:	661a      	str	r2, [r3, #96]	@ 0x60
	__asm volatile ("dsb");   /* Ensure all outstanding memory accesses included buffered write are completed before reset */
	SCB->AIRCR  = ((0x5FA << 16) | (SCB->AIRCR & (7<<8)) | (1UL << 2));    /* Keep priority group unchanged */
	__asm volatile ("dsb");
	return;
	//test_flash();
}
 8000926:	f50d 4d80 	add.w	sp, sp, #16384	@ 0x4000
 800092a:	b008      	add	sp, #32
 800092c:	bd70      	pop	{r4, r5, r6, pc}
	TOASTER_send_request_for_program();
 800092e:	f000 fa6a 	bl	8000e06 <TOASTER_send_request_for_program>
	res = TOASTER_receive(&msg, NULL, 40000000);//40000);	//fonction blocante avec timeout.
 8000932:	4a4e      	ldr	r2, [pc, #312]	@ (8000a6c <bootloader+0x26c>)
 8000934:	2100      	movs	r1, #0
 8000936:	f50d 4080 	add.w	r0, sp, #16384	@ 0x4000
 800093a:	3014      	adds	r0, #20
 800093c:	f000 f992 	bl	8000c64 <TOASTER_receive>
	if(res == 1 && msg.sid == SID_BOOTLOADER_PROGRAM_AVAILABLE && msg.size >= 8)
 8000940:	2801      	cmp	r0, #1
 8000942:	d1f0      	bne.n	8000926 <bootloader+0x126>
 8000944:	f50d 4380 	add.w	r3, sp, #16384	@ 0x4000
 8000948:	3314      	adds	r3, #20
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b71      	cmp	r3, #113	@ 0x71
 800094e:	d1ea      	bne.n	8000926 <bootloader+0x126>
 8000950:	f50d 4380 	add.w	r3, sp, #16384	@ 0x4000
 8000954:	3315      	adds	r3, #21
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b07      	cmp	r3, #7
 800095a:	d9e4      	bls.n	8000926 <bootloader+0x126>
		toaster_version_available = msg.data[0];
 800095c:	f50d 4380 	add.w	r3, sp, #16384	@ 0x4000
 8000960:	3316      	adds	r3, #22
 8000962:	781a      	ldrb	r2, [r3, #0]
		nb_packets = U32FROMU8(0x00, msg.data[1], msg.data[2], msg.data[3]);
 8000964:	f50d 4380 	add.w	r3, sp, #16384	@ 0x4000
 8000968:	3317      	adds	r3, #23
 800096a:	7819      	ldrb	r1, [r3, #0]
 800096c:	f50d 4380 	add.w	r3, sp, #16384	@ 0x4000
 8000970:	3318      	adds	r3, #24
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800097a:	f50d 4180 	add.w	r1, sp, #16384	@ 0x4000
 800097e:	3119      	adds	r1, #25
 8000980:	7809      	ldrb	r1, [r1, #0]
 8000982:	ea43 0601 	orr.w	r6, r3, r1
		program_size = U32FROMU8(msg.data[4], msg.data[5], msg.data[6], msg.data[7]);
 8000986:	f50d 4380 	add.w	r3, sp, #16384	@ 0x4000
 800098a:	331a      	adds	r3, #26
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f50d 4180 	add.w	r1, sp, #16384	@ 0x4000
 8000992:	311b      	adds	r1, #27
 8000994:	780d      	ldrb	r5, [r1, #0]
 8000996:	042d      	lsls	r5, r5, #16
 8000998:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 800099c:	f50d 4380 	add.w	r3, sp, #16384	@ 0x4000
 80009a0:	331c      	adds	r3, #28
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 80009a8:	f50d 4380 	add.w	r3, sp, #16384	@ 0x4000
 80009ac:	331d      	adds	r3, #29
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	431d      	orrs	r5, r3
	if(version_of_toaster == toaster_version_available)
 80009b2:	42a2      	cmp	r2, r4
 80009b4:	d0b7      	beq.n	8000926 <bootloader+0x126>
	if (program_size > 120*1024)
 80009b6:	f5b5 3ff0 	cmp.w	r5, #122880	@ 0x1e000
 80009ba:	d8b4      	bhi.n	8000926 <bootloader+0x126>
	Unlock();
 80009bc:	f000 f8f2 	bl	8000ba4 <Unlock>
	BL_FLASH_Erase(program_size);
 80009c0:	4628      	mov	r0, r5
 80009c2:	f000 f8c9 	bl	8000b58 <BL_FLASH_Erase>
	for(int p = nb_packets-1; p>=0; )	//pas de p-- ici, on d�cr�mente qu'apr�s v�rification de validit� du packet.
 80009c6:	3e01      	subs	r6, #1
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	db1b      	blt.n	8000a04 <bootloader+0x204>
		TOASTER_ask_for_packet(p);
 80009cc:	b2f0      	uxtb	r0, r6
 80009ce:	f000 fa32 	bl	8000e36 <TOASTER_ask_for_packet>
		if(TOASTER_receive(&msg, &packet, 400000000) && msg.sid == SID_TOASTER_PACKET)
 80009d2:	4a27      	ldr	r2, [pc, #156]	@ (8000a70 <bootloader+0x270>)
 80009d4:	a901      	add	r1, sp, #4
 80009d6:	f50d 4080 	add.w	r0, sp, #16384	@ 0x4000
 80009da:	3014      	adds	r0, #20
 80009dc:	f000 f942 	bl	8000c64 <TOASTER_receive>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d0f1      	beq.n	80009c8 <bootloader+0x1c8>
 80009e4:	f50d 4380 	add.w	r3, sp, #16384	@ 0x4000
 80009e8:	3314      	adds	r3, #20
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b74      	cmp	r3, #116	@ 0x74
 80009ee:	d1eb      	bne.n	80009c8 <bootloader+0x1c8>
			address = (uint32_t *)(0x08000000 + p * PACKET_DATA_SIZE);
 80009f0:	f506 5000 	add.w	r0, r6, #8192	@ 0x2000
			status = FLASH_write_packet(address, &packet);
 80009f4:	a901      	add	r1, sp, #4
 80009f6:	0380      	lsls	r0, r0, #14
 80009f8:	f000 f840 	bl	8000a7c <FLASH_write_packet>
			if (status == BL_FLASH_COMPLETE)
 80009fc:	2809      	cmp	r0, #9
 80009fe:	d1e3      	bne.n	80009c8 <bootloader+0x1c8>
				p--;
 8000a00:	3e01      	subs	r6, #1
 8000a02:	e7e1      	b.n	80009c8 <bootloader+0x1c8>
	Lock();
 8000a04:	f000 f8de 	bl	8000bc4 <Lock>
	while((USART1->ISR & USART_ISR_TC) == 0);	//attendre que la transmission soit termin�e !
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <bootloader+0x268>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8000a10:	d0fa      	beq.n	8000a08 <bootloader+0x208>
	RCC->APB2ENR = 0;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <bootloader+0x248>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	661a      	str	r2, [r3, #96]	@ 0x60
	RCC->APB1ENR1 &= ~(1<<28);
 8000a18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a1a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8000a1e:	659a      	str	r2, [r3, #88]	@ 0x58
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOAEN);	//GPIOA CLK OFF
 8000a20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a22:	f022 0201 	bic.w	r2, r2, #1
 8000a26:	64da      	str	r2, [r3, #76]	@ 0x4c
	CLEAR_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); 	//USART1 CLK OFF
 8000a28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000a2e:	661a      	str	r2, [r3, #96]	@ 0x60
	__asm volatile ("dsb");   /* Ensure all outstanding memory accesses included buffered write are completed before reset */
 8000a30:	f3bf 8f4f 	dsb	sy
	SCB->AIRCR  = ((0x5FA << 16) | (SCB->AIRCR & (7<<8)) | (1UL << 2));    /* Keep priority group unchanged */
 8000a34:	490f      	ldr	r1, [pc, #60]	@ (8000a74 <bootloader+0x274>)
 8000a36:	68ca      	ldr	r2, [r1, #12]
 8000a38:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <bootloader+0x278>)
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	60cb      	str	r3, [r1, #12]
	__asm volatile ("dsb");
 8000a42:	f3bf 8f4f 	dsb	sy
	return;
 8000a46:	e76e      	b.n	8000926 <bootloader+0x126>
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40950000 	.word	0x40950000
 8000a50:	10005532 	.word	0x10005532
 8000a54:	03000500 	.word	0x03000500
 8000a58:	11005532 	.word	0x11005532
 8000a5c:	40022000 	.word	0x40022000
 8000a60:	abebffff 	.word	0xabebffff
 8000a64:	00061a80 	.word	0x00061a80
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	02625a00 	.word	0x02625a00
 8000a70:	17d78400 	.word	0x17d78400
 8000a74:	e000ed00 	.word	0xe000ed00
 8000a78:	05fa0004 	.word	0x05fa0004

08000a7c <FLASH_write_packet>:
		CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
	}
}

static FLASH_Status FLASH_write_packet(uint32_t * address, packet_t * packet)
{
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	4607      	mov	r7, r0
 8000a82:	4688      	mov	r8, r1
	FLASH_Status status;
	uint32_t * data;
	status = WaitForLastOperation();
 8000a84:	f000 f8a6 	bl	8000bd4 <WaitForLastOperation>
 8000a88:	4605      	mov	r5, r0

	if(address == (uint32_t *)(0x08000000))
 8000a8a:	f1b7 6f00 	cmp.w	r7, #134217728	@ 0x8000000
 8000a8e:	d004      	beq.n	8000a9a <FLASH_write_packet+0x1e>
		FLASH->CR |= FLASH_CR_STRT;		//on efface le secteur 0
		while(GetStatus() == BL_FLASH_BUSY);
		CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
	}

	if(status == BL_FLASH_COMPLETE)
 8000a90:	2d09      	cmp	r5, #9
 8000a92:	d019      	beq.n	8000ac8 <FLASH_write_packet+0x4c>
		/* if the program operation is completed, disable the PG Bit */
		FLASH->CR &= (~FLASH_CR_PG);
	}
	/* Return the Program Status */
	return status;
}
 8000a94:	4628      	mov	r0, r5
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (0 << FLASH_CR_PNB_Pos));
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <FLASH_write_packet+0xd8>)
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	f422 72fc 	bic.w	r2, r2, #504	@ 0x1f8
 8000aa2:	615a      	str	r2, [r3, #20]
		FLASH->CR |= FLASH_CR_PER;
 8000aa4:	695a      	ldr	r2, [r3, #20]
 8000aa6:	f042 0202 	orr.w	r2, r2, #2
 8000aaa:	615a      	str	r2, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;		//on efface le secteur 0
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ab2:	615a      	str	r2, [r3, #20]
		while(GetStatus() == BL_FLASH_BUSY);
 8000ab4:	f000 f89e 	bl	8000bf4 <GetStatus>
 8000ab8:	2801      	cmp	r0, #1
 8000aba:	d0fb      	beq.n	8000ab4 <FLASH_write_packet+0x38>
		CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000abc:	4a25      	ldr	r2, [pc, #148]	@ (8000b54 <FLASH_write_packet+0xd8>)
 8000abe:	6953      	ldr	r3, [r2, #20]
 8000ac0:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	e7e3      	b.n	8000a90 <FLASH_write_packet+0x14>
		    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <FLASH_write_packet+0xd8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8000ad0:	d004      	beq.n	8000adc <FLASH_write_packet+0x60>
		      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000ad2:	4a20      	ldr	r2, [pc, #128]	@ (8000b54 <FLASH_write_packet+0xd8>)
 8000ad4:	6813      	ldr	r3, [r2, #0]
 8000ad6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ada:	6013      	str	r3, [r2, #0]
		FLASH->CR |= FLASH_CR_PG;
 8000adc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <FLASH_write_packet+0xd8>)
 8000ade:	6953      	ldr	r3, [r2, #20]
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6153      	str	r3, [r2, #20]
		data = (uint32_t *)packet->data;
 8000ae6:	f108 090d 	add.w	r9, r8, #13
		for(uint32_t i = 0; i<packet->size/8; i++)
 8000aea:	2400      	movs	r4, #0
 8000aec:	e002      	b.n	8000af4 <FLASH_write_packet+0x78>
			if (status != BL_FLASH_COMPLETE)
 8000aee:	2d09      	cmp	r5, #9
 8000af0:	d129      	bne.n	8000b46 <FLASH_write_packet+0xca>
		for(uint32_t i = 0; i<packet->size/8; i++)
 8000af2:	3401      	adds	r4, #1
 8000af4:	f8d8 3000 	ldr.w	r3, [r8]
 8000af8:	ebb4 0fd3 	cmp.w	r4, r3, lsr #3
 8000afc:	d223      	bcs.n	8000b46 <FLASH_write_packet+0xca>
			a = (uint32_t*)(address+2*i);
 8000afe:	00e2      	lsls	r2, r4, #3
 8000b00:	eb07 06c4 	add.w	r6, r7, r4, lsl #3
			if (a < (uint32_t *)0x08000800 || a >= (uint32_t *)0x08001000)	//on �crase pas le secteur 1 (bootloader)!
 8000b04:	f1a6 2308 	sub.w	r3, r6, #134219776	@ 0x8000800
 8000b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b0c:	d3ef      	bcc.n	8000aee <FLASH_write_packet+0x72>
				*a = data[2*i];
 8000b0e:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8000b12:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000b16:	f3bf 8f6f 	isb	sy
				*(a+1) = data[2*i+1];
 8000b1a:	f102 0a04 	add.w	sl, r2, #4
 8000b1e:	f859 300a 	ldr.w	r3, [r9, sl]
 8000b22:	6073      	str	r3, [r6, #4]
				status = WaitForLastOperation();
 8000b24:	f000 f856 	bl	8000bd4 <WaitForLastOperation>
 8000b28:	4605      	mov	r5, r0
				if(*a != data[2*i] || *(a+1) != data[2*i+1])
 8000b2a:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
 8000b2e:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d106      	bne.n	8000b44 <FLASH_write_packet+0xc8>
 8000b36:	6872      	ldr	r2, [r6, #4]
 8000b38:	f859 300a 	ldr.w	r3, [r9, sl]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d0d6      	beq.n	8000aee <FLASH_write_packet+0x72>
					status = BL_FLASH_ERROR_PROGRAM;
 8000b40:	2506      	movs	r5, #6
 8000b42:	e000      	b.n	8000b46 <FLASH_write_packet+0xca>
 8000b44:	2506      	movs	r5, #6
		FLASH->CR &= (~FLASH_CR_PG);
 8000b46:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <FLASH_write_packet+0xd8>)
 8000b48:	6953      	ldr	r3, [r2, #20]
 8000b4a:	f023 0301 	bic.w	r3, r3, #1
 8000b4e:	6153      	str	r3, [r2, #20]
 8000b50:	e7a0      	b.n	8000a94 <FLASH_write_packet+0x18>
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000

08000b58 <BL_FLASH_Erase>:
{
 8000b58:	b538      	push	{r3, r4, r5, lr}
	last_used_sector = ((program_size/PACKET_DATA_SIZE+1)*PACKET_DATA_SIZE / 0x800) + 1;
 8000b5a:	0b85      	lsrs	r5, r0, #14
 8000b5c:	3501      	adds	r5, #1
 8000b5e:	03ad      	lsls	r5, r5, #14
 8000b60:	0aed      	lsrs	r5, r5, #11
 8000b62:	3501      	adds	r5, #1
	for(uint32_t s = 2; s<=last_used_sector; s++)
 8000b64:	2402      	movs	r4, #2
 8000b66:	e018      	b.n	8000b9a <BL_FLASH_Erase+0x42>
		MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (s << FLASH_CR_PNB_Pos));
 8000b68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <BL_FLASH_Erase+0x48>)
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	f422 72fc 	bic.w	r2, r2, #504	@ 0x1f8
 8000b70:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
 8000b74:	615a      	str	r2, [r3, #20]
		FLASH->CR |= FLASH_CR_PER;
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	f042 0202 	orr.w	r2, r2, #2
 8000b7c:	615a      	str	r2, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000b84:	615a      	str	r2, [r3, #20]
		while(GetStatus() == BL_FLASH_BUSY);
 8000b86:	f000 f835 	bl	8000bf4 <GetStatus>
 8000b8a:	2801      	cmp	r0, #1
 8000b8c:	d0fb      	beq.n	8000b86 <BL_FLASH_Erase+0x2e>
		CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000b8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <BL_FLASH_Erase+0x48>)
 8000b90:	6953      	ldr	r3, [r2, #20]
 8000b92:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8000b96:	6153      	str	r3, [r2, #20]
	for(uint32_t s = 2; s<=last_used_sector; s++)
 8000b98:	3401      	adds	r4, #1
 8000b9a:	42ac      	cmp	r4, r5
 8000b9c:	d9e4      	bls.n	8000b68 <BL_FLASH_Erase+0x10>
}
 8000b9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <Unlock>:

static void Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != 0)
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <Unlock+0x18>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db00      	blt.n	8000bae <Unlock+0xa>
  {
    FLASH->KEYR = FLASH_KEY1;
    FLASH->KEYR = FLASH_KEY2;
  }
}
 8000bac:	4770      	bx	lr
    FLASH->KEYR = FLASH_KEY1;
 8000bae:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <Unlock+0x18>)
 8000bb0:	4a03      	ldr	r2, [pc, #12]	@ (8000bc0 <Unlock+0x1c>)
 8000bb2:	609a      	str	r2, [r3, #8]
    FLASH->KEYR = FLASH_KEY2;
 8000bb4:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8000bb8:	609a      	str	r2, [r3, #8]
}
 8000bba:	e7f7      	b.n	8000bac <Unlock+0x8>
 8000bbc:	40022000 	.word	0x40022000
 8000bc0:	45670123 	.word	0x45670123

08000bc4 <Lock>:

static void Lock(void)
{
  FLASH->CR |= FLASH_CR_LOCK;
 8000bc4:	4a02      	ldr	r2, [pc, #8]	@ (8000bd0 <Lock+0xc>)
 8000bc6:	6953      	ldr	r3, [r2, #20]
 8000bc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bcc:	6153      	str	r3, [r2, #20]
}
 8000bce:	4770      	bx	lr
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <WaitForLastOperation>:

static FLASH_Status WaitForLastOperation(void)
{
 8000bd4:	b500      	push	{lr}
 8000bd6:	b083      	sub	sp, #12
  volatile FLASH_Status status;
  do{
	  status = GetStatus();
 8000bd8:	f000 f80c 	bl	8000bf4 <GetStatus>
 8000bdc:	f88d 0007 	strb.w	r0, [sp, #7]
  }while(status == BL_FLASH_BUSY);
 8000be0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d0f6      	beq.n	8000bd8 <WaitForLastOperation+0x4>

  return status;
 8000bea:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000bee:	b003      	add	sp, #12
 8000bf0:	f85d fb04 	ldr.w	pc, [sp], #4

08000bf4 <GetStatus>:


static FLASH_Status GetStatus(void)
{
	uint32_t sr;
	sr = FLASH->SR;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <GetStatus+0x28>)
 8000bf6:	691b      	ldr	r3, [r3, #16]
	if(sr & FLASH_FLAG_BSY)
 8000bf8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000bfc:	d107      	bne.n	8000c0e <GetStatus+0x1a>
		return BL_FLASH_BUSY;
	if(sr & FLASH_FLAG_WRPERR)
 8000bfe:	f013 0f10 	tst.w	r3, #16
 8000c02:	d106      	bne.n	8000c12 <GetStatus+0x1e>
		return BL_FLASH_ERROR_WRP;
	if(sr & (uint32_t)0xEF)
 8000c04:	f013 0fef 	tst.w	r3, #239	@ 0xef
 8000c08:	d105      	bne.n	8000c16 <GetStatus+0x22>
		return BL_FLASH_ERROR_PROGRAM;
	if(sr & FLASH_FLAG_OPERR)
		return BL_FLASH_ERROR_OPERATION;
	return BL_FLASH_COMPLETE;
 8000c0a:	2009      	movs	r0, #9
 8000c0c:	4770      	bx	lr
		return BL_FLASH_BUSY;
 8000c0e:	2001      	movs	r0, #1
 8000c10:	4770      	bx	lr
		return BL_FLASH_ERROR_WRP;
 8000c12:	2005      	movs	r0, #5
 8000c14:	4770      	bx	lr
		return BL_FLASH_ERROR_PROGRAM;
 8000c16:	2006      	movs	r0, #6
}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40022000 	.word	0x40022000

08000c20 <UART_write>:
	while((USART1->ISR & USART_ISR_TXE) == 0);
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <UART_write+0x10>)
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000c28:	d0fa      	beq.n	8000c20 <UART_write>
	USART1->TDR = (uint16_t)(c);
 8000c2a:	4b01      	ldr	r3, [pc, #4]	@ (8000c30 <UART_write+0x10>)
 8000c2c:	6298      	str	r0, [r3, #40]	@ 0x28
}
 8000c2e:	4770      	bx	lr
 8000c30:	40013800 	.word	0x40013800

08000c34 <UART_read>:
{
 8000c34:	4684      	mov	ip, r0
	uint8_t ret = 0;
 8000c36:	2000      	movs	r0, #0
 8000c38:	e003      	b.n	8000c42 <UART_read+0xe>
			USART1->ICR = USART_FLAG_ERRORS;
 8000c3a:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <UART_read+0x2c>)
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	6211      	str	r1, [r2, #32]
	}while(status & USART_FLAG_ERRORS);
 8000c40:	b16b      	cbz	r3, 8000c5e <UART_read+0x2a>
		status = USART1->ISR;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <UART_read+0x2c>)
 8000c44:	69db      	ldr	r3, [r3, #28]
		if (status & USART_ISR_RXNE)
 8000c46:	f013 0f20 	tst.w	r3, #32
 8000c4a:	d004      	beq.n	8000c56 <UART_read+0x22>
			*c = (uint8_t) (USART1->RDR);
 8000c4c:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <UART_read+0x2c>)
 8000c4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000c50:	f88c 2000 	strb.w	r2, [ip]
			ret = 1;
 8000c54:	2001      	movs	r0, #1
		if (status & USART_FLAG_ERRORS)
 8000c56:	f013 030f 	ands.w	r3, r3, #15
 8000c5a:	d0f1      	beq.n	8000c40 <UART_read+0xc>
 8000c5c:	e7ed      	b.n	8000c3a <UART_read+0x6>
}
 8000c5e:	4770      	bx	lr
 8000c60:	40013800 	.word	0x40013800

08000c64 <TOASTER_receive>:
{
 8000c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	4680      	mov	r8, r0
 8000c6c:	460f      	mov	r7, r1
 8000c6e:	4614      	mov	r4, r2
 8000c70:	2600      	movs	r6, #0
	state = WAIT_SOH;
 8000c72:	4635      	mov	r5, r6
 8000c74:	e00f      	b.n	8000c96 <TOASTER_receive+0x32>
					if(c == SOH)
 8000c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d106      	bne.n	8000c8c <TOASTER_receive+0x28>
						state = WAIT_SID;
 8000c7e:	461d      	mov	r5, r3
 8000c80:	e004      	b.n	8000c8c <TOASTER_receive+0x28>
					msg->sid = c;
 8000c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c86:	f888 3000 	strb.w	r3, [r8]
					state = WAIT_SIZE;
 8000c8a:	2502      	movs	r5, #2
	}while(timeout_nb_loops--);
 8000c8c:	1e63      	subs	r3, r4, #1
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	f000 809d 	beq.w	8000dce <TOASTER_receive+0x16a>
 8000c94:	461c      	mov	r4, r3
		if(UART_read(&c))
 8000c96:	f10d 0007 	add.w	r0, sp, #7
 8000c9a:	f7ff ffcb 	bl	8000c34 <UART_read>
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d0f4      	beq.n	8000c8c <TOASTER_receive+0x28>
			switch(state)
 8000ca2:	2d05      	cmp	r5, #5
 8000ca4:	f200 808b 	bhi.w	8000dbe <TOASTER_receive+0x15a>
 8000ca8:	a301      	add	r3, pc, #4	@ (adr r3, 8000cb0 <TOASTER_receive+0x4c>)
 8000caa:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000c77 	.word	0x08000c77
 8000cb4:	08000c83 	.word	0x08000c83
 8000cb8:	08000cc9 	.word	0x08000cc9
 8000cbc:	08000cdd 	.word	0x08000cdd
 8000cc0:	08000d4f 	.word	0x08000d4f
 8000cc4:	08000dad 	.word	0x08000dad
					msg->size = c;
 8000cc8:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8000ccc:	f888 6001 	strb.w	r6, [r8, #1]
					if(msg->size == 0)
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d076      	beq.n	8000dc2 <TOASTER_receive+0x15e>
					else if(msg->size <= 8)
 8000cd4:	2e08      	cmp	r6, #8
 8000cd6:	d876      	bhi.n	8000dc6 <TOASTER_receive+0x162>
						state = RECEIVE_DATA;
 8000cd8:	2503      	movs	r5, #3
 8000cda:	e7d7      	b.n	8000c8c <TOASTER_receive+0x28>
					msg->data[msg->size - remaining_data] = c;
 8000cdc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8000ce0:	1b93      	subs	r3, r2, r6
 8000ce2:	4443      	add	r3, r8
 8000ce4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000ce8:	7099      	strb	r1, [r3, #2]
					remaining_data--;
 8000cea:	3e01      	subs	r6, #1
					if(remaining_data == 0)
 8000cec:	f016 06ff 	ands.w	r6, r6, #255	@ 0xff
 8000cf0:	d1cc      	bne.n	8000c8c <TOASTER_receive+0x28>
						if(msg->sid == SID_TOASTER_PACKET && msg->size == 8)
 8000cf2:	f898 3000 	ldrb.w	r3, [r8]
 8000cf6:	2b74      	cmp	r3, #116	@ 0x74
 8000cf8:	d001      	beq.n	8000cfe <TOASTER_receive+0x9a>
						state = WAIT_EOT;
 8000cfa:	2505      	movs	r5, #5
 8000cfc:	e7c6      	b.n	8000c8c <TOASTER_receive+0x28>
						if(msg->sid == SID_TOASTER_PACKET && msg->size == 8)
 8000cfe:	2a08      	cmp	r2, #8
 8000d00:	d001      	beq.n	8000d06 <TOASTER_receive+0xa2>
						state = WAIT_EOT;
 8000d02:	2505      	movs	r5, #5
 8000d04:	e7c2      	b.n	8000c8c <TOASTER_receive+0x28>
							if(packet != NULL)
 8000d06:	2f00      	cmp	r7, #0
 8000d08:	d05f      	beq.n	8000dca <TOASTER_receive+0x166>
								packet->packet_nb = msg->data[0];
 8000d0a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8000d0e:	733b      	strb	r3, [r7, #12]
								packet->size = U32FROMU8(0x00, msg->data[1], msg->data[2], msg->data[3]);
 8000d10:	f898 2003 	ldrb.w	r2, [r8, #3]
 8000d14:	f898 3004 	ldrb.w	r3, [r8, #4]
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	f898 2005 	ldrb.w	r2, [r8, #5]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	603b      	str	r3, [r7, #0]
								packet->crc = U32FROMU8(msg->data[4], msg->data[5], msg->data[6], msg->data[7]);
 8000d26:	f898 2006 	ldrb.w	r2, [r8, #6]
 8000d2a:	f898 3007 	ldrb.w	r3, [r8, #7]
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d34:	f898 2008 	ldrb.w	r2, [r8, #8]
 8000d38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d3c:	f898 2009 	ldrb.w	r2, [r8, #9]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	607b      	str	r3, [r7, #4]
								packet->crc_calculated = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
								packet_index = 0;
 8000d48:	4699      	mov	r9, r3
								state = RECEIVE_PACKET;
 8000d4a:	2504      	movs	r5, #4
 8000d4c:	e79e      	b.n	8000c8c <TOASTER_receive+0x28>
					packet->data[packet_index] = c;
 8000d4e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000d52:	eb07 0309 	add.w	r3, r7, r9
 8000d56:	7358      	strb	r0, [r3, #13]
					packet_index++;
 8000d58:	f109 0101 	add.w	r1, r9, #1
					if(packet_index % 4 == 0)
 8000d5c:	f011 0f03 	tst.w	r1, #3
 8000d60:	d115      	bne.n	8000d8e <TOASTER_receive+0x12a>
						packet->crc_calculated ^= U32FROMU8(packet->data[packet_index-1], packet->data[packet_index-2], packet->data[packet_index-3], packet->data[packet_index-4]);
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 8000d68:	443b      	add	r3, r7
 8000d6a:	7b5b      	ldrb	r3, [r3, #13]
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000d72:	f1a9 0002 	sub.w	r0, r9, #2
 8000d76:	4438      	add	r0, r7
 8000d78:	7b40      	ldrb	r0, [r0, #13]
 8000d7a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000d7e:	f1a9 0903 	sub.w	r9, r9, #3
 8000d82:	44b9      	add	r9, r7
 8000d84:	f899 000d 	ldrb.w	r0, [r9, #13]
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	405a      	eors	r2, r3
 8000d8c:	60ba      	str	r2, [r7, #8]
					if (packet_index == packet->size)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d001      	beq.n	8000d98 <TOASTER_receive+0x134>
					packet_index++;
 8000d94:	4689      	mov	r9, r1
 8000d96:	e779      	b.n	8000c8c <TOASTER_receive+0x28>
						if(packet->crc == packet->crc_calculated)
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d002      	beq.n	8000da6 <TOASTER_receive+0x142>
					packet_index++;
 8000da0:	4689      	mov	r9, r1
							state = WAIT_SOH;
 8000da2:	2500      	movs	r5, #0
 8000da4:	e772      	b.n	8000c8c <TOASTER_receive+0x28>
					packet_index++;
 8000da6:	4689      	mov	r9, r1
							state = WAIT_EOT;
 8000da8:	2505      	movs	r5, #5
 8000daa:	e76f      	b.n	8000c8c <TOASTER_receive+0x28>
					if(c == EOT)
 8000dac:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8000db0:	2d04      	cmp	r5, #4
 8000db2:	d010      	beq.n	8000dd6 <TOASTER_receive+0x172>
					else if(c == SOH)
 8000db4:	2d01      	cmp	r5, #1
 8000db6:	f43f af69 	beq.w	8000c8c <TOASTER_receive+0x28>
						state = WAIT_SOH;
 8000dba:	2500      	movs	r5, #0
 8000dbc:	e766      	b.n	8000c8c <TOASTER_receive+0x28>
			switch(state)
 8000dbe:	2500      	movs	r5, #0
 8000dc0:	e764      	b.n	8000c8c <TOASTER_receive+0x28>
						state = WAIT_EOT;
 8000dc2:	2505      	movs	r5, #5
 8000dc4:	e762      	b.n	8000c8c <TOASTER_receive+0x28>
						state = WAIT_SOH;
 8000dc6:	2500      	movs	r5, #0
 8000dc8:	e760      	b.n	8000c8c <TOASTER_receive+0x28>
						state = WAIT_EOT;
 8000dca:	2505      	movs	r5, #5
 8000dcc:	e75e      	b.n	8000c8c <TOASTER_receive+0x28>
	return 0;
 8000dce:	2000      	movs	r0, #0
}
 8000dd0:	b003      	add	sp, #12
 8000dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						return 1;
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	e7fa      	b.n	8000dd0 <TOASTER_receive+0x16c>

08000dda <TOASTER_receive_B0>:
{
 8000dda:	b510      	push	{r4, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	4604      	mov	r4, r0
 8000de0:	e002      	b.n	8000de8 <TOASTER_receive_B0+0xe>
	}while(timeout_nb_loops--);
 8000de2:	1e63      	subs	r3, r4, #1
 8000de4:	b164      	cbz	r4, 8000e00 <TOASTER_receive_B0+0x26>
 8000de6:	461c      	mov	r4, r3
		if(UART_read(&c))
 8000de8:	f10d 0007 	add.w	r0, sp, #7
 8000dec:	f7ff ff22 	bl	8000c34 <UART_read>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d0f6      	beq.n	8000de2 <TOASTER_receive_B0+0x8>
			if(c == 0xB0)
 8000df4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000df8:	2bb0      	cmp	r3, #176	@ 0xb0
 8000dfa:	d1f2      	bne.n	8000de2 <TOASTER_receive_B0+0x8>
				return 1;
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	e000      	b.n	8000e02 <TOASTER_receive_B0+0x28>
	return 0;
 8000e00:	2000      	movs	r0, #0
}
 8000e02:	b002      	add	sp, #8
 8000e04:	bd10      	pop	{r4, pc}

08000e06 <TOASTER_send_request_for_program>:
{
 8000e06:	b500      	push	{lr}
 8000e08:	b085      	sub	sp, #20
	msg.sid = SID_TOASTER_REQUEST_FOR_PROGRAM;
 8000e0a:	2370      	movs	r3, #112	@ 0x70
 8000e0c:	f88d 3004 	strb.w	r3, [sp, #4]
	msg.size = 4;
 8000e10:	2304      	movs	r3, #4
 8000e12:	f88d 3005 	strb.w	r3, [sp, #5]
	msg.data[0] = PACKET_DATA_SIZE>>24 & 0xFF;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f88d 3006 	strb.w	r3, [sp, #6]
	msg.data[1] = PACKET_DATA_SIZE>>16 & 0xFF;
 8000e1c:	f88d 3007 	strb.w	r3, [sp, #7]
	msg.data[2] = PACKET_DATA_SIZE>>8 & 0xFF;
 8000e20:	2240      	movs	r2, #64	@ 0x40
 8000e22:	f88d 2008 	strb.w	r2, [sp, #8]
	msg.data[3] = PACKET_DATA_SIZE & 0xFF;
 8000e26:	f88d 3009 	strb.w	r3, [sp, #9]
	msgToUART(&msg);
 8000e2a:	a801      	add	r0, sp, #4
 8000e2c:	f000 f813 	bl	8000e56 <msgToUART>
}
 8000e30:	b005      	add	sp, #20
 8000e32:	f85d fb04 	ldr.w	pc, [sp], #4

08000e36 <TOASTER_ask_for_packet>:
{
 8000e36:	b500      	push	{lr}
 8000e38:	b085      	sub	sp, #20
	msg.sid = SID_TOASTER_ASK_FOR_PACKET;
 8000e3a:	2373      	movs	r3, #115	@ 0x73
 8000e3c:	f88d 3004 	strb.w	r3, [sp, #4]
	msg.size = 1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f88d 3005 	strb.w	r3, [sp, #5]
	msg.data[0] = packet_number;
 8000e46:	f88d 0006 	strb.w	r0, [sp, #6]
	msgToUART(&msg);
 8000e4a:	a801      	add	r0, sp, #4
 8000e4c:	f000 f803 	bl	8000e56 <msgToUART>
}
 8000e50:	b005      	add	sp, #20
 8000e52:	f85d fb04 	ldr.w	pc, [sp], #4

08000e56 <msgToUART>:
{
 8000e56:	b538      	push	{r3, r4, r5, lr}
 8000e58:	4605      	mov	r5, r0
	UART_write(SOH);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff fee0 	bl	8000c20 <UART_write>
	UART_write(msg->sid);
 8000e60:	7828      	ldrb	r0, [r5, #0]
 8000e62:	f7ff fedd 	bl	8000c20 <UART_write>
	UART_write(msg->size);
 8000e66:	7868      	ldrb	r0, [r5, #1]
 8000e68:	f7ff feda 	bl	8000c20 <UART_write>
	for (j=0; j<msg->size && j<8; j++)
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	e005      	b.n	8000e7c <msgToUART+0x26>
		UART_write(msg->data[j]);
 8000e70:	192b      	adds	r3, r5, r4
 8000e72:	7898      	ldrb	r0, [r3, #2]
 8000e74:	f7ff fed4 	bl	8000c20 <UART_write>
	for (j=0; j<msg->size && j<8; j++)
 8000e78:	3401      	adds	r4, #1
 8000e7a:	b2e4      	uxtb	r4, r4
 8000e7c:	786b      	ldrb	r3, [r5, #1]
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	d901      	bls.n	8000e86 <msgToUART+0x30>
 8000e82:	2c07      	cmp	r4, #7
 8000e84:	d9f4      	bls.n	8000e70 <msgToUART+0x1a>
	UART_write(EOT);
 8000e86:	2004      	movs	r0, #4
 8000e88:	f7ff feca 	bl	8000c20 <UART_write>
}
 8000e8c:	bd38      	pop	{r3, r4, r5, pc}
 8000e8e:	bf00      	nop

Disassembly of section .text:

08001000 <__do_global_dtors_aux>:
 8001000:	b510      	push	{r4, lr}
 8001002:	4c05      	ldr	r4, [pc, #20]	@ (8001018 <__do_global_dtors_aux+0x18>)
 8001004:	7823      	ldrb	r3, [r4, #0]
 8001006:	b933      	cbnz	r3, 8001016 <__do_global_dtors_aux+0x16>
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <__do_global_dtors_aux+0x1c>)
 800100a:	b113      	cbz	r3, 8001012 <__do_global_dtors_aux+0x12>
 800100c:	4804      	ldr	r0, [pc, #16]	@ (8001020 <__do_global_dtors_aux+0x20>)
 800100e:	f3af 8000 	nop.w
 8001012:	2301      	movs	r3, #1
 8001014:	7023      	strb	r3, [r4, #0]
 8001016:	bd10      	pop	{r4, pc}
 8001018:	20000200 	.word	0x20000200
 800101c:	00000000 	.word	0x00000000
 8001020:	0800c3fc 	.word	0x0800c3fc

08001024 <frame_dummy>:
 8001024:	b508      	push	{r3, lr}
 8001026:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <frame_dummy+0x10>)
 8001028:	b11b      	cbz	r3, 8001032 <frame_dummy+0xe>
 800102a:	4903      	ldr	r1, [pc, #12]	@ (8001038 <frame_dummy+0x14>)
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <frame_dummy+0x18>)
 800102e:	f3af 8000 	nop.w
 8001032:	bd08      	pop	{r3, pc}
 8001034:	00000000 	.word	0x00000000
 8001038:	20000204 	.word	0x20000204
 800103c:	0800c3fc 	.word	0x0800c3fc

08001040 <memchr>:
 8001040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001044:	2a10      	cmp	r2, #16
 8001046:	db2b      	blt.n	80010a0 <memchr+0x60>
 8001048:	f010 0f07 	tst.w	r0, #7
 800104c:	d008      	beq.n	8001060 <memchr+0x20>
 800104e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001052:	3a01      	subs	r2, #1
 8001054:	428b      	cmp	r3, r1
 8001056:	d02d      	beq.n	80010b4 <memchr+0x74>
 8001058:	f010 0f07 	tst.w	r0, #7
 800105c:	b342      	cbz	r2, 80010b0 <memchr+0x70>
 800105e:	d1f6      	bne.n	800104e <memchr+0xe>
 8001060:	b4f0      	push	{r4, r5, r6, r7}
 8001062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800106a:	f022 0407 	bic.w	r4, r2, #7
 800106e:	f07f 0700 	mvns.w	r7, #0
 8001072:	2300      	movs	r3, #0
 8001074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001078:	3c08      	subs	r4, #8
 800107a:	ea85 0501 	eor.w	r5, r5, r1
 800107e:	ea86 0601 	eor.w	r6, r6, r1
 8001082:	fa85 f547 	uadd8	r5, r5, r7
 8001086:	faa3 f587 	sel	r5, r3, r7
 800108a:	fa86 f647 	uadd8	r6, r6, r7
 800108e:	faa5 f687 	sel	r6, r5, r7
 8001092:	b98e      	cbnz	r6, 80010b8 <memchr+0x78>
 8001094:	d1ee      	bne.n	8001074 <memchr+0x34>
 8001096:	bcf0      	pop	{r4, r5, r6, r7}
 8001098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800109c:	f002 0207 	and.w	r2, r2, #7
 80010a0:	b132      	cbz	r2, 80010b0 <memchr+0x70>
 80010a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80010a6:	3a01      	subs	r2, #1
 80010a8:	ea83 0301 	eor.w	r3, r3, r1
 80010ac:	b113      	cbz	r3, 80010b4 <memchr+0x74>
 80010ae:	d1f8      	bne.n	80010a2 <memchr+0x62>
 80010b0:	2000      	movs	r0, #0
 80010b2:	4770      	bx	lr
 80010b4:	3801      	subs	r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	2d00      	cmp	r5, #0
 80010ba:	bf06      	itte	eq
 80010bc:	4635      	moveq	r5, r6
 80010be:	3803      	subeq	r0, #3
 80010c0:	3807      	subne	r0, #7
 80010c2:	f015 0f01 	tst.w	r5, #1
 80010c6:	d107      	bne.n	80010d8 <memchr+0x98>
 80010c8:	3001      	adds	r0, #1
 80010ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80010ce:	bf02      	ittt	eq
 80010d0:	3001      	addeq	r0, #1
 80010d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80010d6:	3001      	addeq	r0, #1
 80010d8:	bcf0      	pop	{r4, r5, r6, r7}
 80010da:	3801      	subs	r0, #1
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <strlen>:
 80010e0:	4603      	mov	r3, r0
 80010e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010e6:	2a00      	cmp	r2, #0
 80010e8:	d1fb      	bne.n	80010e2 <strlen+0x2>
 80010ea:	1a18      	subs	r0, r3, r0
 80010ec:	3801      	subs	r0, #1
 80010ee:	4770      	bx	lr

080010f0 <__aeabi_drsub>:
 80010f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80010f4:	e002      	b.n	80010fc <__adddf3>
 80010f6:	bf00      	nop

080010f8 <__aeabi_dsub>:
 80010f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080010fc <__adddf3>:
 80010fc:	b530      	push	{r4, r5, lr}
 80010fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001106:	ea94 0f05 	teq	r4, r5
 800110a:	bf08      	it	eq
 800110c:	ea90 0f02 	teqeq	r0, r2
 8001110:	bf1f      	itttt	ne
 8001112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800111a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800111e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001122:	f000 80e2 	beq.w	80012ea <__adddf3+0x1ee>
 8001126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800112a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800112e:	bfb8      	it	lt
 8001130:	426d      	neglt	r5, r5
 8001132:	dd0c      	ble.n	800114e <__adddf3+0x52>
 8001134:	442c      	add	r4, r5
 8001136:	ea80 0202 	eor.w	r2, r0, r2
 800113a:	ea81 0303 	eor.w	r3, r1, r3
 800113e:	ea82 0000 	eor.w	r0, r2, r0
 8001142:	ea83 0101 	eor.w	r1, r3, r1
 8001146:	ea80 0202 	eor.w	r2, r0, r2
 800114a:	ea81 0303 	eor.w	r3, r1, r3
 800114e:	2d36      	cmp	r5, #54	@ 0x36
 8001150:	bf88      	it	hi
 8001152:	bd30      	pophi	{r4, r5, pc}
 8001154:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8001158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800115c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8001160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001164:	d002      	beq.n	800116c <__adddf3+0x70>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8001170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001178:	d002      	beq.n	8001180 <__adddf3+0x84>
 800117a:	4252      	negs	r2, r2
 800117c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001180:	ea94 0f05 	teq	r4, r5
 8001184:	f000 80a7 	beq.w	80012d6 <__adddf3+0x1da>
 8001188:	f1a4 0401 	sub.w	r4, r4, #1
 800118c:	f1d5 0e20 	rsbs	lr, r5, #32
 8001190:	db0d      	blt.n	80011ae <__adddf3+0xb2>
 8001192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8001196:	fa22 f205 	lsr.w	r2, r2, r5
 800119a:	1880      	adds	r0, r0, r2
 800119c:	f141 0100 	adc.w	r1, r1, #0
 80011a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80011a4:	1880      	adds	r0, r0, r2
 80011a6:	fa43 f305 	asr.w	r3, r3, r5
 80011aa:	4159      	adcs	r1, r3
 80011ac:	e00e      	b.n	80011cc <__adddf3+0xd0>
 80011ae:	f1a5 0520 	sub.w	r5, r5, #32
 80011b2:	f10e 0e20 	add.w	lr, lr, #32
 80011b6:	2a01      	cmp	r2, #1
 80011b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80011bc:	bf28      	it	cs
 80011be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80011c2:	fa43 f305 	asr.w	r3, r3, r5
 80011c6:	18c0      	adds	r0, r0, r3
 80011c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80011cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80011d0:	d507      	bpl.n	80011e2 <__adddf3+0xe6>
 80011d2:	f04f 0e00 	mov.w	lr, #0
 80011d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80011da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80011de:	eb6e 0101 	sbc.w	r1, lr, r1
 80011e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80011e6:	d31b      	bcc.n	8001220 <__adddf3+0x124>
 80011e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80011ec:	d30c      	bcc.n	8001208 <__adddf3+0x10c>
 80011ee:	0849      	lsrs	r1, r1, #1
 80011f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80011f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80011f8:	f104 0401 	add.w	r4, r4, #1
 80011fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001200:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8001204:	f080 809a 	bcs.w	800133c <__adddf3+0x240>
 8001208:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800120c:	bf08      	it	eq
 800120e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001212:	f150 0000 	adcs.w	r0, r0, #0
 8001216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800121a:	ea41 0105 	orr.w	r1, r1, r5
 800121e:	bd30      	pop	{r4, r5, pc}
 8001220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001224:	4140      	adcs	r0, r0
 8001226:	eb41 0101 	adc.w	r1, r1, r1
 800122a:	3c01      	subs	r4, #1
 800122c:	bf28      	it	cs
 800122e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8001232:	d2e9      	bcs.n	8001208 <__adddf3+0x10c>
 8001234:	f091 0f00 	teq	r1, #0
 8001238:	bf04      	itt	eq
 800123a:	4601      	moveq	r1, r0
 800123c:	2000      	moveq	r0, #0
 800123e:	fab1 f381 	clz	r3, r1
 8001242:	bf08      	it	eq
 8001244:	3320      	addeq	r3, #32
 8001246:	f1a3 030b 	sub.w	r3, r3, #11
 800124a:	f1b3 0220 	subs.w	r2, r3, #32
 800124e:	da0c      	bge.n	800126a <__adddf3+0x16e>
 8001250:	320c      	adds	r2, #12
 8001252:	dd08      	ble.n	8001266 <__adddf3+0x16a>
 8001254:	f102 0c14 	add.w	ip, r2, #20
 8001258:	f1c2 020c 	rsb	r2, r2, #12
 800125c:	fa01 f00c 	lsl.w	r0, r1, ip
 8001260:	fa21 f102 	lsr.w	r1, r1, r2
 8001264:	e00c      	b.n	8001280 <__adddf3+0x184>
 8001266:	f102 0214 	add.w	r2, r2, #20
 800126a:	bfd8      	it	le
 800126c:	f1c2 0c20 	rsble	ip, r2, #32
 8001270:	fa01 f102 	lsl.w	r1, r1, r2
 8001274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001278:	bfdc      	itt	le
 800127a:	ea41 010c 	orrle.w	r1, r1, ip
 800127e:	4090      	lslle	r0, r2
 8001280:	1ae4      	subs	r4, r4, r3
 8001282:	bfa2      	ittt	ge
 8001284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001288:	4329      	orrge	r1, r5
 800128a:	bd30      	popge	{r4, r5, pc}
 800128c:	ea6f 0404 	mvn.w	r4, r4
 8001290:	3c1f      	subs	r4, #31
 8001292:	da1c      	bge.n	80012ce <__adddf3+0x1d2>
 8001294:	340c      	adds	r4, #12
 8001296:	dc0e      	bgt.n	80012b6 <__adddf3+0x1ba>
 8001298:	f104 0414 	add.w	r4, r4, #20
 800129c:	f1c4 0220 	rsb	r2, r4, #32
 80012a0:	fa20 f004 	lsr.w	r0, r0, r4
 80012a4:	fa01 f302 	lsl.w	r3, r1, r2
 80012a8:	ea40 0003 	orr.w	r0, r0, r3
 80012ac:	fa21 f304 	lsr.w	r3, r1, r4
 80012b0:	ea45 0103 	orr.w	r1, r5, r3
 80012b4:	bd30      	pop	{r4, r5, pc}
 80012b6:	f1c4 040c 	rsb	r4, r4, #12
 80012ba:	f1c4 0220 	rsb	r2, r4, #32
 80012be:	fa20 f002 	lsr.w	r0, r0, r2
 80012c2:	fa01 f304 	lsl.w	r3, r1, r4
 80012c6:	ea40 0003 	orr.w	r0, r0, r3
 80012ca:	4629      	mov	r1, r5
 80012cc:	bd30      	pop	{r4, r5, pc}
 80012ce:	fa21 f004 	lsr.w	r0, r1, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	bd30      	pop	{r4, r5, pc}
 80012d6:	f094 0f00 	teq	r4, #0
 80012da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80012de:	bf06      	itte	eq
 80012e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80012e4:	3401      	addeq	r4, #1
 80012e6:	3d01      	subne	r5, #1
 80012e8:	e74e      	b.n	8001188 <__adddf3+0x8c>
 80012ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80012ee:	bf18      	it	ne
 80012f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80012f4:	d029      	beq.n	800134a <__adddf3+0x24e>
 80012f6:	ea94 0f05 	teq	r4, r5
 80012fa:	bf08      	it	eq
 80012fc:	ea90 0f02 	teqeq	r0, r2
 8001300:	d005      	beq.n	800130e <__adddf3+0x212>
 8001302:	ea54 0c00 	orrs.w	ip, r4, r0
 8001306:	bf04      	itt	eq
 8001308:	4619      	moveq	r1, r3
 800130a:	4610      	moveq	r0, r2
 800130c:	bd30      	pop	{r4, r5, pc}
 800130e:	ea91 0f03 	teq	r1, r3
 8001312:	bf1e      	ittt	ne
 8001314:	2100      	movne	r1, #0
 8001316:	2000      	movne	r0, #0
 8001318:	bd30      	popne	{r4, r5, pc}
 800131a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800131e:	d105      	bne.n	800132c <__adddf3+0x230>
 8001320:	0040      	lsls	r0, r0, #1
 8001322:	4149      	adcs	r1, r1
 8001324:	bf28      	it	cs
 8001326:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800132a:	bd30      	pop	{r4, r5, pc}
 800132c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8001330:	bf3c      	itt	cc
 8001332:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8001336:	bd30      	popcc	{r4, r5, pc}
 8001338:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800133c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8001340:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001344:	f04f 0000 	mov.w	r0, #0
 8001348:	bd30      	pop	{r4, r5, pc}
 800134a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800134e:	bf1a      	itte	ne
 8001350:	4619      	movne	r1, r3
 8001352:	4610      	movne	r0, r2
 8001354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001358:	bf1c      	itt	ne
 800135a:	460b      	movne	r3, r1
 800135c:	4602      	movne	r2, r0
 800135e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001362:	bf06      	itte	eq
 8001364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001368:	ea91 0f03 	teqeq	r1, r3
 800136c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8001370:	bd30      	pop	{r4, r5, pc}
 8001372:	bf00      	nop

08001374 <__aeabi_ui2d>:
 8001374:	f090 0f00 	teq	r0, #0
 8001378:	bf04      	itt	eq
 800137a:	2100      	moveq	r1, #0
 800137c:	4770      	bxeq	lr
 800137e:	b530      	push	{r4, r5, lr}
 8001380:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8001384:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8001388:	f04f 0500 	mov.w	r5, #0
 800138c:	f04f 0100 	mov.w	r1, #0
 8001390:	e750      	b.n	8001234 <__adddf3+0x138>
 8001392:	bf00      	nop

08001394 <__aeabi_i2d>:
 8001394:	f090 0f00 	teq	r0, #0
 8001398:	bf04      	itt	eq
 800139a:	2100      	moveq	r1, #0
 800139c:	4770      	bxeq	lr
 800139e:	b530      	push	{r4, r5, lr}
 80013a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80013a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80013a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80013ac:	bf48      	it	mi
 80013ae:	4240      	negmi	r0, r0
 80013b0:	f04f 0100 	mov.w	r1, #0
 80013b4:	e73e      	b.n	8001234 <__adddf3+0x138>
 80013b6:	bf00      	nop

080013b8 <__aeabi_f2d>:
 80013b8:	0042      	lsls	r2, r0, #1
 80013ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80013be:	ea4f 0131 	mov.w	r1, r1, rrx
 80013c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80013c6:	bf1f      	itttt	ne
 80013c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80013cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80013d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80013d4:	4770      	bxne	lr
 80013d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80013da:	bf08      	it	eq
 80013dc:	4770      	bxeq	lr
 80013de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80013e2:	bf04      	itt	eq
 80013e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80013e8:	4770      	bxeq	lr
 80013ea:	b530      	push	{r4, r5, lr}
 80013ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80013f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80013f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80013f8:	e71c      	b.n	8001234 <__adddf3+0x138>
 80013fa:	bf00      	nop

080013fc <__aeabi_ul2d>:
 80013fc:	ea50 0201 	orrs.w	r2, r0, r1
 8001400:	bf08      	it	eq
 8001402:	4770      	bxeq	lr
 8001404:	b530      	push	{r4, r5, lr}
 8001406:	f04f 0500 	mov.w	r5, #0
 800140a:	e00a      	b.n	8001422 <__aeabi_l2d+0x16>

0800140c <__aeabi_l2d>:
 800140c:	ea50 0201 	orrs.w	r2, r0, r1
 8001410:	bf08      	it	eq
 8001412:	4770      	bxeq	lr
 8001414:	b530      	push	{r4, r5, lr}
 8001416:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800141a:	d502      	bpl.n	8001422 <__aeabi_l2d+0x16>
 800141c:	4240      	negs	r0, r0
 800141e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001422:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8001426:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800142a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800142e:	f43f aed8 	beq.w	80011e2 <__adddf3+0xe6>
 8001432:	f04f 0203 	mov.w	r2, #3
 8001436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800143a:	bf18      	it	ne
 800143c:	3203      	addne	r2, #3
 800143e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001442:	bf18      	it	ne
 8001444:	3203      	addne	r2, #3
 8001446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800144a:	f1c2 0320 	rsb	r3, r2, #32
 800144e:	fa00 fc03 	lsl.w	ip, r0, r3
 8001452:	fa20 f002 	lsr.w	r0, r0, r2
 8001456:	fa01 fe03 	lsl.w	lr, r1, r3
 800145a:	ea40 000e 	orr.w	r0, r0, lr
 800145e:	fa21 f102 	lsr.w	r1, r1, r2
 8001462:	4414      	add	r4, r2
 8001464:	e6bd      	b.n	80011e2 <__adddf3+0xe6>
 8001466:	bf00      	nop

08001468 <__aeabi_dmul>:
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800146e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8001472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001476:	bf1d      	ittte	ne
 8001478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800147c:	ea94 0f0c 	teqne	r4, ip
 8001480:	ea95 0f0c 	teqne	r5, ip
 8001484:	f000 f8de 	bleq	8001644 <__aeabi_dmul+0x1dc>
 8001488:	442c      	add	r4, r5
 800148a:	ea81 0603 	eor.w	r6, r1, r3
 800148e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800149a:	bf18      	it	ne
 800149c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80014a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80014a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014a8:	d038      	beq.n	800151c <__aeabi_dmul+0xb4>
 80014aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80014ae:	f04f 0500 	mov.w	r5, #0
 80014b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80014b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80014ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80014be:	f04f 0600 	mov.w	r6, #0
 80014c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80014c6:	f09c 0f00 	teq	ip, #0
 80014ca:	bf18      	it	ne
 80014cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80014d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80014d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80014d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80014dc:	d204      	bcs.n	80014e8 <__aeabi_dmul+0x80>
 80014de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80014e2:	416d      	adcs	r5, r5
 80014e4:	eb46 0606 	adc.w	r6, r6, r6
 80014e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80014ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80014f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80014f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80014f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80014fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8001500:	bf88      	it	hi
 8001502:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8001506:	d81e      	bhi.n	8001546 <__aeabi_dmul+0xde>
 8001508:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800150c:	bf08      	it	eq
 800150e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001512:	f150 0000 	adcs.w	r0, r0, #0
 8001516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800151a:	bd70      	pop	{r4, r5, r6, pc}
 800151c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8001520:	ea46 0101 	orr.w	r1, r6, r1
 8001524:	ea40 0002 	orr.w	r0, r0, r2
 8001528:	ea81 0103 	eor.w	r1, r1, r3
 800152c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001530:	bfc2      	ittt	gt
 8001532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800153a:	bd70      	popgt	{r4, r5, r6, pc}
 800153c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8001540:	f04f 0e00 	mov.w	lr, #0
 8001544:	3c01      	subs	r4, #1
 8001546:	f300 80ab 	bgt.w	80016a0 <__aeabi_dmul+0x238>
 800154a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800154e:	bfde      	ittt	le
 8001550:	2000      	movle	r0, #0
 8001552:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8001556:	bd70      	pople	{r4, r5, r6, pc}
 8001558:	f1c4 0400 	rsb	r4, r4, #0
 800155c:	3c20      	subs	r4, #32
 800155e:	da35      	bge.n	80015cc <__aeabi_dmul+0x164>
 8001560:	340c      	adds	r4, #12
 8001562:	dc1b      	bgt.n	800159c <__aeabi_dmul+0x134>
 8001564:	f104 0414 	add.w	r4, r4, #20
 8001568:	f1c4 0520 	rsb	r5, r4, #32
 800156c:	fa00 f305 	lsl.w	r3, r0, r5
 8001570:	fa20 f004 	lsr.w	r0, r0, r4
 8001574:	fa01 f205 	lsl.w	r2, r1, r5
 8001578:	ea40 0002 	orr.w	r0, r0, r2
 800157c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8001580:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8001584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001588:	fa21 f604 	lsr.w	r6, r1, r4
 800158c:	eb42 0106 	adc.w	r1, r2, r6
 8001590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001594:	bf08      	it	eq
 8001596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	f1c4 040c 	rsb	r4, r4, #12
 80015a0:	f1c4 0520 	rsb	r5, r4, #32
 80015a4:	fa00 f304 	lsl.w	r3, r0, r4
 80015a8:	fa20 f005 	lsr.w	r0, r0, r5
 80015ac:	fa01 f204 	lsl.w	r2, r1, r4
 80015b0:	ea40 0002 	orr.w	r0, r0, r2
 80015b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80015b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80015bc:	f141 0100 	adc.w	r1, r1, #0
 80015c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80015c4:	bf08      	it	eq
 80015c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80015ca:	bd70      	pop	{r4, r5, r6, pc}
 80015cc:	f1c4 0520 	rsb	r5, r4, #32
 80015d0:	fa00 f205 	lsl.w	r2, r0, r5
 80015d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80015d8:	fa20 f304 	lsr.w	r3, r0, r4
 80015dc:	fa01 f205 	lsl.w	r2, r1, r5
 80015e0:	ea43 0302 	orr.w	r3, r3, r2
 80015e4:	fa21 f004 	lsr.w	r0, r1, r4
 80015e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80015ec:	fa21 f204 	lsr.w	r2, r1, r4
 80015f0:	ea20 0002 	bic.w	r0, r0, r2
 80015f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80015f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80015fc:	bf08      	it	eq
 80015fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001602:	bd70      	pop	{r4, r5, r6, pc}
 8001604:	f094 0f00 	teq	r4, #0
 8001608:	d10f      	bne.n	800162a <__aeabi_dmul+0x1c2>
 800160a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800160e:	0040      	lsls	r0, r0, #1
 8001610:	eb41 0101 	adc.w	r1, r1, r1
 8001614:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8001618:	bf08      	it	eq
 800161a:	3c01      	subeq	r4, #1
 800161c:	d0f7      	beq.n	800160e <__aeabi_dmul+0x1a6>
 800161e:	ea41 0106 	orr.w	r1, r1, r6
 8001622:	f095 0f00 	teq	r5, #0
 8001626:	bf18      	it	ne
 8001628:	4770      	bxne	lr
 800162a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800162e:	0052      	lsls	r2, r2, #1
 8001630:	eb43 0303 	adc.w	r3, r3, r3
 8001634:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001638:	bf08      	it	eq
 800163a:	3d01      	subeq	r5, #1
 800163c:	d0f7      	beq.n	800162e <__aeabi_dmul+0x1c6>
 800163e:	ea43 0306 	orr.w	r3, r3, r6
 8001642:	4770      	bx	lr
 8001644:	ea94 0f0c 	teq	r4, ip
 8001648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800164c:	bf18      	it	ne
 800164e:	ea95 0f0c 	teqne	r5, ip
 8001652:	d00c      	beq.n	800166e <__aeabi_dmul+0x206>
 8001654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001658:	bf18      	it	ne
 800165a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800165e:	d1d1      	bne.n	8001604 <__aeabi_dmul+0x19c>
 8001660:	ea81 0103 	eor.w	r1, r1, r3
 8001664:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8001668:	f04f 0000 	mov.w	r0, #0
 800166c:	bd70      	pop	{r4, r5, r6, pc}
 800166e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001672:	bf06      	itte	eq
 8001674:	4610      	moveq	r0, r2
 8001676:	4619      	moveq	r1, r3
 8001678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800167c:	d019      	beq.n	80016b2 <__aeabi_dmul+0x24a>
 800167e:	ea94 0f0c 	teq	r4, ip
 8001682:	d102      	bne.n	800168a <__aeabi_dmul+0x222>
 8001684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001688:	d113      	bne.n	80016b2 <__aeabi_dmul+0x24a>
 800168a:	ea95 0f0c 	teq	r5, ip
 800168e:	d105      	bne.n	800169c <__aeabi_dmul+0x234>
 8001690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001694:	bf1c      	itt	ne
 8001696:	4610      	movne	r0, r2
 8001698:	4619      	movne	r1, r3
 800169a:	d10a      	bne.n	80016b2 <__aeabi_dmul+0x24a>
 800169c:	ea81 0103 	eor.w	r1, r1, r3
 80016a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80016a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80016a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
 80016b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80016b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80016ba:	bd70      	pop	{r4, r5, r6, pc}

080016bc <__aeabi_ddiv>:
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80016c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80016c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80016ca:	bf1d      	ittte	ne
 80016cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80016d0:	ea94 0f0c 	teqne	r4, ip
 80016d4:	ea95 0f0c 	teqne	r5, ip
 80016d8:	f000 f8a7 	bleq	800182a <__aeabi_ddiv+0x16e>
 80016dc:	eba4 0405 	sub.w	r4, r4, r5
 80016e0:	ea81 0e03 	eor.w	lr, r1, r3
 80016e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80016e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80016ec:	f000 8088 	beq.w	8001800 <__aeabi_ddiv+0x144>
 80016f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80016f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80016f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80016fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800170c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001710:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8001714:	429d      	cmp	r5, r3
 8001716:	bf08      	it	eq
 8001718:	4296      	cmpeq	r6, r2
 800171a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800171e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8001722:	d202      	bcs.n	800172a <__aeabi_ddiv+0x6e>
 8001724:	085b      	lsrs	r3, r3, #1
 8001726:	ea4f 0232 	mov.w	r2, r2, rrx
 800172a:	1ab6      	subs	r6, r6, r2
 800172c:	eb65 0503 	sbc.w	r5, r5, r3
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	ea4f 0232 	mov.w	r2, r2, rrx
 8001736:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800173a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800173e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001746:	bf22      	ittt	cs
 8001748:	1ab6      	subcs	r6, r6, r2
 800174a:	4675      	movcs	r5, lr
 800174c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	ea4f 0232 	mov.w	r2, r2, rrx
 8001756:	ebb6 0e02 	subs.w	lr, r6, r2
 800175a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800175e:	bf22      	ittt	cs
 8001760:	1ab6      	subcs	r6, r6, r2
 8001762:	4675      	movcs	r5, lr
 8001764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	ea4f 0232 	mov.w	r2, r2, rrx
 800176e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001776:	bf22      	ittt	cs
 8001778:	1ab6      	subcs	r6, r6, r2
 800177a:	4675      	movcs	r5, lr
 800177c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	ea4f 0232 	mov.w	r2, r2, rrx
 8001786:	ebb6 0e02 	subs.w	lr, r6, r2
 800178a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800178e:	bf22      	ittt	cs
 8001790:	1ab6      	subcs	r6, r6, r2
 8001792:	4675      	movcs	r5, lr
 8001794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001798:	ea55 0e06 	orrs.w	lr, r5, r6
 800179c:	d018      	beq.n	80017d0 <__aeabi_ddiv+0x114>
 800179e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80017a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80017a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80017aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80017ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80017b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80017b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80017ba:	d1c0      	bne.n	800173e <__aeabi_ddiv+0x82>
 80017bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80017c0:	d10b      	bne.n	80017da <__aeabi_ddiv+0x11e>
 80017c2:	ea41 0100 	orr.w	r1, r1, r0
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80017ce:	e7b6      	b.n	800173e <__aeabi_ddiv+0x82>
 80017d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80017d4:	bf04      	itt	eq
 80017d6:	4301      	orreq	r1, r0
 80017d8:	2000      	moveq	r0, #0
 80017da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80017de:	bf88      	it	hi
 80017e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80017e4:	f63f aeaf 	bhi.w	8001546 <__aeabi_dmul+0xde>
 80017e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80017ec:	bf04      	itt	eq
 80017ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80017f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80017f6:	f150 0000 	adcs.w	r0, r0, #0
 80017fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
 8001800:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8001804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800180c:	bfc2      	ittt	gt
 800180e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001816:	bd70      	popgt	{r4, r5, r6, pc}
 8001818:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800181c:	f04f 0e00 	mov.w	lr, #0
 8001820:	3c01      	subs	r4, #1
 8001822:	e690      	b.n	8001546 <__aeabi_dmul+0xde>
 8001824:	ea45 0e06 	orr.w	lr, r5, r6
 8001828:	e68d      	b.n	8001546 <__aeabi_dmul+0xde>
 800182a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800182e:	ea94 0f0c 	teq	r4, ip
 8001832:	bf08      	it	eq
 8001834:	ea95 0f0c 	teqeq	r5, ip
 8001838:	f43f af3b 	beq.w	80016b2 <__aeabi_dmul+0x24a>
 800183c:	ea94 0f0c 	teq	r4, ip
 8001840:	d10a      	bne.n	8001858 <__aeabi_ddiv+0x19c>
 8001842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001846:	f47f af34 	bne.w	80016b2 <__aeabi_dmul+0x24a>
 800184a:	ea95 0f0c 	teq	r5, ip
 800184e:	f47f af25 	bne.w	800169c <__aeabi_dmul+0x234>
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	e72c      	b.n	80016b2 <__aeabi_dmul+0x24a>
 8001858:	ea95 0f0c 	teq	r5, ip
 800185c:	d106      	bne.n	800186c <__aeabi_ddiv+0x1b0>
 800185e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001862:	f43f aefd 	beq.w	8001660 <__aeabi_dmul+0x1f8>
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	e722      	b.n	80016b2 <__aeabi_dmul+0x24a>
 800186c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001870:	bf18      	it	ne
 8001872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001876:	f47f aec5 	bne.w	8001604 <__aeabi_dmul+0x19c>
 800187a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800187e:	f47f af0d 	bne.w	800169c <__aeabi_dmul+0x234>
 8001882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001886:	f47f aeeb 	bne.w	8001660 <__aeabi_dmul+0x1f8>
 800188a:	e712      	b.n	80016b2 <__aeabi_dmul+0x24a>

0800188c <__gedf2>:
 800188c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001890:	e006      	b.n	80018a0 <__cmpdf2+0x4>
 8001892:	bf00      	nop

08001894 <__ledf2>:
 8001894:	f04f 0c01 	mov.w	ip, #1
 8001898:	e002      	b.n	80018a0 <__cmpdf2+0x4>
 800189a:	bf00      	nop

0800189c <__cmpdf2>:
 800189c:	f04f 0c01 	mov.w	ip, #1
 80018a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80018a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80018a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80018ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80018b0:	bf18      	it	ne
 80018b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80018b6:	d01b      	beq.n	80018f0 <__cmpdf2+0x54>
 80018b8:	b001      	add	sp, #4
 80018ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80018be:	bf0c      	ite	eq
 80018c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80018c4:	ea91 0f03 	teqne	r1, r3
 80018c8:	bf02      	ittt	eq
 80018ca:	ea90 0f02 	teqeq	r0, r2
 80018ce:	2000      	moveq	r0, #0
 80018d0:	4770      	bxeq	lr
 80018d2:	f110 0f00 	cmn.w	r0, #0
 80018d6:	ea91 0f03 	teq	r1, r3
 80018da:	bf58      	it	pl
 80018dc:	4299      	cmppl	r1, r3
 80018de:	bf08      	it	eq
 80018e0:	4290      	cmpeq	r0, r2
 80018e2:	bf2c      	ite	cs
 80018e4:	17d8      	asrcs	r0, r3, #31
 80018e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80018ea:	f040 0001 	orr.w	r0, r0, #1
 80018ee:	4770      	bx	lr
 80018f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80018f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80018f8:	d102      	bne.n	8001900 <__cmpdf2+0x64>
 80018fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80018fe:	d107      	bne.n	8001910 <__cmpdf2+0x74>
 8001900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001908:	d1d6      	bne.n	80018b8 <__cmpdf2+0x1c>
 800190a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800190e:	d0d3      	beq.n	80018b8 <__cmpdf2+0x1c>
 8001910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <__aeabi_cdrcmple>:
 8001918:	4684      	mov	ip, r0
 800191a:	4610      	mov	r0, r2
 800191c:	4662      	mov	r2, ip
 800191e:	468c      	mov	ip, r1
 8001920:	4619      	mov	r1, r3
 8001922:	4663      	mov	r3, ip
 8001924:	e000      	b.n	8001928 <__aeabi_cdcmpeq>
 8001926:	bf00      	nop

08001928 <__aeabi_cdcmpeq>:
 8001928:	b501      	push	{r0, lr}
 800192a:	f7ff ffb7 	bl	800189c <__cmpdf2>
 800192e:	2800      	cmp	r0, #0
 8001930:	bf48      	it	mi
 8001932:	f110 0f00 	cmnmi.w	r0, #0
 8001936:	bd01      	pop	{r0, pc}

08001938 <__aeabi_dcmpeq>:
 8001938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800193c:	f7ff fff4 	bl	8001928 <__aeabi_cdcmpeq>
 8001940:	bf0c      	ite	eq
 8001942:	2001      	moveq	r0, #1
 8001944:	2000      	movne	r0, #0
 8001946:	f85d fb08 	ldr.w	pc, [sp], #8
 800194a:	bf00      	nop

0800194c <__aeabi_dcmplt>:
 800194c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001950:	f7ff ffea 	bl	8001928 <__aeabi_cdcmpeq>
 8001954:	bf34      	ite	cc
 8001956:	2001      	movcc	r0, #1
 8001958:	2000      	movcs	r0, #0
 800195a:	f85d fb08 	ldr.w	pc, [sp], #8
 800195e:	bf00      	nop

08001960 <__aeabi_dcmple>:
 8001960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001964:	f7ff ffe0 	bl	8001928 <__aeabi_cdcmpeq>
 8001968:	bf94      	ite	ls
 800196a:	2001      	movls	r0, #1
 800196c:	2000      	movhi	r0, #0
 800196e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001972:	bf00      	nop

08001974 <__aeabi_dcmpge>:
 8001974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001978:	f7ff ffce 	bl	8001918 <__aeabi_cdrcmple>
 800197c:	bf94      	ite	ls
 800197e:	2001      	movls	r0, #1
 8001980:	2000      	movhi	r0, #0
 8001982:	f85d fb08 	ldr.w	pc, [sp], #8
 8001986:	bf00      	nop

08001988 <__aeabi_dcmpgt>:
 8001988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800198c:	f7ff ffc4 	bl	8001918 <__aeabi_cdrcmple>
 8001990:	bf34      	ite	cc
 8001992:	2001      	movcc	r0, #1
 8001994:	2000      	movcs	r0, #0
 8001996:	f85d fb08 	ldr.w	pc, [sp], #8
 800199a:	bf00      	nop

0800199c <__aeabi_dcmpun>:
 800199c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80019a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80019a4:	d102      	bne.n	80019ac <__aeabi_dcmpun+0x10>
 80019a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80019aa:	d10a      	bne.n	80019c2 <__aeabi_dcmpun+0x26>
 80019ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80019b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80019b4:	d102      	bne.n	80019bc <__aeabi_dcmpun+0x20>
 80019b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80019ba:	d102      	bne.n	80019c2 <__aeabi_dcmpun+0x26>
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	4770      	bx	lr
 80019c2:	f04f 0001 	mov.w	r0, #1
 80019c6:	4770      	bx	lr

080019c8 <__aeabi_d2iz>:
 80019c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80019cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80019d0:	d215      	bcs.n	80019fe <__aeabi_d2iz+0x36>
 80019d2:	d511      	bpl.n	80019f8 <__aeabi_d2iz+0x30>
 80019d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80019d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80019dc:	d912      	bls.n	8001a04 <__aeabi_d2iz+0x3c>
 80019de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80019e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80019e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80019ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80019ee:	fa23 f002 	lsr.w	r0, r3, r2
 80019f2:	bf18      	it	ne
 80019f4:	4240      	negne	r0, r0
 80019f6:	4770      	bx	lr
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	4770      	bx	lr
 80019fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001a02:	d105      	bne.n	8001a10 <__aeabi_d2iz+0x48>
 8001a04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8001a08:	bf08      	it	eq
 8001a0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001a0e:	4770      	bx	lr
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop

08001a18 <__aeabi_uldivmod>:
 8001a18:	b953      	cbnz	r3, 8001a30 <__aeabi_uldivmod+0x18>
 8001a1a:	b94a      	cbnz	r2, 8001a30 <__aeabi_uldivmod+0x18>
 8001a1c:	2900      	cmp	r1, #0
 8001a1e:	bf08      	it	eq
 8001a20:	2800      	cmpeq	r0, #0
 8001a22:	bf1c      	itt	ne
 8001a24:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001a28:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001a2c:	f000 b988 	b.w	8001d40 <__aeabi_idiv0>
 8001a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8001a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001a38:	f000 f806 	bl	8001a48 <__udivmoddi4>
 8001a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001a44:	b004      	add	sp, #16
 8001a46:	4770      	bx	lr

08001a48 <__udivmoddi4>:
 8001a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a4c:	9d08      	ldr	r5, [sp, #32]
 8001a4e:	468e      	mov	lr, r1
 8001a50:	4604      	mov	r4, r0
 8001a52:	4688      	mov	r8, r1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d14a      	bne.n	8001aee <__udivmoddi4+0xa6>
 8001a58:	428a      	cmp	r2, r1
 8001a5a:	4617      	mov	r7, r2
 8001a5c:	d962      	bls.n	8001b24 <__udivmoddi4+0xdc>
 8001a5e:	fab2 f682 	clz	r6, r2
 8001a62:	b14e      	cbz	r6, 8001a78 <__udivmoddi4+0x30>
 8001a64:	f1c6 0320 	rsb	r3, r6, #32
 8001a68:	fa01 f806 	lsl.w	r8, r1, r6
 8001a6c:	fa20 f303 	lsr.w	r3, r0, r3
 8001a70:	40b7      	lsls	r7, r6
 8001a72:	ea43 0808 	orr.w	r8, r3, r8
 8001a76:	40b4      	lsls	r4, r6
 8001a78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001a7c:	fa1f fc87 	uxth.w	ip, r7
 8001a80:	fbb8 f1fe 	udiv	r1, r8, lr
 8001a84:	0c23      	lsrs	r3, r4, #16
 8001a86:	fb0e 8811 	mls	r8, lr, r1, r8
 8001a8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001a8e:	fb01 f20c 	mul.w	r2, r1, ip
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d909      	bls.n	8001aaa <__udivmoddi4+0x62>
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001a9c:	f080 80ea 	bcs.w	8001c74 <__udivmoddi4+0x22c>
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f240 80e7 	bls.w	8001c74 <__udivmoddi4+0x22c>
 8001aa6:	3902      	subs	r1, #2
 8001aa8:	443b      	add	r3, r7
 8001aaa:	1a9a      	subs	r2, r3, r2
 8001aac:	b2a3      	uxth	r3, r4
 8001aae:	fbb2 f0fe 	udiv	r0, r2, lr
 8001ab2:	fb0e 2210 	mls	r2, lr, r0, r2
 8001ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001aba:	fb00 fc0c 	mul.w	ip, r0, ip
 8001abe:	459c      	cmp	ip, r3
 8001ac0:	d909      	bls.n	8001ad6 <__udivmoddi4+0x8e>
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001ac8:	f080 80d6 	bcs.w	8001c78 <__udivmoddi4+0x230>
 8001acc:	459c      	cmp	ip, r3
 8001ace:	f240 80d3 	bls.w	8001c78 <__udivmoddi4+0x230>
 8001ad2:	443b      	add	r3, r7
 8001ad4:	3802      	subs	r0, #2
 8001ad6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001ada:	eba3 030c 	sub.w	r3, r3, ip
 8001ade:	2100      	movs	r1, #0
 8001ae0:	b11d      	cbz	r5, 8001aea <__udivmoddi4+0xa2>
 8001ae2:	40f3      	lsrs	r3, r6
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8001aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aee:	428b      	cmp	r3, r1
 8001af0:	d905      	bls.n	8001afe <__udivmoddi4+0xb6>
 8001af2:	b10d      	cbz	r5, 8001af8 <__udivmoddi4+0xb0>
 8001af4:	e9c5 0100 	strd	r0, r1, [r5]
 8001af8:	2100      	movs	r1, #0
 8001afa:	4608      	mov	r0, r1
 8001afc:	e7f5      	b.n	8001aea <__udivmoddi4+0xa2>
 8001afe:	fab3 f183 	clz	r1, r3
 8001b02:	2900      	cmp	r1, #0
 8001b04:	d146      	bne.n	8001b94 <__udivmoddi4+0x14c>
 8001b06:	4573      	cmp	r3, lr
 8001b08:	d302      	bcc.n	8001b10 <__udivmoddi4+0xc8>
 8001b0a:	4282      	cmp	r2, r0
 8001b0c:	f200 8105 	bhi.w	8001d1a <__udivmoddi4+0x2d2>
 8001b10:	1a84      	subs	r4, r0, r2
 8001b12:	eb6e 0203 	sbc.w	r2, lr, r3
 8001b16:	2001      	movs	r0, #1
 8001b18:	4690      	mov	r8, r2
 8001b1a:	2d00      	cmp	r5, #0
 8001b1c:	d0e5      	beq.n	8001aea <__udivmoddi4+0xa2>
 8001b1e:	e9c5 4800 	strd	r4, r8, [r5]
 8001b22:	e7e2      	b.n	8001aea <__udivmoddi4+0xa2>
 8001b24:	2a00      	cmp	r2, #0
 8001b26:	f000 8090 	beq.w	8001c4a <__udivmoddi4+0x202>
 8001b2a:	fab2 f682 	clz	r6, r2
 8001b2e:	2e00      	cmp	r6, #0
 8001b30:	f040 80a4 	bne.w	8001c7c <__udivmoddi4+0x234>
 8001b34:	1a8a      	subs	r2, r1, r2
 8001b36:	0c03      	lsrs	r3, r0, #16
 8001b38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001b3c:	b280      	uxth	r0, r0
 8001b3e:	b2bc      	uxth	r4, r7
 8001b40:	2101      	movs	r1, #1
 8001b42:	fbb2 fcfe 	udiv	ip, r2, lr
 8001b46:	fb0e 221c 	mls	r2, lr, ip, r2
 8001b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b4e:	fb04 f20c 	mul.w	r2, r4, ip
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d907      	bls.n	8001b66 <__udivmoddi4+0x11e>
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8001b5c:	d202      	bcs.n	8001b64 <__udivmoddi4+0x11c>
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	f200 80e0 	bhi.w	8001d24 <__udivmoddi4+0x2dc>
 8001b64:	46c4      	mov	ip, r8
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	fbb3 f2fe 	udiv	r2, r3, lr
 8001b6c:	fb0e 3312 	mls	r3, lr, r2, r3
 8001b70:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001b74:	fb02 f404 	mul.w	r4, r2, r4
 8001b78:	429c      	cmp	r4, r3
 8001b7a:	d907      	bls.n	8001b8c <__udivmoddi4+0x144>
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8001b82:	d202      	bcs.n	8001b8a <__udivmoddi4+0x142>
 8001b84:	429c      	cmp	r4, r3
 8001b86:	f200 80ca 	bhi.w	8001d1e <__udivmoddi4+0x2d6>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	1b1b      	subs	r3, r3, r4
 8001b8e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001b92:	e7a5      	b.n	8001ae0 <__udivmoddi4+0x98>
 8001b94:	f1c1 0620 	rsb	r6, r1, #32
 8001b98:	408b      	lsls	r3, r1
 8001b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8001b9e:	431f      	orrs	r7, r3
 8001ba0:	fa0e f401 	lsl.w	r4, lr, r1
 8001ba4:	fa20 f306 	lsr.w	r3, r0, r6
 8001ba8:	fa2e fe06 	lsr.w	lr, lr, r6
 8001bac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001bb0:	4323      	orrs	r3, r4
 8001bb2:	fa00 f801 	lsl.w	r8, r0, r1
 8001bb6:	fa1f fc87 	uxth.w	ip, r7
 8001bba:	fbbe f0f9 	udiv	r0, lr, r9
 8001bbe:	0c1c      	lsrs	r4, r3, #16
 8001bc0:	fb09 ee10 	mls	lr, r9, r0, lr
 8001bc4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001bc8:	fb00 fe0c 	mul.w	lr, r0, ip
 8001bcc:	45a6      	cmp	lr, r4
 8001bce:	fa02 f201 	lsl.w	r2, r2, r1
 8001bd2:	d909      	bls.n	8001be8 <__udivmoddi4+0x1a0>
 8001bd4:	193c      	adds	r4, r7, r4
 8001bd6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8001bda:	f080 809c 	bcs.w	8001d16 <__udivmoddi4+0x2ce>
 8001bde:	45a6      	cmp	lr, r4
 8001be0:	f240 8099 	bls.w	8001d16 <__udivmoddi4+0x2ce>
 8001be4:	3802      	subs	r0, #2
 8001be6:	443c      	add	r4, r7
 8001be8:	eba4 040e 	sub.w	r4, r4, lr
 8001bec:	fa1f fe83 	uxth.w	lr, r3
 8001bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8001bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8001bf8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001bfc:	fb03 fc0c 	mul.w	ip, r3, ip
 8001c00:	45a4      	cmp	ip, r4
 8001c02:	d908      	bls.n	8001c16 <__udivmoddi4+0x1ce>
 8001c04:	193c      	adds	r4, r7, r4
 8001c06:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8001c0a:	f080 8082 	bcs.w	8001d12 <__udivmoddi4+0x2ca>
 8001c0e:	45a4      	cmp	ip, r4
 8001c10:	d97f      	bls.n	8001d12 <__udivmoddi4+0x2ca>
 8001c12:	3b02      	subs	r3, #2
 8001c14:	443c      	add	r4, r7
 8001c16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001c1a:	eba4 040c 	sub.w	r4, r4, ip
 8001c1e:	fba0 ec02 	umull	lr, ip, r0, r2
 8001c22:	4564      	cmp	r4, ip
 8001c24:	4673      	mov	r3, lr
 8001c26:	46e1      	mov	r9, ip
 8001c28:	d362      	bcc.n	8001cf0 <__udivmoddi4+0x2a8>
 8001c2a:	d05f      	beq.n	8001cec <__udivmoddi4+0x2a4>
 8001c2c:	b15d      	cbz	r5, 8001c46 <__udivmoddi4+0x1fe>
 8001c2e:	ebb8 0203 	subs.w	r2, r8, r3
 8001c32:	eb64 0409 	sbc.w	r4, r4, r9
 8001c36:	fa04 f606 	lsl.w	r6, r4, r6
 8001c3a:	fa22 f301 	lsr.w	r3, r2, r1
 8001c3e:	431e      	orrs	r6, r3
 8001c40:	40cc      	lsrs	r4, r1
 8001c42:	e9c5 6400 	strd	r6, r4, [r5]
 8001c46:	2100      	movs	r1, #0
 8001c48:	e74f      	b.n	8001aea <__udivmoddi4+0xa2>
 8001c4a:	fbb1 fcf2 	udiv	ip, r1, r2
 8001c4e:	0c01      	lsrs	r1, r0, #16
 8001c50:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001c54:	b280      	uxth	r0, r0
 8001c56:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	4638      	mov	r0, r7
 8001c5e:	463c      	mov	r4, r7
 8001c60:	46b8      	mov	r8, r7
 8001c62:	46be      	mov	lr, r7
 8001c64:	2620      	movs	r6, #32
 8001c66:	fbb1 f1f7 	udiv	r1, r1, r7
 8001c6a:	eba2 0208 	sub.w	r2, r2, r8
 8001c6e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001c72:	e766      	b.n	8001b42 <__udivmoddi4+0xfa>
 8001c74:	4601      	mov	r1, r0
 8001c76:	e718      	b.n	8001aaa <__udivmoddi4+0x62>
 8001c78:	4610      	mov	r0, r2
 8001c7a:	e72c      	b.n	8001ad6 <__udivmoddi4+0x8e>
 8001c7c:	f1c6 0220 	rsb	r2, r6, #32
 8001c80:	fa2e f302 	lsr.w	r3, lr, r2
 8001c84:	40b7      	lsls	r7, r6
 8001c86:	40b1      	lsls	r1, r6
 8001c88:	fa20 f202 	lsr.w	r2, r0, r2
 8001c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001c90:	430a      	orrs	r2, r1
 8001c92:	fbb3 f8fe 	udiv	r8, r3, lr
 8001c96:	b2bc      	uxth	r4, r7
 8001c98:	fb0e 3318 	mls	r3, lr, r8, r3
 8001c9c:	0c11      	lsrs	r1, r2, #16
 8001c9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001ca2:	fb08 f904 	mul.w	r9, r8, r4
 8001ca6:	40b0      	lsls	r0, r6
 8001ca8:	4589      	cmp	r9, r1
 8001caa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001cae:	b280      	uxth	r0, r0
 8001cb0:	d93e      	bls.n	8001d30 <__udivmoddi4+0x2e8>
 8001cb2:	1879      	adds	r1, r7, r1
 8001cb4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001cb8:	d201      	bcs.n	8001cbe <__udivmoddi4+0x276>
 8001cba:	4589      	cmp	r9, r1
 8001cbc:	d81f      	bhi.n	8001cfe <__udivmoddi4+0x2b6>
 8001cbe:	eba1 0109 	sub.w	r1, r1, r9
 8001cc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8001cc6:	fb09 f804 	mul.w	r8, r9, r4
 8001cca:	fb0e 1119 	mls	r1, lr, r9, r1
 8001cce:	b292      	uxth	r2, r2
 8001cd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001cd4:	4542      	cmp	r2, r8
 8001cd6:	d229      	bcs.n	8001d2c <__udivmoddi4+0x2e4>
 8001cd8:	18ba      	adds	r2, r7, r2
 8001cda:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001cde:	d2c4      	bcs.n	8001c6a <__udivmoddi4+0x222>
 8001ce0:	4542      	cmp	r2, r8
 8001ce2:	d2c2      	bcs.n	8001c6a <__udivmoddi4+0x222>
 8001ce4:	f1a9 0102 	sub.w	r1, r9, #2
 8001ce8:	443a      	add	r2, r7
 8001cea:	e7be      	b.n	8001c6a <__udivmoddi4+0x222>
 8001cec:	45f0      	cmp	r8, lr
 8001cee:	d29d      	bcs.n	8001c2c <__udivmoddi4+0x1e4>
 8001cf0:	ebbe 0302 	subs.w	r3, lr, r2
 8001cf4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001cf8:	3801      	subs	r0, #1
 8001cfa:	46e1      	mov	r9, ip
 8001cfc:	e796      	b.n	8001c2c <__udivmoddi4+0x1e4>
 8001cfe:	eba7 0909 	sub.w	r9, r7, r9
 8001d02:	4449      	add	r1, r9
 8001d04:	f1a8 0c02 	sub.w	ip, r8, #2
 8001d08:	fbb1 f9fe 	udiv	r9, r1, lr
 8001d0c:	fb09 f804 	mul.w	r8, r9, r4
 8001d10:	e7db      	b.n	8001cca <__udivmoddi4+0x282>
 8001d12:	4673      	mov	r3, lr
 8001d14:	e77f      	b.n	8001c16 <__udivmoddi4+0x1ce>
 8001d16:	4650      	mov	r0, sl
 8001d18:	e766      	b.n	8001be8 <__udivmoddi4+0x1a0>
 8001d1a:	4608      	mov	r0, r1
 8001d1c:	e6fd      	b.n	8001b1a <__udivmoddi4+0xd2>
 8001d1e:	443b      	add	r3, r7
 8001d20:	3a02      	subs	r2, #2
 8001d22:	e733      	b.n	8001b8c <__udivmoddi4+0x144>
 8001d24:	f1ac 0c02 	sub.w	ip, ip, #2
 8001d28:	443b      	add	r3, r7
 8001d2a:	e71c      	b.n	8001b66 <__udivmoddi4+0x11e>
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	e79c      	b.n	8001c6a <__udivmoddi4+0x222>
 8001d30:	eba1 0109 	sub.w	r1, r1, r9
 8001d34:	46c4      	mov	ip, r8
 8001d36:	fbb1 f9fe 	udiv	r9, r1, lr
 8001d3a:	fb09 f804 	mul.w	r8, r9, r4
 8001d3e:	e7c4      	b.n	8001cca <__udivmoddi4+0x282>

08001d40 <__aeabi_idiv0>:
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop

08001d44 <TRANSITION_vertical_wipe>:

/**
 * Fonction pour effectuer une transition verticale
 */
void TRANSITION_vertical_wipe(uint16_t color, uint16_t step_delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460a      	mov	r2, r1
 8001d4e:	80fb      	strh	r3, [r7, #6]
 8001d50:	4613      	mov	r3, r2
 8001d52:	80bb      	strh	r3, [r7, #4]
	for (int y = 0; y < ILI9341_HEIGHT; y += 10)
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e013      	b.n	8001d82 <TRANSITION_vertical_wipe+0x3e>
	{
		ILI9341_DrawFilledRectangle(0, y, ILI9341_WIDTH, y + 10, color);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	330a      	adds	r3, #10
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	22f0      	movs	r2, #240	@ 0xf0
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f001 fa6a 	bl	8003248 <ILI9341_DrawFilledRectangle>
		HAL_Delay(step_delay);
 8001d74:	88bb      	ldrh	r3, [r7, #4]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 f9a8 	bl	80050cc <HAL_Delay>
	for (int y = 0; y < ILI9341_HEIGHT; y += 10)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	330a      	adds	r3, #10
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001d88:	dbe7      	blt.n	8001d5a <TRANSITION_vertical_wipe+0x16>
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <TRANSITION_apply_with_grid>:

/**
 * Applique une transition après mise à jour logique
 */
void TRANSITION_apply_with_grid(grid_t *grid, uint16_t color, uint16_t step_delay)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	803b      	strh	r3, [r7, #0]
	TRANSITION_vertical_wipe(color, step_delay);
 8001da4:	883a      	ldrh	r2, [r7, #0]
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ffca 	bl	8001d44 <TRANSITION_vertical_wipe>
	ILI9341_Fill(ILI9341_COLOR_WHITE);          // Nettoyage visuel
 8001db0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001db4:	f001 f86c 	bl	8002e90 <ILI9341_Fill>
	DISPLAY_sync_with_grid(grid);               // Réalignement mémoire <-> écran
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fa83 	bl	80022c4 <DISPLAY_sync_with_grid>
	DISPLAY_refresh(grid);                     // Redessin complet
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fa04 	bl	80021cc <DISPLAY_refresh>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <action_play_pause>:

/**
 * Action : jouer / mettre en pause la simulation
 */
void action_play_pause(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	is_paused = !is_paused;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <action_play_pause+0x50>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf14      	ite	ne
 8001dd8:	2301      	movne	r3, #1
 8001dda:	2300      	moveq	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f083 0301 	eor.w	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <action_play_pause+0x50>)
 8001dec:	701a      	strb	r2, [r3, #0]
	in_menu = false;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <action_play_pause+0x54>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]

	extern uint8_t cooldown_after_menu;
	cooldown_after_menu = 10;
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <action_play_pause+0x58>)
 8001df6:	220a      	movs	r2, #10
 8001df8:	701a      	strb	r2, [r3, #0]

	TRANSITION_vertical_wipe(ILI9341_COLOR_WHITE, 10); // Ajouté AVANT le rafraîchissement
 8001dfa:	210a      	movs	r1, #10
 8001dfc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e00:	f7ff ffa0 	bl	8001d44 <TRANSITION_vertical_wipe>
	ILI9341_Fill(ILI9341_COLOR_WHITE);                 // Nettoyage post-transition
 8001e04:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e08:	f001 f842 	bl	8002e90 <ILI9341_Fill>
	DISPLAY_sync_with_grid(&grid0);
 8001e0c:	4806      	ldr	r0, [pc, #24]	@ (8001e28 <action_play_pause+0x5c>)
 8001e0e:	f000 fa59 	bl	80022c4 <DISPLAY_sync_with_grid>
	DISPLAY_refresh(&grid0);
 8001e12:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <action_play_pause+0x5c>)
 8001e14:	f000 f9da 	bl	80021cc <DISPLAY_refresh>
//	else
//	{
//		ILI9341_DrawLine(111, 150, 6, 20, ILI9341_COLOR_WHITE);
//		ILI9341_DrawLine(122, 150, 6, 20, ILI9341_COLOR_WHITE);
//	}
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	2000021c 	.word	0x2000021c
 8001e24:	20003a73 	.word	0x20003a73
 8001e28:	200014f0 	.word	0x200014f0

08001e2c <action_clear_grid>:

/**
 * Action : efface toutes les cellules de la grille
 */
void action_clear_grid(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
	in_menu = false;
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <action_clear_grid+0x60>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]

	extern uint8_t cooldown_after_menu;
	cooldown_after_menu = 10;
 8001e38:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <action_clear_grid+0x64>)
 8001e3a:	220a      	movs	r2, #10
 8001e3c:	701a      	strb	r2, [r3, #0]

	for (int x = 0; x < NB_COLUMN; x++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	e016      	b.n	8001e72 <action_clear_grid+0x46>
		for (int y = 0; y < NB_LINE; y++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	e00d      	b.n	8001e66 <action_clear_grid+0x3a>
			grid0.cells[x][y] = CELL_DEAD;
 8001e4a:	4912      	ldr	r1, [pc, #72]	@ (8001e94 <action_clear_grid+0x68>)
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	18ca      	adds	r2, r1, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
		for (int y = 0; y < NB_LINE; y++)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e6a:	ddee      	ble.n	8001e4a <action_clear_grid+0x1e>
	for (int x = 0; x < NB_COLUMN; x++)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b4f      	cmp	r3, #79	@ 0x4f
 8001e76:	dde5      	ble.n	8001e44 <action_clear_grid+0x18>

	TRANSITION_apply_with_grid(&grid0, ILI9341_COLOR_WHITE, 10);
 8001e78:	220a      	movs	r2, #10
 8001e7a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e7e:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <action_clear_grid+0x68>)
 8001e80:	f7ff ff88 	bl	8001d94 <TRANSITION_apply_with_grid>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000021c 	.word	0x2000021c
 8001e90:	20003a73 	.word	0x20003a73
 8001e94:	200014f0 	.word	0x200014f0

08001e98 <action_save_grid>:

/**
 * Action : sauvegarde (à implémenter)
 */
void action_save_grid(void) {}
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <action_open_menu>:

/**
 * Action : ouvre le menu
 */
void action_open_menu(void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	af00      	add	r7, sp, #0
	MENU_open();
 8001eaa:	f000 fc71 	bl	8002790 <MENU_open>
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <action_open_settings>:

/**
 * Action : ouvre les paramètres
 */
void action_open_settings(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af02      	add	r7, sp, #8
	in_settings = true;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <action_open_settings+0x30>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
	ILI9341_Fill(ILI9341_COLOR_WHITE);
 8001ec0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ec4:	f000 ffe4 	bl	8002e90 <ILI9341_Fill>
	ILI9341_Puts(70, 150, "SETTINGS", &Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_WHITE);
 8001ec8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <action_open_settings+0x34>)
 8001ed4:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <action_open_settings+0x38>)
 8001ed6:	2196      	movs	r1, #150	@ 0x96
 8001ed8:	2046      	movs	r0, #70	@ 0x46
 8001eda:	f001 f893 	bl	8003004 <ILI9341_Puts>
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000021d 	.word	0x2000021d
 8001ee8:	2000001c 	.word	0x2000001c
 8001eec:	0800c418 	.word	0x0800c418

08001ef0 <action_to_do>:

/**
 * Dispatcher général d’actions utilisateur
 */
void action_to_do(user_actions_e action)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	switch (action)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d81b      	bhi.n	8001f3a <action_to_do+0x4a>
 8001f02:	a201      	add	r2, pc, #4	@ (adr r2, 8001f08 <action_to_do+0x18>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f1d 	.word	0x08001f1d
 8001f0c:	08001f23 	.word	0x08001f23
 8001f10:	08001f29 	.word	0x08001f29
 8001f14:	08001f2f 	.word	0x08001f2f
 8001f18:	08001f35 	.word	0x08001f35
	{
	case ACTION_PLAY_PAUSE:
		action_play_pause();
 8001f1c:	f7ff ff56 	bl	8001dcc <action_play_pause>
		break;
 8001f20:	e00c      	b.n	8001f3c <action_to_do+0x4c>
	case ACTION_CLEAR_GRID:
		action_clear_grid();
 8001f22:	f7ff ff83 	bl	8001e2c <action_clear_grid>
		break;
 8001f26:	e009      	b.n	8001f3c <action_to_do+0x4c>
	case ACTION_SAVE_GRID:
		action_save_grid();
 8001f28:	f7ff ffb6 	bl	8001e98 <action_save_grid>
		break;
 8001f2c:	e006      	b.n	8001f3c <action_to_do+0x4c>
	case ACTION_OPEN_MENU:
		action_open_menu();
 8001f2e:	f7ff ffba 	bl	8001ea6 <action_open_menu>
		break;
 8001f32:	e003      	b.n	8001f3c <action_to_do+0x4c>
	case ACTION_OPEN_SETTINGS:
		action_open_settings();
 8001f34:	f7ff ffbe 	bl	8001eb4 <action_open_settings>
		break;
 8001f38:	e000      	b.n	8001f3c <action_to_do+0x4c>
	default:
		break;
 8001f3a:	bf00      	nop
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <BUTTONS_init>:
static volatile uint32_t t = 0;


//cette fonction permet de créer un retard entre deux lectures pour éviter de lire trop vite et détecter les rebonds
void BUTTONS_init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af02      	add	r7, sp, #8
	//Initialisation du port du bouton bleu (carte Nucleo)
	BSP_GPIO_pin_config(GPIO_BUTTON_LEFT, PIN_BUTTON_LEFT, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_MODE_INPUT);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	2302      	movs	r3, #2
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2301      	movs	r3, #1
 8001f54:	2200      	movs	r2, #0
 8001f56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f5e:	f001 fd2b 	bl	80039b8 <BSP_GPIO_pin_config>
	BSP_GPIO_pin_config(GPIO_BUTTON_RIGHT, PIN_BUTTON_RIGHT, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_MODE_INPUT);
 8001f62:	2300      	movs	r3, #0
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	2302      	movs	r3, #2
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2140      	movs	r1, #64	@ 0x40
 8001f70:	4815      	ldr	r0, [pc, #84]	@ (8001fc8 <BUTTONS_init+0x84>)
 8001f72:	f001 fd21 	bl	80039b8 <BSP_GPIO_pin_config>
	BSP_GPIO_pin_config(GPIO_BUTTON_UP, PIN_BUTTON_UP, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_MODE_INPUT);
 8001f76:	2300      	movs	r3, #0
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f8a:	f001 fd15 	bl	80039b8 <BSP_GPIO_pin_config>
	BSP_GPIO_pin_config(GPIO_BUTTON_DOWN, PIN_BUTTON_DOWN, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_MODE_INPUT);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	2302      	movs	r3, #2
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2301      	movs	r3, #1
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa2:	f001 fd09 	bl	80039b8 <BSP_GPIO_pin_config>
	BSP_GPIO_pin_config(GPIO_BUTTON_CENTER, PIN_BUTTON_CENTER, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH, GPIO_MODE_INPUT);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	2302      	movs	r3, #2
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2301      	movs	r3, #1
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4804      	ldr	r0, [pc, #16]	@ (8001fc8 <BUTTONS_init+0x84>)
 8001fb6:	f001 fcff 	bl	80039b8 <BSP_GPIO_pin_config>
	BSP_systick_add_callback_function(&BUTTONS_process_ms);
 8001fba:	4804      	ldr	r0, [pc, #16]	@ (8001fcc <BUTTONS_init+0x88>)
 8001fbc:	f002 fbf8 	bl	80047b0 <BSP_systick_add_callback_function>
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	48000400 	.word	0x48000400
 8001fcc:	08001fd1 	.word	0x08001fd1

08001fd0 <BUTTONS_process_ms>:


void BUTTONS_process_ms(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
	if(t)
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <BUTTONS_process_ms+0x20>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <BUTTONS_process_ms+0x16>
		t--;
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <BUTTONS_process_ms+0x20>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	4a03      	ldr	r2, [pc, #12]	@ (8001ff0 <BUTTONS_process_ms+0x20>)
 8001fe4:	6013      	str	r3, [r2, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	20000220 	.word	0x20000220

08001ff4 <BUTTONS_update>:
}


//La fonction sert à dire pour chaque bouton : “est-ce qu’il vient d’être pressé ? relâché ? ou rien du tout ?”
void BUTTONS_update(button_e * button_left_event, button_e * button_right_event, button_e * button_up_event, button_e * button_down_event, button_e * button_center_event)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
	static bool previous_button_right = false;
	static bool previous_button_up = false;
	static bool previous_button_down = false;
	static bool previous_button_center = false;

	*button_left_event = BUTTON_NO_EVENT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
	*button_right_event = BUTTON_NO_EVENT;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
	*button_up_event = BUTTON_NO_EVENT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
	*button_down_event = BUTTON_NO_EVENT;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
	*button_center_event = BUTTON_NO_EVENT;
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]

	if(!t)
 8002020:	4b49      	ldr	r3, [pc, #292]	@ (8002148 <BUTTONS_update+0x154>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 808b 	bne.w	8002140 <BUTTONS_update+0x14c>
	{
		t = 20;
 800202a:	4b47      	ldr	r3, [pc, #284]	@ (8002148 <BUTTONS_update+0x154>)
 800202c:	2214      	movs	r2, #20
 800202e:	601a      	str	r2, [r3, #0]
		bool current_button_left = 	!HAL_GPIO_ReadPin(GPIO_BUTTON_LEFT, 	PIN_BUTTON_LEFT);
 8002030:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002038:	f003 fbbc 	bl	80057b4 <HAL_GPIO_ReadPin>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	75fb      	strb	r3, [r7, #23]
		bool current_button_right = 	!HAL_GPIO_ReadPin(GPIO_BUTTON_RIGHT, 	PIN_BUTTON_RIGHT);
 8002048:	2140      	movs	r1, #64	@ 0x40
 800204a:	4840      	ldr	r0, [pc, #256]	@ (800214c <BUTTONS_update+0x158>)
 800204c:	f003 fbb2 	bl	80057b4 <HAL_GPIO_ReadPin>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	75bb      	strb	r3, [r7, #22]
		bool current_button_up = 		!HAL_GPIO_ReadPin(GPIO_BUTTON_UP, 		PIN_BUTTON_UP);
 800205c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002064:	f003 fba6 	bl	80057b4 <HAL_GPIO_ReadPin>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	757b      	strb	r3, [r7, #21]
		bool current_button_down = 	!HAL_GPIO_ReadPin(GPIO_BUTTON_DOWN, 	PIN_BUTTON_DOWN);
 8002074:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002078:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800207c:	f003 fb9a 	bl	80057b4 <HAL_GPIO_ReadPin>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	753b      	strb	r3, [r7, #20]
		bool current_button_center = 	!HAL_GPIO_ReadPin(GPIO_BUTTON_CENTER, 	PIN_BUTTON_CENTER);
 800208c:	2101      	movs	r1, #1
 800208e:	482f      	ldr	r0, [pc, #188]	@ (800214c <BUTTONS_update+0x158>)
 8002090:	f003 fb90 	bl	80057b4 <HAL_GPIO_ReadPin>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf0c      	ite	eq
 800209a:	2301      	moveq	r3, #1
 800209c:	2300      	movne	r3, #0
 800209e:	74fb      	strb	r3, [r7, #19]

		if (current_button_left != previous_button_left) {
 80020a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <BUTTONS_update+0x15c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	7dfa      	ldrb	r2, [r7, #23]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d00a      	beq.n	80020c0 <BUTTONS_update+0xcc>
			*button_left_event = current_button_left ? BUTTON_PRESS_EVENT : BUTTON_RELEASE_EVENT;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <BUTTONS_update+0xc0>
 80020b0:	2201      	movs	r2, #1
 80020b2:	e000      	b.n	80020b6 <BUTTONS_update+0xc2>
 80020b4:	2202      	movs	r2, #2
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	701a      	strb	r2, [r3, #0]
			previous_button_left = current_button_left;
 80020ba:	4a25      	ldr	r2, [pc, #148]	@ (8002150 <BUTTONS_update+0x15c>)
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	7013      	strb	r3, [r2, #0]
		}

		if (current_button_right != previous_button_right) {
 80020c0:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <BUTTONS_update+0x160>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	7dba      	ldrb	r2, [r7, #22]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d00a      	beq.n	80020e0 <BUTTONS_update+0xec>
			*button_right_event = current_button_right ? BUTTON_PRESS_EVENT : BUTTON_RELEASE_EVENT;
 80020ca:	7dbb      	ldrb	r3, [r7, #22]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <BUTTONS_update+0xe0>
 80020d0:	2201      	movs	r2, #1
 80020d2:	e000      	b.n	80020d6 <BUTTONS_update+0xe2>
 80020d4:	2202      	movs	r2, #2
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	701a      	strb	r2, [r3, #0]
			previous_button_right = current_button_right;
 80020da:	4a1e      	ldr	r2, [pc, #120]	@ (8002154 <BUTTONS_update+0x160>)
 80020dc:	7dbb      	ldrb	r3, [r7, #22]
 80020de:	7013      	strb	r3, [r2, #0]
		}

		if (current_button_up != previous_button_up) {
 80020e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <BUTTONS_update+0x164>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	7d7a      	ldrb	r2, [r7, #21]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d00a      	beq.n	8002100 <BUTTONS_update+0x10c>
			*button_up_event = current_button_up ? BUTTON_PRESS_EVENT : BUTTON_RELEASE_EVENT;
 80020ea:	7d7b      	ldrb	r3, [r7, #21]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <BUTTONS_update+0x100>
 80020f0:	2201      	movs	r2, #1
 80020f2:	e000      	b.n	80020f6 <BUTTONS_update+0x102>
 80020f4:	2202      	movs	r2, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	701a      	strb	r2, [r3, #0]
			previous_button_up = current_button_up;
 80020fa:	4a17      	ldr	r2, [pc, #92]	@ (8002158 <BUTTONS_update+0x164>)
 80020fc:	7d7b      	ldrb	r3, [r7, #21]
 80020fe:	7013      	strb	r3, [r2, #0]
		}

		if (current_button_down != previous_button_down) {
 8002100:	4b16      	ldr	r3, [pc, #88]	@ (800215c <BUTTONS_update+0x168>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	7d3a      	ldrb	r2, [r7, #20]
 8002106:	429a      	cmp	r2, r3
 8002108:	d00a      	beq.n	8002120 <BUTTONS_update+0x12c>
			*button_down_event = current_button_down ? BUTTON_PRESS_EVENT : BUTTON_RELEASE_EVENT;
 800210a:	7d3b      	ldrb	r3, [r7, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <BUTTONS_update+0x120>
 8002110:	2201      	movs	r2, #1
 8002112:	e000      	b.n	8002116 <BUTTONS_update+0x122>
 8002114:	2202      	movs	r2, #2
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	701a      	strb	r2, [r3, #0]
			previous_button_down = current_button_down;
 800211a:	4a10      	ldr	r2, [pc, #64]	@ (800215c <BUTTONS_update+0x168>)
 800211c:	7d3b      	ldrb	r3, [r7, #20]
 800211e:	7013      	strb	r3, [r2, #0]
		}

		if (current_button_center != previous_button_center) {
 8002120:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <BUTTONS_update+0x16c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	7cfa      	ldrb	r2, [r7, #19]
 8002126:	429a      	cmp	r2, r3
 8002128:	d00a      	beq.n	8002140 <BUTTONS_update+0x14c>
			*button_center_event = current_button_center ? BUTTON_PRESS_EVENT : BUTTON_RELEASE_EVENT;
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <BUTTONS_update+0x140>
 8002130:	2201      	movs	r2, #1
 8002132:	e000      	b.n	8002136 <BUTTONS_update+0x142>
 8002134:	2202      	movs	r2, #2
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	701a      	strb	r2, [r3, #0]
			previous_button_center = current_button_center;
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <BUTTONS_update+0x16c>)
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	7013      	strb	r3, [r2, #0]
		}
	}
}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000220 	.word	0x20000220
 800214c:	48000400 	.word	0x48000400
 8002150:	20000224 	.word	0x20000224
 8002154:	20000225 	.word	0x20000225
 8002158:	20000226 	.word	0x20000226
 800215c:	20000227 	.word	0x20000227
 8002160:	20000228 	.word	0x20000228

08002164 <DISPLAY_init>:

//_____________________________________

//Fonctions publiques

void DISPLAY_init(void) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	ILI9341_Init();
 800216a:	f000 fc4f 	bl	8002a0c <ILI9341_Init>
	ILI9341_Fill(ILI9341_COLOR_WHITE);
 800216e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002172:	f000 fe8d 	bl	8002e90 <ILI9341_Fill>
	ILI9341_Rotate(ILI9341_Orientation_Landscape_2);
 8002176:	2003      	movs	r0, #3
 8002178:	f000 ff02 	bl	8002f80 <ILI9341_Rotate>

	// Pour régler le rafraîchissement de l'écran
	for(int x = 0; x < NB_COLUMN; x++) {
 800217c:	2300      	movs	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	e016      	b.n	80021b0 <DISPLAY_init+0x4c>
		for(int y = 0; y < NB_LINE; y++) {
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	e00d      	b.n	80021a4 <DISPLAY_init+0x40>
			displayed_cells[x][y] = CELL_DEAD;
 8002188:	490e      	ldr	r1, [pc, #56]	@ (80021c4 <DISPLAY_init+0x60>)
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	18ca      	adds	r2, r1, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
		for(int y = 0; y < NB_LINE; y++) {
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b3b      	cmp	r3, #59	@ 0x3b
 80021a8:	ddee      	ble.n	8002188 <DISPLAY_init+0x24>
	for(int x = 0; x < NB_COLUMN; x++) {
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3301      	adds	r3, #1
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b4f      	cmp	r3, #79	@ 0x4f
 80021b4:	dde5      	ble.n	8002182 <DISPLAY_init+0x1e>
		}
	}

	reset = true;
 80021b6:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <DISPLAY_init+0x64>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	2000022c 	.word	0x2000022c
 80021c8:	200014ec 	.word	0x200014ec

080021cc <DISPLAY_refresh>:



void DISPLAY_refresh(grid_t *grid){
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	6078      	str	r0, [r7, #4]
	//Code qui permet de calculer l'état de chaque cellule de la grille


	for(int x = 0; x < NB_COLUMN; x++){
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e066      	b.n	80022a8 <DISPLAY_refresh+0xdc>
		for(int y = 0; y < NB_LINE; y++){
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e05d      	b.n	800229c <DISPLAY_refresh+0xd0>

			// De la manière suivante, je ne rafraîchit que les cellules changeantes
			if((reset == true) || (grid->cells[x][y] != displayed_cells[x][y])){
 80021e0:	4b36      	ldr	r3, [pc, #216]	@ (80022bc <DISPLAY_refresh+0xf0>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d115      	bne.n	8002214 <DISPLAY_refresh+0x48>
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	18ca      	adds	r2, r1, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	7819      	ldrb	r1, [r3, #0]
 80021fc:	4830      	ldr	r0, [pc, #192]	@ (80022c0 <DISPLAY_refresh+0xf4>)
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	18c2      	adds	r2, r0, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4299      	cmp	r1, r3
 8002212:	d040      	beq.n	8002296 <DISPLAY_refresh+0xca>
				// Affichage de la cellule

				// Et on remplit les cellules avec du blanc, en premier lieu, puis on vérifie si elles sont vivantes ou pas
				uint16_t color = ILI9341_COLOR_MAGENTA;
 8002214:	f24a 2354 	movw	r3, #41556	@ 0xa254
 8002218:	81fb      	strh	r3, [r7, #14]

				    if(grid->cells[x][y] == CELL_ALIVE)
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	18ca      	adds	r2, r1, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <DISPLAY_refresh+0x6c>
				        color = ILI9341_COLOR_BLACK;
 8002232:	2300      	movs	r3, #0
 8002234:	81fb      	strh	r3, [r7, #14]
 8002236:	e002      	b.n	800223e <DISPLAY_refresh+0x72>
				    else
				        color = ILI9341_COLOR_WHITE;
 8002238:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800223c:	81fb      	strh	r3, [r7, #14]

				    ILI9341_DrawFilledRectangle(
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	b29b      	uxth	r3, r3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	b298      	uxth	r0, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	b29b      	uxth	r3, r3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	b299      	uxth	r1, r3
				        x * CELL_SIZE,
				        y * CELL_SIZE,
				        (x + 1) * CELL_SIZE,
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
				    ILI9341_DrawFilledRectangle(
 8002252:	b29b      	uxth	r3, r3
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	b29a      	uxth	r2, r3
				        (y + 1) * CELL_SIZE,
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	3301      	adds	r3, #1
				    ILI9341_DrawFilledRectangle(
 800225c:	b29b      	uxth	r3, r3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	b29c      	uxth	r4, r3
 8002262:	89fb      	ldrh	r3, [r7, #14]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	4623      	mov	r3, r4
 8002268:	f000 ffee 	bl	8003248 <ILI9341_DrawFilledRectangle>
				        color
				    );

				    displayed_cells[x][y] = grid->cells[x][y];
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	18ca      	adds	r2, r1, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	7818      	ldrb	r0, [r3, #0]
 8002280:	490f      	ldr	r1, [pc, #60]	@ (80022c0 <DISPLAY_refresh+0xf4>)
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	18ca      	adds	r2, r1, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	4602      	mov	r2, r0
 8002294:	701a      	strb	r2, [r3, #0]
		for(int y = 0; y < NB_LINE; y++){
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	3301      	adds	r3, #1
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b3b      	cmp	r3, #59	@ 0x3b
 80022a0:	dd9e      	ble.n	80021e0 <DISPLAY_refresh+0x14>
	for(int x = 0; x < NB_COLUMN; x++){
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3301      	adds	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b4f      	cmp	r3, #79	@ 0x4f
 80022ac:	dd95      	ble.n	80021da <DISPLAY_refresh+0xe>
			}
		}
	}
	// On force "reset" à false à la fin

	reset = false;
 80022ae:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <DISPLAY_refresh+0xf0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]

}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	200014ec 	.word	0x200014ec
 80022c0:	2000022c 	.word	0x2000022c

080022c4 <DISPLAY_sync_with_grid>:

// Approche de solution

void DISPLAY_sync_with_grid(grid_t *grid)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
    for(int x = 0; x < NB_COLUMN; x++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e022      	b.n	8002318 <DISPLAY_sync_with_grid+0x54>
    {
        for(int y = 0; y < NB_LINE; y++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	e019      	b.n	800230c <DISPLAY_sync_with_grid+0x48>
        {
            displayed_cells[x][y] = ~grid->cells[x][y];  // force une différence
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	18ca      	adds	r2, r1, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4413      	add	r3, r2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	b2d8      	uxtb	r0, r3
 80022f0:	490e      	ldr	r1, [pc, #56]	@ (800232c <DISPLAY_sync_with_grid+0x68>)
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	18ca      	adds	r2, r1, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4413      	add	r3, r2
 8002302:	4602      	mov	r2, r0
 8002304:	701a      	strb	r2, [r3, #0]
        for(int y = 0; y < NB_LINE; y++)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3301      	adds	r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002310:	dde2      	ble.n	80022d8 <DISPLAY_sync_with_grid+0x14>
    for(int x = 0; x < NB_COLUMN; x++)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3301      	adds	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b4f      	cmp	r3, #79	@ 0x4f
 800231c:	ddd9      	ble.n	80022d2 <DISPLAY_sync_with_grid+0xe>
        }
    }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	2000022c 	.word	0x2000022c

08002330 <GAMEOFLIFE_init>:
static void GAMEOFLIFE_next_generation(grid_t * grid_prev, grid_t * grid_next);
void GAMEOFLIFE_create_pattern(grid_t * grid, uint16_t x, uint16_t y, pattern_e pattern);

//Public functions
void GAMEOFLIFE_init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
	// Initialisation des éléments importants
	DISPLAY_init();		// initialisation de l'écran
 8002336:	f7ff ff15 	bl	8002164 <DISPLAY_init>
	BUTTONS_init();		// initialisations des boutons utilisés
 800233a:	f7ff fe03 	bl	8001f44 <BUTTONS_init>
	XPT2046_init();		// initialisation de l'écran tactil
 800233e:	f000 ffcb 	bl	80032d8 <XPT2046_init>
	BSP_systick_add_callback_function(GAMEOFLIFE_process_ms); // On appelle la fonction en paramètre à chaque instant
 8002342:	4815      	ldr	r0, [pc, #84]	@ (8002398 <GAMEOFLIFE_init+0x68>)
 8002344:	f002 fa34 	bl	80047b0 <BSP_systick_add_callback_function>
	// Variables nécessaires pour la création d'un pattern (cf méthode GAMEOFLIFE_create_pattern)

	grid_t *p = &grid0;
 8002348:	4b14      	ldr	r3, [pc, #80]	@ (800239c <GAMEOFLIFE_init+0x6c>)
 800234a:	607b      	str	r3, [r7, #4]

	// On cherche à initialiser la grille des cellules avec, au début, uniquement des cellules mortes

	cell_e basis_cell = CELL_DEAD;
 800234c:	2300      	movs	r3, #0
 800234e:	70fb      	strb	r3, [r7, #3]

	// On utilise le principe de buffering en remplissant une première grille d'affichage

	for(int x = 0; x < NB_COLUMN; x++){
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e016      	b.n	8002384 <GAMEOFLIFE_init+0x54>

		for(int y =0; y < NB_LINE; y++){
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	e00d      	b.n	8002378 <GAMEOFLIFE_init+0x48>

			grid0.cells[x][y] = basis_cell;
 800235c:	490f      	ldr	r1, [pc, #60]	@ (800239c <GAMEOFLIFE_init+0x6c>)
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	18ca      	adds	r2, r1, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4413      	add	r3, r2
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	701a      	strb	r2, [r3, #0]
		for(int y =0; y < NB_LINE; y++){
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3301      	adds	r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b3b      	cmp	r3, #59	@ 0x3b
 800237c:	ddee      	ble.n	800235c <GAMEOFLIFE_init+0x2c>
	for(int x = 0; x < NB_COLUMN; x++){
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3301      	adds	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b4f      	cmp	r3, #79	@ 0x4f
 8002388:	dde5      	ble.n	8002356 <GAMEOFLIFE_init+0x26>
//	GAMEOFLIFE_create_pattern(p, 5, 10, PATTERN_MIDDLE_WEIGHT_SPACESHIP);
//	GAMEOFLIFE_create_pattern(p, 5, 20, PATTERN_HEAVY_WEIGHT_SPACESHIP);

	// Affichage en fournissant l'adresse de grid0

	DISPLAY_refresh(p);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ff1e 	bl	80021cc <DISPLAY_refresh>
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	080024bd 	.word	0x080024bd
 800239c:	200014f0 	.word	0x200014f0

080023a0 <GAMEOFLIFE_process_main>:

void GAMEOFLIFE_process_main(void)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af02      	add	r7, sp, #8
	static bool toggle = false;
	grid_t *grid_prev;
	grid_t *grid_next;

	button_e left, right, up, down, center;
	BUTTONS_update(&left, &right, &up, &down, &center);
 80023a6:	1d3c      	adds	r4, r7, #4
 80023a8:	1d7a      	adds	r2, r7, #5
 80023aa:	1db9      	adds	r1, r7, #6
 80023ac:	1df8      	adds	r0, r7, #7
 80023ae:	1cfb      	adds	r3, r7, #3
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4623      	mov	r3, r4
 80023b4:	f7ff fe1e 	bl	8001ff4 <BUTTONS_update>


	// Pour le menu

	if(center == BUTTON_PRESS_EVENT && !in_menu && cooldown_after_menu == 0)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d119      	bne.n	80023f2 <GAMEOFLIFE_process_main+0x52>
 80023be:	4b36      	ldr	r3, [pc, #216]	@ (8002498 <GAMEOFLIFE_process_main+0xf8>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	f083 0301 	eor.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d012      	beq.n	80023f2 <GAMEOFLIFE_process_main+0x52>
 80023cc:	4b33      	ldr	r3, [pc, #204]	@ (800249c <GAMEOFLIFE_process_main+0xfc>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <GAMEOFLIFE_process_main+0x52>
	{
	    action = ACTION_OPEN_MENU;
 80023d4:	4b32      	ldr	r3, [pc, #200]	@ (80024a0 <GAMEOFLIFE_process_main+0x100>)
 80023d6:	2204      	movs	r2, #4
 80023d8:	701a      	strb	r2, [r3, #0]
	    action_to_do(action);
 80023da:	4b31      	ldr	r3, [pc, #196]	@ (80024a0 <GAMEOFLIFE_process_main+0x100>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fd85 	bl	8001ef0 <action_to_do>
	    action = ACTION_NONE;
 80023e6:	4b2e      	ldr	r3, [pc, #184]	@ (80024a0 <GAMEOFLIFE_process_main+0x100>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
	    just_entered_menu = true;
 80023ec:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <GAMEOFLIFE_process_main+0x104>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
	}
	if(in_menu)
 80023f2:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <GAMEOFLIFE_process_main+0xf8>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01b      	beq.n	8002432 <GAMEOFLIFE_process_main+0x92>
	{
	    if(just_entered_menu){
 80023fa:	4b2a      	ldr	r3, [pc, #168]	@ (80024a4 <GAMEOFLIFE_process_main+0x104>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <GAMEOFLIFE_process_main+0x6a>
	        just_entered_menu = false;
 8002402:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <GAMEOFLIFE_process_main+0x104>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e00f      	b.n	800242a <GAMEOFLIFE_process_main+0x8a>
	    } else {

	        MENU_handle_input(down, center);
 800240a:	793b      	ldrb	r3, [r7, #4]
 800240c:	461a      	mov	r2, r3
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f000 fa0a 	bl	800282c <MENU_handle_input>
	        action_to_do(action);
 8002418:	4b21      	ldr	r3, [pc, #132]	@ (80024a0 <GAMEOFLIFE_process_main+0x100>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fd66 	bl	8001ef0 <action_to_do>
	        action = ACTION_NONE;
 8002424:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <GAMEOFLIFE_process_main+0x100>)
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
	    }
	    if(in_menu){
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <GAMEOFLIFE_process_main+0xf8>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d12e      	bne.n	8002490 <GAMEOFLIFE_process_main+0xf0>
	    	return;
	    }
	}

	GAMEOFLIFE_touchscreen();  // L'écran tactile
 8002432:	f000 f917 	bl	8002664 <GAMEOFLIFE_touchscreen>

	// Cadensement des générations
	if(!is_paused && flag_generation){
 8002436:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <GAMEOFLIFE_process_main+0x108>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f083 0301 	eor.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d026      	beq.n	8002492 <GAMEOFLIFE_process_main+0xf2>
 8002444:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <GAMEOFLIFE_process_main+0x10c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d021      	beq.n	8002492 <GAMEOFLIFE_process_main+0xf2>
		if(!toggle){
 800244e:	4b18      	ldr	r3, [pc, #96]	@ (80024b0 <GAMEOFLIFE_process_main+0x110>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	f083 0301 	eor.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <GAMEOFLIFE_process_main+0xcc>
			grid_prev = &grid0;
 800245c:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <GAMEOFLIFE_process_main+0x114>)
 800245e:	60fb      	str	r3, [r7, #12]
			grid_next = &grid1;
 8002460:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <GAMEOFLIFE_process_main+0x118>)
 8002462:	60bb      	str	r3, [r7, #8]
			toggle = true;
 8002464:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <GAMEOFLIFE_process_main+0x110>)
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e006      	b.n	800247a <GAMEOFLIFE_process_main+0xda>
		}else{
			grid_prev = &grid1;
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <GAMEOFLIFE_process_main+0x118>)
 800246e:	60fb      	str	r3, [r7, #12]
			grid_next = &grid0;
 8002470:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <GAMEOFLIFE_process_main+0x114>)
 8002472:	60bb      	str	r3, [r7, #8]
			toggle = false;
 8002474:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <GAMEOFLIFE_process_main+0x110>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
		}
		// Appel des fonctions pour la next gen et la rafraîchissement de l'écran

		GAMEOFLIFE_next_generation(grid_prev, grid_next);
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f84d 	bl	800251c <GAMEOFLIFE_next_generation>
		DISPLAY_refresh(grid_next);
 8002482:	68b8      	ldr	r0, [r7, #8]
 8002484:	f7ff fea2 	bl	80021cc <DISPLAY_refresh>

		// On abaisse finalement le flag

		flag_generation = false;
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <GAMEOFLIFE_process_main+0x10c>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	e000      	b.n	8002492 <GAMEOFLIFE_process_main+0xf2>
	    	return;
 8002490:	bf00      	nop
	}
}
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bd90      	pop	{r4, r7, pc}
 8002498:	2000021c 	.word	0x2000021c
 800249c:	20003a73 	.word	0x20003a73
 80024a0:	20003a71 	.word	0x20003a71
 80024a4:	20003a72 	.word	0x20003a72
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20003a70 	.word	0x20003a70
 80024b0:	20003a74 	.word	0x20003a74
 80024b4:	200014f0 	.word	0x200014f0
 80024b8:	200027b0 	.word	0x200027b0

080024bc <GAMEOFLIFE_process_ms>:


//Private functions
static void GAMEOFLIFE_process_ms(void) // Cette fonction ne s'implémente nulle part, elle sert juste
// à lever le flag
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
	static uint8_t t_generation;

//	On l'incrémente avec modulo -- cela sert à pouvoir effectuer une action cyclique

	t_generation = (t_generation + 1) % GENERATION_PERIOD_MS;
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <GAMEOFLIFE_process_ms+0x50>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <GAMEOFLIFE_process_ms+0x54>)
 80024c8:	fb82 1203 	smull	r1, r2, r2, r3
 80024cc:	1151      	asrs	r1, r2, #5
 80024ce:	17da      	asrs	r2, r3, #31
 80024d0:	1a8a      	subs	r2, r1, r2
 80024d2:	2164      	movs	r1, #100	@ 0x64
 80024d4:	fb01 f202 	mul.w	r2, r1, r2
 80024d8:	1a9a      	subs	r2, r3, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <GAMEOFLIFE_process_ms+0x50>)
 80024de:	701a      	strb	r2, [r3, #0]

	if(t_generation == 0)
 80024e0:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <GAMEOFLIFE_process_ms+0x50>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <GAMEOFLIFE_process_ms+0x32>
		flag_generation = true; // On lève le flag pour passer à la génération suivante chaque 100ms
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <GAMEOFLIFE_process_ms+0x58>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]

	if (cooldown_after_menu > 0)
 80024ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <GAMEOFLIFE_process_ms+0x5c>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <GAMEOFLIFE_process_ms+0x46>
	    cooldown_after_menu--;
 80024f6:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <GAMEOFLIFE_process_ms+0x5c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <GAMEOFLIFE_process_ms+0x5c>)
 8002500:	701a      	strb	r2, [r3, #0]

}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	20003a75 	.word	0x20003a75
 8002510:	51eb851f 	.word	0x51eb851f
 8002514:	20003a70 	.word	0x20003a70
 8002518:	20003a73 	.word	0x20003a73

0800251c <GAMEOFLIFE_next_generation>:

/**
 *
 */
static void GAMEOFLIFE_next_generation(grid_t * grid_prev, grid_t * grid_next)
{
 800251c:	b480      	push	{r7}
 800251e:	b08d      	sub	sp, #52	@ 0x34
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	cell_e cell_main;
	cell_e cell_next;

	// On parcours dans un premier temps tout l'écran

	for(int x = 0; x < NB_COLUMN; x++){
 8002526:	2300      	movs	r3, #0
 8002528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800252a:	e090      	b.n	800264e <GAMEOFLIFE_next_generation+0x132>
		for(int y = 0; y < NB_LINE; y++){
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002530:	e086      	b.n	8002640 <GAMEOFLIFE_next_generation+0x124>
			cell_main = grid_prev->cells[x][y]; // On récup la cellule actuelle, puis on analyse les 8
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	18ca      	adds	r2, r1, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	75fb      	strb	r3, [r7, #23]
			cell_next = cell_main;
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			//aux alentours en parcourant le carré
			uint8_t nbre_cell_alive = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			for(int x_count = -1; x_count <= 1; x_count++){
 8002554:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e039      	b.n	80025d0 <GAMEOFLIFE_next_generation+0xb4>
				for(int y_count = -1; y_count <= 1; y_count++){
 800255c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	e02f      	b.n	80025c4 <GAMEOFLIFE_next_generation+0xa8>

					if(x_count == 0 && y_count == 0)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <GAMEOFLIFE_next_generation+0x54>
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d025      	beq.n	80025bc <GAMEOFLIFE_next_generation+0xa0>
						continue;

					// Je récupère ainsi la position de chaque cellue du carré, en ignorant celle du milieu
					int x_neighbor = x + x_count;
 8002570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
					int y_neighbor = y + y_count;
 8002578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4413      	add	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

					// On vérifie qu'on est toujours dans les limites de l'écran, sinon la cellule
					// est ignorée ( la voisine, pas la cellule qu'on analyse)

					if (x_neighbor >= 0 && x_neighbor < NB_COLUMN && y_neighbor >= 0 && y_neighbor < NB_LINE) {
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db1b      	blt.n	80025be <GAMEOFLIFE_next_generation+0xa2>
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b4f      	cmp	r3, #79	@ 0x4f
 800258a:	dc18      	bgt.n	80025be <GAMEOFLIFE_next_generation+0xa2>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db15      	blt.n	80025be <GAMEOFLIFE_next_generation+0xa2>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b3b      	cmp	r3, #59	@ 0x3b
 8002596:	dc12      	bgt.n	80025be <GAMEOFLIFE_next_generation+0xa2>
						if(grid_prev->cells[x_neighbor][y_neighbor] == CELL_ALIVE){
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	18ca      	adds	r2, r1, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <GAMEOFLIFE_next_generation+0xa2>
							nbre_cell_alive++;
 80025b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025b4:	3301      	adds	r3, #1
 80025b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025ba:	e000      	b.n	80025be <GAMEOFLIFE_next_generation+0xa2>
						continue;
 80025bc:	bf00      	nop
				for(int y_count = -1; y_count <= 1; y_count++){
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3301      	adds	r3, #1
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	ddcc      	ble.n	8002564 <GAMEOFLIFE_next_generation+0x48>
			for(int x_count = -1; x_count <= 1; x_count++){
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	ddc2      	ble.n	800255c <GAMEOFLIFE_next_generation+0x40>
					}
				}
			}
			// Après avoir compté le nombre de cellule mortes, on applique les règles du jeu de la vie

			if(cell_main == CELL_ALIVE){
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d11b      	bne.n	8002614 <GAMEOFLIFE_next_generation+0xf8>
				if(nbre_cell_alive < 2){
 80025dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d803      	bhi.n	80025ec <GAMEOFLIFE_next_generation+0xd0>
					cell_next = CELL_DEAD; // Mort par solitude (la pauvre)
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80025ea:	e01a      	b.n	8002622 <GAMEOFLIFE_next_generation+0x106>
				}else if(nbre_cell_alive == 2 || nbre_cell_alive == 3){
 80025ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d003      	beq.n	80025fc <GAMEOFLIFE_next_generation+0xe0>
 80025f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d103      	bne.n	8002604 <GAMEOFLIFE_next_generation+0xe8>
					cell_next = CELL_ALIVE; // vive la fraternitude
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002602:	e00e      	b.n	8002622 <GAMEOFLIFE_next_generation+0x106>
				}else if(nbre_cell_alive > 3){
 8002604:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002608:	2b03      	cmp	r3, #3
 800260a:	d90a      	bls.n	8002622 <GAMEOFLIFE_next_generation+0x106>
					cell_next = CELL_DEAD; // Elle n'aime pas la populace
 800260c:	2300      	movs	r3, #0
 800260e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002612:	e006      	b.n	8002622 <GAMEOFLIFE_next_generation+0x106>
				}
			}else{
				if(nbre_cell_alive == 3){
 8002614:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002618:	2b03      	cmp	r3, #3
 800261a:	d102      	bne.n	8002622 <GAMEOFLIFE_next_generation+0x106>
					cell_next = CELL_ALIVE; // Résurrection par la FAME
 800261c:	2301      	movs	r3, #1
 800261e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				}
			}

			// On actualise maintenant l'état de la cellule dans la grille suivante
			grid_next->cells[x][y] = cell_next;
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	18ca      	adds	r2, r1, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	4413      	add	r3, r2
 8002634:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002638:	701a      	strb	r2, [r3, #0]
		for(int y = 0; y < NB_LINE; y++){
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	3301      	adds	r3, #1
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	2b3b      	cmp	r3, #59	@ 0x3b
 8002644:	f77f af75 	ble.w	8002532 <GAMEOFLIFE_next_generation+0x16>
	for(int x = 0; x < NB_COLUMN; x++){
 8002648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264a:	3301      	adds	r3, #1
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	2b4f      	cmp	r3, #79	@ 0x4f
 8002652:	f77f af6b 	ble.w	800252c <GAMEOFLIFE_next_generation+0x10>
		}
	}



}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	3734      	adds	r7, #52	@ 0x34
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <GAMEOFLIFE_touchscreen>:
 * Les variables last_x et last_y empêche un appui long d'inverser constamment l'état des cellules
 * Pourquoi -1 ? Comme ça, au démarrage ou entre deux appuis, rien ne peut se passer ;)
 */

void GAMEOFLIFE_touchscreen(void)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
//	ILI9341_Rotate(ILI9341_Orientation_Landscape_2);

    static int16_t last_x = -1;
    static int16_t last_y = -1;
    int16_t x, y = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	803b      	strh	r3, [r7, #0]


    if(XPT2046_getMedianCoordinates(&x, &y, XPT2046_COORDINATE_SCREEN_RELATIVE))
 800266e:	4639      	mov	r1, r7
 8002670:	1cbb      	adds	r3, r7, #2
 8002672:	2201      	movs	r2, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f000 ff47 	bl	8003508 <XPT2046_getMedianCoordinates>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d052      	beq.n	8002726 <GAMEOFLIFE_touchscreen+0xc2>
    {
    	// Conversion tactile pour Landscape_2
    	y = SCREEN_HEIGHT - y;
 8002680:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800268a:	b29b      	uxth	r3, r3
 800268c:	b21b      	sxth	r3, r3
 800268e:	803b      	strh	r3, [r7, #0]

        // Éviter de re-toucher la même cellule si on garde le doigt appuyé
        if(x == last_x && y == last_y)
 8002690:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002694:	4b2a      	ldr	r3, [pc, #168]	@ (8002740 <GAMEOFLIFE_touchscreen+0xdc>)
 8002696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269a:	429a      	cmp	r2, r3
 800269c:	d106      	bne.n	80026ac <GAMEOFLIFE_touchscreen+0x48>
 800269e:	f9b7 2000 	ldrsh.w	r2, [r7]
 80026a2:	4b28      	ldr	r3, [pc, #160]	@ (8002744 <GAMEOFLIFE_touchscreen+0xe0>)
 80026a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d045      	beq.n	8002738 <GAMEOFLIFE_touchscreen+0xd4>
            return;

        last_x = x;
 80026ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80026b0:	4b23      	ldr	r3, [pc, #140]	@ (8002740 <GAMEOFLIFE_touchscreen+0xdc>)
 80026b2:	801a      	strh	r2, [r3, #0]
        last_y = y;
 80026b4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80026b8:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <GAMEOFLIFE_touchscreen+0xe0>)
 80026ba:	801a      	strh	r2, [r3, #0]

        // Coordonnées de cellule
        uint16_t cell_x = x / CELL_SIZE; // Pour récupérer correctement les cooordonnées
 80026bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da00      	bge.n	80026c6 <GAMEOFLIFE_touchscreen+0x62>
 80026c4:	3303      	adds	r3, #3
 80026c6:	109b      	asrs	r3, r3, #2
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	80fb      	strh	r3, [r7, #6]
        uint16_t cell_y = y / CELL_SIZE;
 80026cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	da00      	bge.n	80026d6 <GAMEOFLIFE_touchscreen+0x72>
 80026d4:	3303      	adds	r3, #3
 80026d6:	109b      	asrs	r3, r3, #2
 80026d8:	b21b      	sxth	r3, r3
 80026da:	80bb      	strh	r3, [r7, #4]

        if(cell_x < NB_COLUMN && cell_y < NB_LINE)
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	2b4f      	cmp	r3, #79	@ 0x4f
 80026e0:	d82b      	bhi.n	800273a <GAMEOFLIFE_touchscreen+0xd6>
 80026e2:	88bb      	ldrh	r3, [r7, #4]
 80026e4:	2b3b      	cmp	r3, #59	@ 0x3b
 80026e6:	d828      	bhi.n	800273a <GAMEOFLIFE_touchscreen+0xd6>
        {
            // Inverser état de la cellule
            grid0.cells[cell_x][cell_y] = (grid0.cells[cell_x][cell_y] == CELL_ALIVE) ? CELL_DEAD : CELL_ALIVE;
 80026e8:	88fa      	ldrh	r2, [r7, #6]
 80026ea:	88b9      	ldrh	r1, [r7, #4]
 80026ec:	4816      	ldr	r0, [pc, #88]	@ (8002748 <GAMEOFLIFE_touchscreen+0xe4>)
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4403      	add	r3, r0
 80026f8:	440b      	add	r3, r1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	88fa      	ldrh	r2, [r7, #6]
 8002708:	88b9      	ldrh	r1, [r7, #4]
 800270a:	461c      	mov	r4, r3
 800270c:	480e      	ldr	r0, [pc, #56]	@ (8002748 <GAMEOFLIFE_touchscreen+0xe4>)
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4403      	add	r3, r0
 8002718:	440b      	add	r3, r1
 800271a:	4622      	mov	r2, r4
 800271c:	701a      	strb	r2, [r3, #0]
            //ILI9341_DrawCircle(x, y, 3, ILI9341_COLOR_RED);		// Pour détecter l'endroit précis où j'appuie

            DISPLAY_refresh(&grid0);
 800271e:	480a      	ldr	r0, [pc, #40]	@ (8002748 <GAMEOFLIFE_touchscreen+0xe4>)
 8002720:	f7ff fd54 	bl	80021cc <DISPLAY_refresh>
 8002724:	e009      	b.n	800273a <GAMEOFLIFE_touchscreen+0xd6>
        }
    }
    else
    {
        last_x = -1;
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <GAMEOFLIFE_touchscreen+0xdc>)
 8002728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800272c:	801a      	strh	r2, [r3, #0]
        last_y = -1;
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <GAMEOFLIFE_touchscreen+0xe0>)
 8002730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	e000      	b.n	800273a <GAMEOFLIFE_touchscreen+0xd6>
            return;
 8002738:	bf00      	nop
    }
}
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	20000002 	.word	0x20000002
 8002744:	20000004 	.word	0x20000004
 8002748:	200014f0 	.word	0x200014f0

0800274c <main>:
#include "stm32g4_systick.h"
#include "TFT_ili9341/stm32g4_ili9341.h"  // ou le bon chemin


int main(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af02      	add	r7, sp, #8
	//Initialisation de la couche logicielle HAL (Hardware Abstraction Layer)
	//Cette ligne doit rester la première étape de la fonction main().
	HAL_Init();
 8002752:	f002 fc4b 	bl	8004fec <HAL_Init>

	//Initialisation de l'UART2 à la vitesse de 115200 bauds/secondes (92kbits/s) PA2 : Tx  | PA3 : Rx.
		//Attention, les pins PA2 et PA3 ne sont pas reliées jusqu'au connecteur de la Nucleo.
		//Ces broches sont redirigées vers la sonde de débogage, la liaison UART étant ensuite encapsul�e sur l'USB vers le PC de développement.
	BSP_UART_init(UART2_ID,115200);
 8002756:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800275a:	2001      	movs	r0, #1
 800275c:	f002 fa12 	bl	8004b84 <BSP_UART_init>

	//"Indique que les printf sortent vers le périphérique UART2."
	BSP_SYS_set_std_usart(UART2_ID, UART2_ID, UART2_ID);
 8002760:	2201      	movs	r2, #1
 8002762:	2101      	movs	r1, #1
 8002764:	2001      	movs	r0, #1
 8002766:	f001 fedf 	bl	8004528 <BSP_SYS_set_std_usart>

	//Initialisation du port de la led Verte
	BSP_GPIO_pin_config(LED_GREEN_GPIO, LED_GREEN_PIN, GPIO_MODE_OUTPUT_PP,GPIO_NOPULL,GPIO_SPEED_FREQ_HIGH, GPIO_MODE_OUTPUT_PP);
 800276a:	2301      	movs	r3, #1
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	2302      	movs	r3, #2
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2300      	movs	r3, #0
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800277a:	4804      	ldr	r0, [pc, #16]	@ (800278c <main+0x40>)
 800277c:	f001 f91c 	bl	80039b8 <BSP_GPIO_pin_config>

	//Initialisation de notre application

	GAMEOFLIFE_init();
 8002780:	f7ff fdd6 	bl	8002330 <GAMEOFLIFE_init>


	while(1)	//Boucle de tâche de fond
	{
		GAMEOFLIFE_process_main();
 8002784:	f7ff fe0c 	bl	80023a0 <GAMEOFLIFE_process_main>
 8002788:	e7fc      	b.n	8002784 <main+0x38>
 800278a:	bf00      	nop
 800278c:	48000400 	.word	0x48000400

08002790 <MENU_open>:
 * @brief: Fonction pour afficher le menu à l'écran
 * On affiche à l'écran tous les menus accessibles
 */

void MENU_open(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	in_menu = true;
 8002794:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <MENU_open+0x18>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
	selected_menu = MENU_PLAY_PAUSE;  // reset
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <MENU_open+0x1c>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
	MENU_display();
 80027a0:	f000 f806 	bl	80027b0 <MENU_display>
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	2000021c 	.word	0x2000021c
 80027ac:	20003a76 	.word	0x20003a76

080027b0 <MENU_display>:

void MENU_display(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af02      	add	r7, sp, #8
	ILI9341_Fill(ILI9341_COLOR_WHITE);
 80027b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80027ba:	f000 fb69 	bl	8002e90 <ILI9341_Fill>
	for(int i = 0; i < MENU_NB; i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	e024      	b.n	800280e <MENU_display+0x5e>
	{
		uint16_t y = 40 + i * 30;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3328      	adds	r3, #40	@ 0x28
 80027d4:	807b      	strh	r3, [r7, #2]
		uint16_t color = (i == selected_menu) ? ILI9341_COLOR_PINK : ILI9341_COLOR_BLACK;
 80027d6:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <MENU_display+0x70>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4293      	cmp	r3, r2
 80027e0:	d102      	bne.n	80027e8 <MENU_display+0x38>
 80027e2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80027e6:	e000      	b.n	80027ea <MENU_display+0x3a>
 80027e8:	2300      	movs	r3, #0
 80027ea:	803b      	strh	r3, [r7, #0]
		ILI9341_Puts(60, y, menu_labels[i], &Font_11x18, color, ILI9341_COLOR_WHITE);
 80027ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <MENU_display+0x74>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027f4:	8879      	ldrh	r1, [r7, #2]
 80027f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	883b      	ldrh	r3, [r7, #0]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <MENU_display+0x78>)
 8002802:	203c      	movs	r0, #60	@ 0x3c
 8002804:	f000 fbfe 	bl	8003004 <ILI9341_Puts>
	for(int i = 0; i < MENU_NB; i++)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3301      	adds	r3, #1
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b03      	cmp	r3, #3
 8002812:	ddd7      	ble.n	80027c4 <MENU_display+0x14>
	}
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20003a76 	.word	0x20003a76
 8002824:	20000008 	.word	0x20000008
 8002828:	2000001c 	.word	0x2000001c

0800282c <MENU_handle_input>:
 * @param right: événement du bouton haut (BUTTON_PRESS_EVENT, etc.)
 * @param left: événement du bouton bas
 * @param center: événement du bouton central (validation)
 */
void MENU_handle_input(button_e nav, button_e validate)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	460a      	mov	r2, r1
 8002836:	71fb      	strb	r3, [r7, #7]
 8002838:	4613      	mov	r3, r2
 800283a:	71bb      	strb	r3, [r7, #6]
    bool changed = false; // Indique si un changement a eu lieu (navigation ou validation) pour rafraîchir l'écran
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]

    if(nav == BUTTON_PRESS_EVENT)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10e      	bne.n	8002864 <MENU_handle_input+0x38>
    {
        selected_menu = (selected_menu + 1) % MENU_NB;
 8002846:	4b1c      	ldr	r3, [pc, #112]	@ (80028b8 <MENU_handle_input+0x8c>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	3301      	adds	r3, #1
 800284c:	425a      	negs	r2, r3
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	f002 0203 	and.w	r2, r2, #3
 8002856:	bf58      	it	pl
 8002858:	4253      	negpl	r3, r2
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <MENU_handle_input+0x8c>)
 800285e:	701a      	strb	r2, [r3, #0]
        changed = true;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
    }

    if(validate == BUTTON_PRESS_EVENT)
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d119      	bne.n	800289e <MENU_handle_input+0x72>
    {
        switch(selected_menu)
 800286a:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <MENU_handle_input+0x8c>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d00e      	beq.n	8002890 <MENU_handle_input+0x64>
 8002872:	2b02      	cmp	r3, #2
 8002874:	dc10      	bgt.n	8002898 <MENU_handle_input+0x6c>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <MENU_handle_input+0x54>
 800287a:	2b01      	cmp	r3, #1
 800287c:	d004      	beq.n	8002888 <MENU_handle_input+0x5c>
                action = ACTION_CLEAR_GRID;
                break;
            case MENU_OPEN_SETTINGS:
                action = ACTION_OPEN_SETTINGS;
                break;
            default: break;
 800287e:	e00b      	b.n	8002898 <MENU_handle_input+0x6c>
                action = ACTION_PLAY_PAUSE;
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <MENU_handle_input+0x90>)
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
                break;
 8002886:	e008      	b.n	800289a <MENU_handle_input+0x6e>
                action = ACTION_CLEAR_GRID;
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <MENU_handle_input+0x90>)
 800288a:	2202      	movs	r2, #2
 800288c:	701a      	strb	r2, [r3, #0]
                break;
 800288e:	e004      	b.n	800289a <MENU_handle_input+0x6e>
                action = ACTION_OPEN_SETTINGS;
 8002890:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <MENU_handle_input+0x90>)
 8002892:	2205      	movs	r2, #5
 8002894:	701a      	strb	r2, [r3, #0]
                break;
 8002896:	e000      	b.n	800289a <MENU_handle_input+0x6e>
            default: break;
 8002898:	bf00      	nop
        }
        changed = true;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
    }

    if(changed && in_menu)
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <MENU_handle_input+0x84>
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <MENU_handle_input+0x94>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MENU_handle_input+0x84>
        MENU_display();  // Rafraîchit l'affichage uniquement si nécessaire
 80028ac:	f7ff ff80 	bl	80027b0 <MENU_display>
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20003a76 	.word	0x20003a76
 80028bc:	20003a71 	.word	0x20003a71
 80028c0:	2000021c 	.word	0x2000021c

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <NMI_Handler+0x4>

080028cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <HardFault_Handler+0x4>

080028d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <MemManage_Handler+0x4>

080028dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0


}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0


}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0


}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_getpid>:
__attribute__((weak)) void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  return 1;
 800291a:	2301      	movs	r3, #1
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_kill>:

int _kill(int pid, int sig)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002930:	f007 fe06 	bl	800a540 <__errno>
 8002934:	4603      	mov	r3, r0
 8002936:	2216      	movs	r2, #22
 8002938:	601a      	str	r2, [r3, #0]
  return -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_exit>:

void _exit (int status)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800294e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffe7 	bl	8002926 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <_exit+0x12>

0800295c <_fstat>:
  return -1;
}


__attribute__((weak))  int _fstat(int file, struct stat *st)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800296c:	605a      	str	r2, [r3, #4]
  return 0;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002984:	4a14      	ldr	r2, [pc, #80]	@ (80029d8 <_sbrk+0x5c>)
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <_sbrk+0x60>)
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002990:	4b13      	ldr	r3, [pc, #76]	@ (80029e0 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <_sbrk+0x64>)
 800299a:	4a12      	ldr	r2, [pc, #72]	@ (80029e4 <_sbrk+0x68>)
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299e:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <_sbrk+0x64>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d207      	bcs.n	80029bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029ac:	f007 fdc8 	bl	800a540 <__errno>
 80029b0:	4603      	mov	r3, r0
 80029b2:	220c      	movs	r2, #12
 80029b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029ba:	e009      	b.n	80029d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029bc:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <_sbrk+0x64>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029c2:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <_sbrk+0x64>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <_sbrk+0x64>)
 80029cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20008000 	.word	0x20008000
 80029dc:	00000400 	.word	0x00000400
 80029e0:	20003a78 	.word	0x20003a78
 80029e4:	200041f8 	.word	0x200041f8

080029e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029ec:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <SystemInit+0x20>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f2:	4a05      	ldr	r2, [pc, #20]	@ (8002a08 <SystemInit+0x20>)
 80029f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <ILI9341_Init>:
 *         de l'afficheur ILI9341, initialise le périphérique SPI utilisé pour
 *         communiquer avec l'afficheur et règle l'orientation par défaut de
 *         l'écran LCD. Elle remplit également l'écran avec une couleur blanche.
 */
void ILI9341_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af02      	add	r7, sp, #8
	/* Init WRX pin */
	BSP_GPIO_pin_config(ILI9341_WRX_PORT, ILI9341_WRX_PIN, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_MEDIUM, GPIO_NO_AF);
 8002a12:	2300      	movs	r3, #0
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2301      	movs	r3, #1
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a26:	f000 ffc7 	bl	80039b8 <BSP_GPIO_pin_config>
	
	/* Init CS pin */
	BSP_GPIO_pin_config(ILI9341_CS_PORT,ILI9341_CS_PIN, GPIO_MODE_OUTPUT_PP,GPIO_NOPULL,GPIO_SPEED_FREQ_MEDIUM, GPIO_NO_AF);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2300      	movs	r3, #0
 8002a34:	2201      	movs	r2, #1
 8002a36:	2110      	movs	r1, #16
 8002a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a3c:	f000 ffbc 	bl	80039b8 <BSP_GPIO_pin_config>
	
	#ifdef PIN_CS_TOUCH    /* Init CS Touchpad pin */
		BSP_GPIO_pin_config(PIN_CS_TOUCH, GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_MEDIUM, GPIO_NO_AF);
 8002a40:	2300      	movs	r3, #0
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	2301      	movs	r3, #1
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a54:	f000 ffb0 	bl	80039b8 <BSP_GPIO_pin_config>
	#endif

	/* Init RST pin */
	BSP_GPIO_pin_config(ILI9341_RST_PORT,ILI9341_RST_PIN, GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_LOW, GPIO_NO_AF);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2301      	movs	r3, #1
 8002a62:	2201      	movs	r2, #1
 8002a64:	2108      	movs	r1, #8
 8002a66:	4811      	ldr	r0, [pc, #68]	@ (8002aac <ILI9341_Init+0xa0>)
 8002a68:	f000 ffa6 	bl	80039b8 <BSP_GPIO_pin_config>


	/* CS high */
	ILI9341_CS_SET();
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	2110      	movs	r1, #16
 8002a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a74:	f002 feb6 	bl	80057e4 <HAL_GPIO_WritePin>
	
	/* Init SPI */
	BSP_SPI_Init(ILI9341_SPI, FULL_DUPLEX, MASTER, SPI_BAUDRATEPRESCALER_16);
 8002a78:	2318      	movs	r3, #24
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <ILI9341_Init+0xa4>)
 8002a80:	f000 ffc8 	bl	8003a14 <BSP_SPI_Init>
	
	/* Init DMA for SPI */
	//SPI_DMA_Init(ILI9341_SPI);
	
	/* Init LCD */
	ILI9341_InitLCD();
 8002a84:	f000 f81a 	bl	8002abc <ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 8002a88:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <ILI9341_Init+0xa8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	801a      	strh	r2, [r3, #0]
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <ILI9341_Init+0xa8>)
 8002a90:	881a      	ldrh	r2, [r3, #0]
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <ILI9341_Init+0xac>)
 8002a94:	801a      	strh	r2, [r3, #0]
	ILI9341_Rotate(ILI9341_Orientation_Landscape_1);	//Fonction pour modifier l'orientation de l'écran
 8002a96:	2002      	movs	r0, #2
 8002a98:	f000 fa72 	bl	8002f80 <ILI9341_Rotate>
	
	/* Fill with white color */
	ILI9341_Fill(ILI9341_COLOR_WHITE);
 8002a9c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002aa0:	f000 f9f6 	bl	8002e90 <ILI9341_Fill>
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	48000400 	.word	0x48000400
 8002ab0:	40013000 	.word	0x40013000
 8002ab4:	20003a7e 	.word	0x20003a7e
 8002ab8:	20003a7c 	.word	0x20003a7c

08002abc <ILI9341_InitLCD>:
}

/**
 * @brief  Initialise le LCD ILI9341
 */
void ILI9341_InitLCD(void) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET();
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2108      	movs	r1, #8
 8002ac4:	4897      	ldr	r0, [pc, #604]	@ (8002d24 <ILI9341_InitLCD+0x268>)
 8002ac6:	f002 fe8d 	bl	80057e4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002aca:	2014      	movs	r0, #20
 8002acc:	f002 fafe 	bl	80050cc <HAL_Delay>
	ILI9341_RST_SET();
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2108      	movs	r1, #8
 8002ad4:	4893      	ldr	r0, [pc, #588]	@ (8002d24 <ILI9341_InitLCD+0x268>)
 8002ad6:	f002 fe85 	bl	80057e4 <HAL_GPIO_WritePin>
	
	/* Delay for RST response */
	HAL_Delay(20);
 8002ada:	2014      	movs	r0, #20
 8002adc:	f002 faf6 	bl	80050cc <HAL_Delay>
	
	/* Software reset */
	ILI9341_SendCommand(ILI9341_RESET);
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f000 f921 	bl	8002d28 <ILI9341_SendCommand>
	HAL_Delay(50);
 8002ae6:	2032      	movs	r0, #50	@ 0x32
 8002ae8:	f002 faf0 	bl	80050cc <HAL_Delay>
	
	// Power control A
	ILI9341_SendCommand(ILI9341_POWERA);
 8002aec:	20cb      	movs	r0, #203	@ 0xcb
 8002aee:	f000 f91b 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x39);
 8002af2:	2039      	movs	r0, #57	@ 0x39
 8002af4:	f000 f93c 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x2C);
 8002af8:	202c      	movs	r0, #44	@ 0x2c
 8002afa:	f000 f939 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f000 f936 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x34);
 8002b04:	2034      	movs	r0, #52	@ 0x34
 8002b06:	f000 f933 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x02);
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f000 f930 	bl	8002d70 <ILI9341_SendData>

	// Power control B
	ILI9341_SendCommand(ILI9341_POWERB);
 8002b10:	20cf      	movs	r0, #207	@ 0xcf
 8002b12:	f000 f909 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x00);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f000 f92a 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0xC1);
 8002b1c:	20c1      	movs	r0, #193	@ 0xc1
 8002b1e:	f000 f927 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x30);
 8002b22:	2030      	movs	r0, #48	@ 0x30
 8002b24:	f000 f924 	bl	8002d70 <ILI9341_SendData>

	// Driver timing control A
	ILI9341_SendCommand(ILI9341_DTCA);
 8002b28:	20e8      	movs	r0, #232	@ 0xe8
 8002b2a:	f000 f8fd 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x85);
 8002b2e:	2085      	movs	r0, #133	@ 0x85
 8002b30:	f000 f91e 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f000 f91b 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x78);
 8002b3a:	2078      	movs	r0, #120	@ 0x78
 8002b3c:	f000 f918 	bl	8002d70 <ILI9341_SendData>

	// Driver timing control B
	ILI9341_SendCommand(ILI9341_DTCB);
 8002b40:	20ea      	movs	r0, #234	@ 0xea
 8002b42:	f000 f8f1 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f000 f912 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f000 f90f 	bl	8002d70 <ILI9341_SendData>

	// Power on sequence control
	ILI9341_SendCommand(ILI9341_POWER_SEQ);
 8002b52:	20ed      	movs	r0, #237	@ 0xed
 8002b54:	f000 f8e8 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x64);
 8002b58:	2064      	movs	r0, #100	@ 0x64
 8002b5a:	f000 f909 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x03);
 8002b5e:	2003      	movs	r0, #3
 8002b60:	f000 f906 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x12);
 8002b64:	2012      	movs	r0, #18
 8002b66:	f000 f903 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x81);
 8002b6a:	2081      	movs	r0, #129	@ 0x81
 8002b6c:	f000 f900 	bl	8002d70 <ILI9341_SendData>

	// Pump ratio control
	ILI9341_SendCommand(ILI9341_PRC);
 8002b70:	20f7      	movs	r0, #247	@ 0xf7
 8002b72:	f000 f8d9 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x20);
 8002b76:	2020      	movs	r0, #32
 8002b78:	f000 f8fa 	bl	8002d70 <ILI9341_SendData>

	// Power control 1
	ILI9341_SendCommand(ILI9341_POWER1);
 8002b7c:	20c0      	movs	r0, #192	@ 0xc0
 8002b7e:	f000 f8d3 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x23);
 8002b82:	2023      	movs	r0, #35	@ 0x23
 8002b84:	f000 f8f4 	bl	8002d70 <ILI9341_SendData>

	// Power control 2
	ILI9341_SendCommand(ILI9341_POWER2);
 8002b88:	20c1      	movs	r0, #193	@ 0xc1
 8002b8a:	f000 f8cd 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x10);
 8002b8e:	2010      	movs	r0, #16
 8002b90:	f000 f8ee 	bl	8002d70 <ILI9341_SendData>

	// VCOM control 1
	ILI9341_SendCommand(ILI9341_VCOM1);
 8002b94:	20c5      	movs	r0, #197	@ 0xc5
 8002b96:	f000 f8c7 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x3E);
 8002b9a:	203e      	movs	r0, #62	@ 0x3e
 8002b9c:	f000 f8e8 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x28);
 8002ba0:	2028      	movs	r0, #40	@ 0x28
 8002ba2:	f000 f8e5 	bl	8002d70 <ILI9341_SendData>

	// VCOM control 2
	ILI9341_SendCommand(ILI9341_VCOM2);
 8002ba6:	20c7      	movs	r0, #199	@ 0xc7
 8002ba8:	f000 f8be 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x86);
 8002bac:	2086      	movs	r0, #134	@ 0x86
 8002bae:	f000 f8df 	bl	8002d70 <ILI9341_SendData>

	// Memory access control
	ILI9341_SendCommand(ILI9341_MAC);
 8002bb2:	2036      	movs	r0, #54	@ 0x36
 8002bb4:	f000 f8b8 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x48);
 8002bb8:	2048      	movs	r0, #72	@ 0x48
 8002bba:	f000 f8d9 	bl	8002d70 <ILI9341_SendData>

	// Pixel format set
	ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 8002bbe:	203a      	movs	r0, #58	@ 0x3a
 8002bc0:	f000 f8b2 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x55);
 8002bc4:	2055      	movs	r0, #85	@ 0x55
 8002bc6:	f000 f8d3 	bl	8002d70 <ILI9341_SendData>

	// Frame rate control
	ILI9341_SendCommand(ILI9341_FRC);
 8002bca:	20b1      	movs	r0, #177	@ 0xb1
 8002bcc:	f000 f8ac 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f000 f8cd 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x18);
 8002bd6:	2018      	movs	r0, #24
 8002bd8:	f000 f8ca 	bl	8002d70 <ILI9341_SendData>

	// Display function control
	ILI9341_SendCommand(ILI9341_DFC);
 8002bdc:	20b6      	movs	r0, #182	@ 0xb6
 8002bde:	f000 f8a3 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x08);
 8002be2:	2008      	movs	r0, #8
 8002be4:	f000 f8c4 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x82);
 8002be8:	2082      	movs	r0, #130	@ 0x82
 8002bea:	f000 f8c1 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x27);
 8002bee:	2027      	movs	r0, #39	@ 0x27
 8002bf0:	f000 f8be 	bl	8002d70 <ILI9341_SendData>

	// 3Gamma function disable
	ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 8002bf4:	20f2      	movs	r0, #242	@ 0xf2
 8002bf6:	f000 f897 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f000 f8b8 	bl	8002d70 <ILI9341_SendData>


	ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8002c00:	202a      	movs	r0, #42	@ 0x2a
 8002c02:	f000 f891 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f000 f8b2 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f000 f8af 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f000 f8ac 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0xEF);
 8002c18:	20ef      	movs	r0, #239	@ 0xef
 8002c1a:	f000 f8a9 	bl	8002d70 <ILI9341_SendData>

	ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8002c1e:	202b      	movs	r0, #43	@ 0x2b
 8002c20:	f000 f882 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f000 f8a3 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x00);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f000 f8a0 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x01);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f000 f89d 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x3F);
 8002c36:	203f      	movs	r0, #63	@ 0x3f
 8002c38:	f000 f89a 	bl	8002d70 <ILI9341_SendData>

	// Gamma curve selected
	ILI9341_SendCommand(ILI9341_GAMMA);
 8002c3c:	2026      	movs	r0, #38	@ 0x26
 8002c3e:	f000 f873 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x01);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f000 f894 	bl	8002d70 <ILI9341_SendData>

	// Set positive gamma
	ILI9341_SendCommand(ILI9341_PGAMMA);
 8002c48:	20e0      	movs	r0, #224	@ 0xe0
 8002c4a:	f000 f86d 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x0F);
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f000 f88e 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x31);
 8002c54:	2031      	movs	r0, #49	@ 0x31
 8002c56:	f000 f88b 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x2B);
 8002c5a:	202b      	movs	r0, #43	@ 0x2b
 8002c5c:	f000 f888 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x0C);
 8002c60:	200c      	movs	r0, #12
 8002c62:	f000 f885 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x0E);
 8002c66:	200e      	movs	r0, #14
 8002c68:	f000 f882 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x08);
 8002c6c:	2008      	movs	r0, #8
 8002c6e:	f000 f87f 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x4E);
 8002c72:	204e      	movs	r0, #78	@ 0x4e
 8002c74:	f000 f87c 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0xF1);
 8002c78:	20f1      	movs	r0, #241	@ 0xf1
 8002c7a:	f000 f879 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x37);
 8002c7e:	2037      	movs	r0, #55	@ 0x37
 8002c80:	f000 f876 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x07);
 8002c84:	2007      	movs	r0, #7
 8002c86:	f000 f873 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x10);
 8002c8a:	2010      	movs	r0, #16
 8002c8c:	f000 f870 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x03);
 8002c90:	2003      	movs	r0, #3
 8002c92:	f000 f86d 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x0E);
 8002c96:	200e      	movs	r0, #14
 8002c98:	f000 f86a 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x09);
 8002c9c:	2009      	movs	r0, #9
 8002c9e:	f000 f867 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x00);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f000 f864 	bl	8002d70 <ILI9341_SendData>

	// Set negative gama
	ILI9341_SendCommand(ILI9341_NGAMMA);
 8002ca8:	20e1      	movs	r0, #225	@ 0xe1
 8002caa:	f000 f83d 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f000 f85e 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x0E);
 8002cb4:	200e      	movs	r0, #14
 8002cb6:	f000 f85b 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x14);
 8002cba:	2014      	movs	r0, #20
 8002cbc:	f000 f858 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x03);
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f000 f855 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x11);
 8002cc6:	2011      	movs	r0, #17
 8002cc8:	f000 f852 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x07);
 8002ccc:	2007      	movs	r0, #7
 8002cce:	f000 f84f 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x31);
 8002cd2:	2031      	movs	r0, #49	@ 0x31
 8002cd4:	f000 f84c 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0xC1);
 8002cd8:	20c1      	movs	r0, #193	@ 0xc1
 8002cda:	f000 f849 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x48);
 8002cde:	2048      	movs	r0, #72	@ 0x48
 8002ce0:	f000 f846 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x08);
 8002ce4:	2008      	movs	r0, #8
 8002ce6:	f000 f843 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x0F);
 8002cea:	200f      	movs	r0, #15
 8002cec:	f000 f840 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x0C);
 8002cf0:	200c      	movs	r0, #12
 8002cf2:	f000 f83d 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x31);
 8002cf6:	2031      	movs	r0, #49	@ 0x31
 8002cf8:	f000 f83a 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x36);
 8002cfc:	2036      	movs	r0, #54	@ 0x36
 8002cfe:	f000 f837 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(0x0F);
 8002d02:	200f      	movs	r0, #15
 8002d04:	f000 f834 	bl	8002d70 <ILI9341_SendData>

	ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 8002d08:	2011      	movs	r0, #17
 8002d0a:	f000 f80d 	bl	8002d28 <ILI9341_SendCommand>

	HAL_Delay(10);
 8002d0e:	200a      	movs	r0, #10
 8002d10:	f002 f9dc 	bl	80050cc <HAL_Delay>

	ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 8002d14:	2029      	movs	r0, #41	@ 0x29
 8002d16:	f000 f807 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendCommand(ILI9341_GRAM);
 8002d1a:	202c      	movs	r0, #44	@ 0x2c
 8002d1c:	f000 f804 	bl	8002d28 <ILI9341_SendCommand>
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	48000400 	.word	0x48000400

08002d28 <ILI9341_SendCommand>:
}

/**
 * @brief  Envoie la commande souhaitée sur le bus SPI
 */
void ILI9341_SendCommand(uint8_t data) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET();
 8002d32:	2200      	movs	r2, #0
 8002d34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d3c:	f002 fd52 	bl	80057e4 <HAL_GPIO_WritePin>
	ILI9341_CS_RESET();
 8002d40:	2200      	movs	r2, #0
 8002d42:	2110      	movs	r1, #16
 8002d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d48:	f002 fd4c 	bl	80057e4 <HAL_GPIO_WritePin>
	BSP_SPI_WriteNoRegister(ILI9341_SPI,data);
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4806      	ldr	r0, [pc, #24]	@ (8002d6c <ILI9341_SendCommand+0x44>)
 8002d52:	f001 fa73 	bl	800423c <BSP_SPI_WriteNoRegister>
	ILI9341_CS_SET();
 8002d56:	2201      	movs	r2, #1
 8002d58:	2110      	movs	r1, #16
 8002d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d5e:	f002 fd41 	bl	80057e4 <HAL_GPIO_WritePin>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40013000 	.word	0x40013000

08002d70 <ILI9341_SendData>:

/**
 * @brief  Envoie la donnée désirée sur le bus SPI
 */
void ILI9341_SendData(uint8_t data) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
	//TODO Isnt that redundant
	ILI9341_WRX_SET();
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d84:	f002 fd2e 	bl	80057e4 <HAL_GPIO_WritePin>
	ILI9341_CS_RESET();
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2110      	movs	r1, #16
 8002d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d90:	f002 fd28 	bl	80057e4 <HAL_GPIO_WritePin>
	BSP_SPI_WriteNoRegister(ILI9341_SPI, data);
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4806      	ldr	r0, [pc, #24]	@ (8002db4 <ILI9341_SendData+0x44>)
 8002d9a:	f001 fa4f 	bl	800423c <BSP_SPI_WriteNoRegister>
	ILI9341_CS_SET();
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2110      	movs	r1, #16
 8002da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002da6:	f002 fd1d 	bl	80057e4 <HAL_GPIO_WritePin>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40013000 	.word	0x40013000

08002db8 <ILI9341_DrawPixel>:
 * @brief  Dessine un seul pixel aux coordonnées souhaitées
 * @param  x: coordonnée X du pixel
 * @param  y: coordonnée Y du pixel
 * @param  color: couleur du pixel
 */
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	80bb      	strh	r3, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	807b      	strh	r3, [r7, #2]
	ILI9341_SetCursorPosition(x, y, x, y);
 8002dca:	88bb      	ldrh	r3, [r7, #4]
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	88b9      	ldrh	r1, [r7, #4]
 8002dd0:	88f8      	ldrh	r0, [r7, #6]
 8002dd2:	f000 f813 	bl	8002dfc <ILI9341_SetCursorPosition>

	ILI9341_SendCommand(ILI9341_GRAM);
 8002dd6:	202c      	movs	r0, #44	@ 0x2c
 8002dd8:	f7ff ffa6 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(color >> 8);
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ffc3 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(color & 0xFF);
 8002dea:	887b      	ldrh	r3, [r7, #2]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ffbe 	bl	8002d70 <ILI9341_SendData>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <ILI9341_SetCursorPosition>:
 * @param  x1: Coordonnée X du coin supérieur gauche de la zone
 * @param  y1: Coordonnée Y du coin supérieur gauche de la zone
 * @param  x2: Coordonnée X du coin inférieur droit de la zone
 * @param  y2: Coordonnée Y du coin inférieur droit de la zone
 */
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4604      	mov	r4, r0
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	80fb      	strh	r3, [r7, #6]
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80bb      	strh	r3, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	807b      	strh	r3, [r7, #2]
 8002e16:	4613      	mov	r3, r2
 8002e18:	803b      	strh	r3, [r7, #0]
	ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8002e1a:	202a      	movs	r0, #42	@ 0x2a
 8002e1c:	f7ff ff84 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(x1 >> 8);
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ffa1 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(x1 & 0xFF);
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff9c 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(x2 >> 8);
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff95 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(x2 & 0xFF);
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff90 	bl	8002d70 <ILI9341_SendData>

	ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8002e50:	202b      	movs	r0, #43	@ 0x2b
 8002e52:	f7ff ff69 	bl	8002d28 <ILI9341_SendCommand>
	ILI9341_SendData(y1 >> 8);
 8002e56:	88bb      	ldrh	r3, [r7, #4]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff86 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(y1 & 0xFF);
 8002e64:	88bb      	ldrh	r3, [r7, #4]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff81 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(y2 >> 8);
 8002e6e:	883b      	ldrh	r3, [r7, #0]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff7a 	bl	8002d70 <ILI9341_SendData>
	ILI9341_SendData(y2 & 0xFF);
 8002e7c:	883b      	ldrh	r3, [r7, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff75 	bl	8002d70 <ILI9341_SendData>
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd90      	pop	{r4, r7, pc}
	...

08002e90 <ILI9341_Fill>:

/**
 * @brief  Remplit l'intégralité de l'écran LCD avec une couleur
 * @param  color: Couleur à utiliser pour le remplissage
 */
void ILI9341_Fill(uint16_t color) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
	/* Fill entire screen */
	ILI9341_INT_Fill(0, 0, ILI9341_Opts.width - 1, ILI9341_Opts.height, color);
 8002e9a:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <ILI9341_Fill+0x2c>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <ILI9341_Fill+0x2c>)
 8002ea4:	8859      	ldrh	r1, [r3, #2]
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	2100      	movs	r1, #0
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f000 f806 	bl	8002ec0 <ILI9341_INT_Fill>
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20003a80 	.word	0x20003a80

08002ec0 <ILI9341_INT_Fill>:
 * @param  y0: Coordonnée Y du point supérieur gauche
 * @param  x1: Coordonnée X du point inférieur droit
 * @param  y1: Coordonnée Y du point inférieur droit
 * @param  color: Couleur à utiliser pour le remplissage
 */
void ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4623      	mov	r3, r4
 8002ed0:	80fb      	strh	r3, [r7, #6]
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80bb      	strh	r3, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	807b      	strh	r3, [r7, #2]
 8002eda:	4613      	mov	r3, r2
 8002edc:	803b      	strh	r3, [r7, #0]
	uint32_t pixels_count;
	uint8_t datas[2];
	datas[1] = HIGHINT(color);
 8002ede:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	737b      	strb	r3, [r7, #13]
	datas[0] = LOWINT(color);
 8002ee8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	733b      	strb	r3, [r7, #12]

	/* Set cursor position */
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 8002eee:	883b      	ldrh	r3, [r7, #0]
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	88b9      	ldrh	r1, [r7, #4]
 8002ef4:	88f8      	ldrh	r0, [r7, #6]
 8002ef6:	f7ff ff81 	bl	8002dfc <ILI9341_SetCursorPosition>

	/* Set command for GRAM data */
	ILI9341_SendCommand(ILI9341_GRAM);
 8002efa:	202c      	movs	r0, #44	@ 0x2c
 8002efc:	f7ff ff14 	bl	8002d28 <ILI9341_SendCommand>
	
	/* Calculate pixels count */
	pixels_count = (x1 - x0 + 1) * (y1 - y0 + 1);
 8002f00:	887a      	ldrh	r2, [r7, #2]
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	8839      	ldrh	r1, [r7, #0]
 8002f0a:	88ba      	ldrh	r2, [r7, #4]
 8002f0c:	1a8a      	subs	r2, r1, r2
 8002f0e:	3201      	adds	r2, #1
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	613b      	str	r3, [r7, #16]

	/* Send everything */
	ILI9341_CS_RESET();
 8002f16:	2200      	movs	r2, #0
 8002f18:	2110      	movs	r1, #16
 8002f1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f1e:	f002 fc61 	bl	80057e4 <HAL_GPIO_WritePin>
	ILI9341_WRX_SET();
 8002f22:	2201      	movs	r2, #1
 8002f24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f2c:	f002 fc5a 	bl	80057e4 <HAL_GPIO_WritePin>
	
	/* Go to 16-bit SPI mode */
	BSP_SPI_SetDataSize(ILI9341_SPI, SPI_DATASIZE_16BIT);
 8002f30:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8002f34:	4811      	ldr	r0, [pc, #68]	@ (8002f7c <ILI9341_INT_Fill+0xbc>)
 8002f36:	f001 fa0b 	bl	8004350 <BSP_SPI_SetDataSize>
	
	/* Send first 65535 bytes, SPI MUST BE IN 16-bit MODE */
	//SPI_DMA_SendHalfWord(ILI9341_SPI, color, (pixels_count > 0xFFFF) ? 0xFFFF : pixels_count);
	uint32_t i;
	for(i=0;i<pixels_count;i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e009      	b.n	8002f54 <ILI9341_INT_Fill+0x94>
		BSP_SPI_WriteMultiNoRegister(ILI9341_SPI, datas, 1);
 8002f40:	f107 030c 	add.w	r3, r7, #12
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	480c      	ldr	r0, [pc, #48]	@ (8002f7c <ILI9341_INT_Fill+0xbc>)
 8002f4a:	f001 f9bb 	bl	80042c4 <BSP_SPI_WriteMultiNoRegister>
	for(i=0;i<pixels_count;i++)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	3301      	adds	r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d3f1      	bcc.n	8002f40 <ILI9341_INT_Fill+0x80>
		//SPI_DMA_SendHalfWord(ILI9341_SPI, color, pixels_count - 0xFFFF);
		/* Wait till done */
		//while (SPI_DMA_Working(ILI9341_SPI));
	//}
	
	ILI9341_CS_SET();
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	2110      	movs	r1, #16
 8002f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f64:	f002 fc3e 	bl	80057e4 <HAL_GPIO_WritePin>

	/* Go back to 8-bit SPI mode */
	BSP_SPI_SetDataSize(ILI9341_SPI, SPI_DATASIZE_8BIT);
 8002f68:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002f6c:	4803      	ldr	r0, [pc, #12]	@ (8002f7c <ILI9341_INT_Fill+0xbc>)
 8002f6e:	f001 f9ef 	bl	8004350 <BSP_SPI_SetDataSize>
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd90      	pop	{r4, r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40013000 	.word	0x40013000

08002f80 <ILI9341_Rotate>:

/**
 * @brief  Pivote l'écran LCD vers une orientation spécifique
 * @param  orientation: Orientation de l'écran LCD. Ce paramètre peut prendre une valeur de l'énumération @ref ILI9341_Orientation_t
 */
void ILI9341_Rotate(ILI9341_Orientation_t orientation) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
	ILI9341_SendCommand(ILI9341_MAC);
 8002f8a:	2036      	movs	r0, #54	@ 0x36
 8002f8c:	f7ff fecc 	bl	8002d28 <ILI9341_SendCommand>
		ILI9341_SendData(0x68);
		ILI9341_Opts.width = ILI9341_WIDTH;
		ILI9341_Opts.height = ILI9341_HEIGHT;
		ILI9341_Opts.orientation = ILI9341_Orientation_Portrait_1;
#else
	if (orientation == ILI9341_Orientation_Portrait_1) {
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <ILI9341_Rotate+0x1e>
			ILI9341_SendData(0x58);
 8002f96:	2058      	movs	r0, #88	@ 0x58
 8002f98:	f7ff feea 	bl	8002d70 <ILI9341_SendData>
 8002f9c:	e013      	b.n	8002fc6 <ILI9341_Rotate+0x46>
		} else if (orientation == ILI9341_Orientation_Portrait_2) {
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d103      	bne.n	8002fac <ILI9341_Rotate+0x2c>
			ILI9341_SendData(0x88);
 8002fa4:	2088      	movs	r0, #136	@ 0x88
 8002fa6:	f7ff fee3 	bl	8002d70 <ILI9341_SendData>
 8002faa:	e00c      	b.n	8002fc6 <ILI9341_Rotate+0x46>
		} else if (orientation == ILI9341_Orientation_Landscape_1) {
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d103      	bne.n	8002fba <ILI9341_Rotate+0x3a>
			ILI9341_SendData(0x28);
 8002fb2:	2028      	movs	r0, #40	@ 0x28
 8002fb4:	f7ff fedc 	bl	8002d70 <ILI9341_SendData>
 8002fb8:	e005      	b.n	8002fc6 <ILI9341_Rotate+0x46>
		} else if (orientation == ILI9341_Orientation_Landscape_2) {
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d102      	bne.n	8002fc6 <ILI9341_Rotate+0x46>
			ILI9341_SendData(0xE8);
 8002fc0:	20e8      	movs	r0, #232	@ 0xe8
 8002fc2:	f7ff fed5 	bl	8002d70 <ILI9341_SendData>
		}

	ILI9341_Opts.orientation = orientation;
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8003000 <ILI9341_Rotate+0x80>)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	7113      	strb	r3, [r2, #4]
	if (orientation == ILI9341_Orientation_Portrait_1 || orientation == ILI9341_Orientation_Portrait_2) {
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <ILI9341_Rotate+0x58>
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <ILI9341_Rotate+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <ILI9341_Rotate+0x80>)
 8002fda:	22f0      	movs	r2, #240	@ 0xf0
 8002fdc:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 8002fde:	4b08      	ldr	r3, [pc, #32]	@ (8003000 <ILI9341_Rotate+0x80>)
 8002fe0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002fe4:	805a      	strh	r2, [r3, #2]
 8002fe6:	e007      	b.n	8002ff8 <ILI9341_Rotate+0x78>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <ILI9341_Rotate+0x80>)
 8002fea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002fee:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	@ (8003000 <ILI9341_Rotate+0x80>)
 8002ff2:	22f0      	movs	r2, #240	@ 0xf0
 8002ff4:	805a      	strh	r2, [r3, #2]
	}
#endif
}
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20003a80 	.word	0x20003a80

08003004 <ILI9341_Puts>:
 * @param  *str: Pointeur vers le premier caractère de la chaîne
 * @param  *font: Pointeur vers la police utilisée @ref FontDef_t
 * @param  foreground: Couleur de la chaîne de caractères
 * @param  background: Couleur de fond de la chaîne de caractères
 */
void ILI9341_Puts(uint16_t x, uint16_t y, char *str, FontDef_t *font, uint16_t foreground, uint16_t background) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af02      	add	r7, sp, #8
 800300a:	60ba      	str	r2, [r7, #8]
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	4603      	mov	r3, r0
 8003010:	81fb      	strh	r3, [r7, #14]
 8003012:	460b      	mov	r3, r1
 8003014:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 8003016:	89fb      	ldrh	r3, [r7, #14]
 8003018:	82fb      	strh	r3, [r7, #22]
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
 800301a:	4a31      	ldr	r2, [pc, #196]	@ (80030e0 <ILI9341_Puts+0xdc>)
 800301c:	89fb      	ldrh	r3, [r7, #14]
 800301e:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8003020:	4a30      	ldr	r2, [pc, #192]	@ (80030e4 <ILI9341_Puts+0xe0>)
 8003022:	89bb      	ldrh	r3, [r7, #12]
 8003024:	8013      	strh	r3, [r2, #0]
	
	while (*str) {
 8003026:	e051      	b.n	80030cc <ILI9341_Puts+0xc8>
		/* New line */
		if (*str == '\n') {
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b0a      	cmp	r3, #10
 800302e:	d11d      	bne.n	800306c <ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	461a      	mov	r2, r3
 8003036:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <ILI9341_Puts+0xe0>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	4413      	add	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	4b28      	ldr	r3, [pc, #160]	@ (80030e4 <ILI9341_Puts+0xe0>)
 8003044:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3301      	adds	r3, #1
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b0d      	cmp	r3, #13
 800304e:	d106      	bne.n	800305e <ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 8003050:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <ILI9341_Puts+0xdc>)
 8003052:	2200      	movs	r2, #0
 8003054:	801a      	strh	r2, [r3, #0]
				str++;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3301      	adds	r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	e002      	b.n	8003064 <ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 800305e:	4a20      	ldr	r2, [pc, #128]	@ (80030e0 <ILI9341_Puts+0xdc>)
 8003060:	8afb      	ldrh	r3, [r7, #22]
 8003062:	8013      	strh	r3, [r2, #0]
			}
			str++;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
			continue;
 800306a:	e02f      	b.n	80030cc <ILI9341_Puts+0xc8>
		} else if (*str == '\r') {
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b0d      	cmp	r3, #13
 8003072:	d103      	bne.n	800307c <ILI9341_Puts+0x78>
			str++;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3301      	adds	r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
			continue;
 800307a:	e027      	b.n	80030cc <ILI9341_Puts+0xc8>
		}
		if(ILI9341_x > ILI9341_Opts.width - font->FontWidth)
 800307c:	4b18      	ldr	r3, [pc, #96]	@ (80030e0 <ILI9341_Puts+0xdc>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <ILI9341_Puts+0xe4>)
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	1acb      	subs	r3, r1, r3
 800308e:	429a      	cmp	r2, r3
 8003090:	dd0d      	ble.n	80030ae <ILI9341_Puts+0xaa>
		{  
			//on passe � la ligne suivante, en s'alignant sous le d�but de la premi�re ligne
			ILI9341_y += font->FontHeight + 1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	785b      	ldrb	r3, [r3, #1]
 8003096:	461a      	mov	r2, r3
 8003098:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <ILI9341_Puts+0xe0>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	4413      	add	r3, r2
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <ILI9341_Puts+0xe0>)
 80030a6:	801a      	strh	r2, [r3, #0]
			ILI9341_x = startX;
 80030a8:	4a0d      	ldr	r2, [pc, #52]	@ (80030e0 <ILI9341_Puts+0xdc>)
 80030aa:	8afb      	ldrh	r3, [r7, #22]
 80030ac:	8013      	strh	r3, [r2, #0]
		}
		/* Put character to LCD */
		ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 80030ae:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <ILI9341_Puts+0xdc>)
 80030b0:	8818      	ldrh	r0, [r3, #0]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <ILI9341_Puts+0xe0>)
 80030b4:	8819      	ldrh	r1, [r3, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	60ba      	str	r2, [r7, #8]
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	8c3b      	ldrh	r3, [r7, #32]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f000 f810 	bl	80030ec <ILI9341_Putc>
	while (*str) {
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1a9      	bne.n	8003028 <ILI9341_Puts+0x24>
	}
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20003a7c 	.word	0x20003a7c
 80030e4:	20003a7e 	.word	0x20003a7e
 80030e8:	20003a80 	.word	0x20003a80

080030ec <ILI9341_Putc>:
 * @param  c: Caractère à afficher
 * @param  font: Pointeur vers la police utilisée @ref FontDef_t
 * @param  foreground: Couleur du caractère
 * @param  background: Couleur de fond du caractère
 */
void ILI9341_Putc(uint16_t x, uint16_t y, char c, FontDef_t *font, uint16_t foreground, uint16_t background) {
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b08d      	sub	sp, #52	@ 0x34
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	4603      	mov	r3, r0
 80030f6:	81fb      	strh	r3, [r7, #14]
 80030f8:	460b      	mov	r3, r1
 80030fa:	81bb      	strh	r3, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 8003100:	4a4e      	ldr	r2, [pc, #312]	@ (800323c <ILI9341_Putc+0x150>)
 8003102:	89fb      	ldrh	r3, [r7, #14]
 8003104:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8003106:	4a4e      	ldr	r2, [pc, #312]	@ (8003240 <ILI9341_Putc+0x154>)
 8003108:	89bb      	ldrh	r3, [r7, #12]
 800310a:	8013      	strh	r3, [r2, #0]
	
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 800310c:	4b4b      	ldr	r3, [pc, #300]	@ (800323c <ILI9341_Putc+0x150>)
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	4413      	add	r3, r2
 8003118:	4a4a      	ldr	r2, [pc, #296]	@ (8003244 <ILI9341_Putc+0x158>)
 800311a:	8812      	ldrh	r2, [r2, #0]
 800311c:	4293      	cmp	r3, r2
 800311e:	dd0b      	ble.n	8003138 <ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	461a      	mov	r2, r3
 8003126:	4b46      	ldr	r3, [pc, #280]	@ (8003240 <ILI9341_Putc+0x154>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	b29a      	uxth	r2, r3
 800312e:	4b44      	ldr	r3, [pc, #272]	@ (8003240 <ILI9341_Putc+0x154>)
 8003130:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 8003132:	4b42      	ldr	r3, [pc, #264]	@ (800323c <ILI9341_Putc+0x150>)
 8003134:	2200      	movs	r2, #0
 8003136:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw rectangle for background */
	ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 8003138:	4b40      	ldr	r3, [pc, #256]	@ (800323c <ILI9341_Putc+0x150>)
 800313a:	8818      	ldrh	r0, [r3, #0]
 800313c:	4b40      	ldr	r3, [pc, #256]	@ (8003240 <ILI9341_Putc+0x154>)
 800313e:	8819      	ldrh	r1, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	4b3d      	ldr	r3, [pc, #244]	@ (800323c <ILI9341_Putc+0x150>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	4413      	add	r3, r2
 800314c:	b29a      	uxth	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	461c      	mov	r4, r3
 8003154:	4b3a      	ldr	r3, [pc, #232]	@ (8003240 <ILI9341_Putc+0x154>)
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	4423      	add	r3, r4
 800315a:	b29c      	uxth	r4, r3
 800315c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	4623      	mov	r3, r4
 8003162:	f7ff fead 	bl	8002ec0 <ILI9341_INT_Fill>
	

	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
 800316a:	e054      	b.n	8003216 <ILI9341_Putc+0x12a>


		if(font->datasize == 1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7a1b      	ldrb	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d111      	bne.n	8003198 <ILI9341_Putc+0xac>
		{
			uint8_t * data;
			data = (uint8_t *)font->data;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	617b      	str	r3, [r7, #20]
			b = (uint32_t)(data[(c - 32) * font->FontHeight + i]) << 8;
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	3b20      	subs	r3, #32
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	7852      	ldrb	r2, [r2, #1]
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	461a      	mov	r2, r3
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	4413      	add	r3, r2
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4413      	add	r3, r2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	e017      	b.n	80031c8 <ILI9341_Putc+0xdc>
		}
		else if(font->datasize == 2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7a1b      	ldrb	r3, [r3, #8]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d111      	bne.n	80031c4 <ILI9341_Putc+0xd8>
		{
			uint16_t * data;
			data = (uint16_t *)font->data;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	61bb      	str	r3, [r7, #24]
			b = data[(c - 32) * font->FontHeight + i];
 80031a6:	7afb      	ldrb	r3, [r7, #11]
 80031a8:	3b20      	subs	r3, #32
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	7852      	ldrb	r2, [r2, #1]
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	4413      	add	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4413      	add	r3, r2
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	e001      	b.n	80031c8 <ILI9341_Putc+0xdc>
		}
		else
			b = 0;	//should never happen
 80031c4:	2300      	movs	r3, #0
 80031c6:	623b      	str	r3, [r7, #32]
		for (j = 0; j < font->FontWidth; j++) {
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	e01a      	b.n	8003204 <ILI9341_Putc+0x118>
			if ((b << j) & 0x8000) {
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00f      	beq.n	80031fe <ILI9341_Putc+0x112>
				ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	4b16      	ldr	r3, [pc, #88]	@ (800323c <ILI9341_Putc+0x150>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	b298      	uxth	r0, r3
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <ILI9341_Putc+0x154>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80031f8:	4619      	mov	r1, r3
 80031fa:	f7ff fddd 	bl	8002db8 <ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3301      	adds	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4293      	cmp	r3, r2
 800320e:	d3de      	bcc.n	80031ce <ILI9341_Putc+0xe2>
	for (i = 0; i < font->FontHeight; i++) {
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	3301      	adds	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	785b      	ldrb	r3, [r3, #1]
 800321a:	461a      	mov	r2, r3
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	4293      	cmp	r3, r2
 8003220:	d3a4      	bcc.n	800316c <ILI9341_Putc+0x80>
			}
		}
	}
	
	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	4b04      	ldr	r3, [pc, #16]	@ (800323c <ILI9341_Putc+0x150>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	4413      	add	r3, r2
 800322e:	b29a      	uxth	r2, r3
 8003230:	4b02      	ldr	r3, [pc, #8]	@ (800323c <ILI9341_Putc+0x150>)
 8003232:	801a      	strh	r2, [r3, #0]
}
 8003234:	bf00      	nop
 8003236:	372c      	adds	r7, #44	@ 0x2c
 8003238:	46bd      	mov	sp, r7
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	20003a7c 	.word	0x20003a7c
 8003240:	20003a7e 	.word	0x20003a7e
 8003244:	20003a80 	.word	0x20003a80

08003248 <ILI9341_DrawFilledRectangle>:
 * @param  y0: Coordonnée Y du point supérieur gauche
 * @param  x1: Coordonnée X du point inférieur droit
 * @param  y1: Coordonnée Y du point inférieur droit
 * @param  color: Couleur du rectangle
 */
void ILI9341_DrawFilledRectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b087      	sub	sp, #28
 800324c:	af02      	add	r7, sp, #8
 800324e:	4604      	mov	r4, r0
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4623      	mov	r3, r4
 8003258:	80fb      	strh	r3, [r7, #6]
 800325a:	4603      	mov	r3, r0
 800325c:	80bb      	strh	r3, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]
 8003262:	4613      	mov	r3, r2
 8003264:	803b      	strh	r3, [r7, #0]
	uint16_t tmp;
	
	/* Check correction */
	if (x0 > x1) {
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	429a      	cmp	r2, r3
 800326c:	d905      	bls.n	800327a <ILI9341_DrawFilledRectangle+0x32>
		tmp = x0;
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	81fb      	strh	r3, [r7, #14]
		x0 = x1;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 8003276:	89fb      	ldrh	r3, [r7, #14]
 8003278:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 800327a:	88ba      	ldrh	r2, [r7, #4]
 800327c:	883b      	ldrh	r3, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d905      	bls.n	800328e <ILI9341_DrawFilledRectangle+0x46>
		tmp = y0;
 8003282:	88bb      	ldrh	r3, [r7, #4]
 8003284:	81fb      	strh	r3, [r7, #14]
		y0 = y1;
 8003286:	883b      	ldrh	r3, [r7, #0]
 8003288:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Fill rectangle */
	ILI9341_INT_Fill(x0, y0, x1, y1, color);
 800328e:	883c      	ldrh	r4, [r7, #0]
 8003290:	887a      	ldrh	r2, [r7, #2]
 8003292:	88b9      	ldrh	r1, [r7, #4]
 8003294:	88f8      	ldrh	r0, [r7, #6]
 8003296:	8c3b      	ldrh	r3, [r7, #32]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	4623      	mov	r3, r4
 800329c:	f7ff fe10 	bl	8002ec0 <ILI9341_INT_Fill>
	
	/* CS HIGH back */
	ILI9341_CS_SET();
 80032a0:	2201      	movs	r2, #1
 80032a2:	2110      	movs	r1, #16
 80032a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032a8:	f002 fa9c 	bl	80057e4 <HAL_GPIO_WritePin>
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd90      	pop	{r4, r7, pc}

080032b4 <ILI9341_getOptions>:

/**
 * @brief  Renvoie les options de l'ILI9341
 * @retval ILI9341_Opts : Options
 */
ILI931_Options_t ILI9341_getOptions(void){
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	return ILI9341_Opts;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a05      	ldr	r2, [pc, #20]	@ (80032d4 <ILI9341_getOptions+0x20>)
 80032c0:	6810      	ldr	r0, [r2, #0]
 80032c2:	6018      	str	r0, [r3, #0]
 80032c4:	8892      	ldrh	r2, [r2, #4]
 80032c6:	809a      	strh	r2, [r3, #4]
}
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	20003a80 	.word	0x20003a80

080032d8 <XPT2046_init>:
}

/**
 * @brief Fonction d'initialisation du XPT2046
 */
void XPT2046_init(void){
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af02      	add	r7, sp, #8

	// Initialise SPI
	BSP_SPI_Init(XPT2046_SPI, FULL_DUPLEX, MASTER, SPI_BAUDRATEPRESCALER_32);
 80032de:	2320      	movs	r3, #32
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	481a      	ldr	r0, [pc, #104]	@ (8003350 <XPT2046_init+0x78>)
 80032e6:	f000 fb95 	bl	8003a14 <BSP_SPI_Init>
	uint32_t previousBaudrate;
	previousBaudrate = BSP_SPI_getBaudrate(XPT2046_SPI);
 80032ea:	4819      	ldr	r0, [pc, #100]	@ (8003350 <XPT2046_init+0x78>)
 80032ec:	f001 f8dc 	bl	80044a8 <BSP_SPI_getBaudrate>
 80032f0:	6078      	str	r0, [r7, #4]
	BSP_SPI_setBaudRate(XPT2046_SPI, SPI_BAUDRATEPRESCALER_256);	//slow for XPT2046
 80032f2:	2138      	movs	r1, #56	@ 0x38
 80032f4:	4816      	ldr	r0, [pc, #88]	@ (8003350 <XPT2046_init+0x78>)
 80032f6:	f001 f883 	bl	8004400 <BSP_SPI_setBaudRate>
	BSP_GPIO_pin_config(PIN_CS_TOUCH,GPIO_MODE_OUTPUT_PP,GPIO_NOPULL,GPIO_SPEED_FREQ_HIGH, GPIO_NO_AF);
 80032fa:	2300      	movs	r3, #0
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2302      	movs	r3, #2
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	2201      	movs	r2, #1
 8003306:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800330a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800330e:	f000 fb53 	bl	80039b8 <BSP_GPIO_pin_config>
	BSP_GPIO_pin_config(PIN_IRQ_TOUCH,GPIO_MODE_INPUT,GPIO_PULLDOWN,GPIO_SPEED_FREQ_HIGH, GPIO_NO_AF);
 8003312:	2300      	movs	r3, #0
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2302      	movs	r3, #2
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2302      	movs	r3, #2
 800331c:	2200      	movs	r2, #0
 800331e:	2120      	movs	r1, #32
 8003320:	480c      	ldr	r0, [pc, #48]	@ (8003354 <XPT2046_init+0x7c>)
 8003322:	f000 fb49 	bl	80039b8 <BSP_GPIO_pin_config>
	XPT2046_CS_SET();
 8003326:	2201      	movs	r2, #1
 8003328:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800332c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003330:	f002 fa58 	bl	80057e4 <HAL_GPIO_WritePin>

	XPT2046_getReading(CONTROL_BYTE_START
 8003334:	20d0      	movs	r0, #208	@ 0xd0
 8003336:	f000 f9bd 	bl	80036b4 <XPT2046_getReading>
					   | CONTROL_BYTE_CHANNEL_SELECT_X
					   | CONTROL_BYTE_MODE_12_BIT
					   | CONTROL_BYTE_SD_DIFFERENTIAL
					   | CONTROL_BYTE_POWER_DOWN_MODE_LOW_POWER_IRQ);

	BSP_SPI_setBaudRate(XPT2046_SPI, previousBaudrate);	//"fast" for everyone else...
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	b29b      	uxth	r3, r3
 800333e:	4619      	mov	r1, r3
 8003340:	4803      	ldr	r0, [pc, #12]	@ (8003350 <XPT2046_init+0x78>)
 8003342:	f001 f85d 	bl	8004400 <BSP_SPI_setBaudRate>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40013000 	.word	0x40013000
 8003354:	48000400 	.word	0x48000400

08003358 <XPT2046_getCoordinates>:
 * @param pX: Pointeur pour obtenir la coordonnée X.
 * @param pY: Pointeur pour obtenir la coordonnée Y.
 * @param coordinateMode: Mode de coordonnées, soit XPT2046_COORDINATE_RAW, soit XPT2046_COORDINATE_SCREEN_RELATIVE.
 * @return Un booléen indiquant si l'écran a été touché (et si les coordonnées retournées sont valides).
 */
bool XPT2046_getCoordinates(int16_t * pX, int16_t * pY, XPT2046_coordinateMode_e coordinateMode){
 8003358:	b580      	push	{r7, lr}
 800335a:	b08e      	sub	sp, #56	@ 0x38
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	71fb      	strb	r3, [r7, #7]
	uint8_t i, j;
	int16_t allX[7] , allY[7];
	bool ret;

	uint32_t previousBaudrate;
	previousBaudrate = BSP_SPI_getBaudrate(XPT2046_SPI);
 8003366:	4866      	ldr	r0, [pc, #408]	@ (8003500 <XPT2046_getCoordinates+0x1a8>)
 8003368:	f001 f89e 	bl	80044a8 <BSP_SPI_getBaudrate>
 800336c:	6338      	str	r0, [r7, #48]	@ 0x30
	BSP_SPI_setBaudRate(XPT2046_SPI, SPI_BAUDRATEPRESCALER_256);	//slow for XPT2046
 800336e:	2138      	movs	r1, #56	@ 0x38
 8003370:	4863      	ldr	r0, [pc, #396]	@ (8003500 <XPT2046_getCoordinates+0x1a8>)
 8003372:	f001 f845 	bl	8004400 <BSP_SPI_setBaudRate>

	for (i=0; i < 7 ; i++){
 8003376:	2300      	movs	r3, #0
 8003378:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800337c:	e01e      	b.n	80033bc <XPT2046_getCoordinates+0x64>

		allY[i] = (int16_t)XPT2046_getReading(CONTROL_BYTE_START
 800337e:	2090      	movs	r0, #144	@ 0x90
 8003380:	f000 f998 	bl	80036b4 <XPT2046_getReading>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800338c:	b212      	sxth	r2, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	3338      	adds	r3, #56	@ 0x38
 8003392:	443b      	add	r3, r7
 8003394:	f823 2c28 	strh.w	r2, [r3, #-40]
										| CONTROL_BYTE_CHANNEL_SELECT_Y
										| CONTROL_BYTE_MODE_12_BIT
										| CONTROL_BYTE_SD_DIFFERENTIAL
										| CONTROL_BYTE_POWER_DOWN_MODE_LOW_POWER_IRQ);

		allX[i] = (int16_t)XPT2046_getReading(CONTROL_BYTE_START
 8003398:	20d0      	movs	r0, #208	@ 0xd0
 800339a:	f000 f98b 	bl	80036b4 <XPT2046_getReading>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033a6:	b212      	sxth	r2, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	3338      	adds	r3, #56	@ 0x38
 80033ac:	443b      	add	r3, r7
 80033ae:	f823 2c18 	strh.w	r2, [r3, #-24]
	for (i=0; i < 7 ; i++){
 80033b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033b6:	3301      	adds	r3, #1
 80033b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80033bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	d9dc      	bls.n	800337e <XPT2046_getCoordinates+0x26>
										| CONTROL_BYTE_MODE_12_BIT
										| CONTROL_BYTE_SD_DIFFERENTIAL
										| CONTROL_BYTE_POWER_DOWN_MODE_LOW_POWER_IRQ);
	}

	for (i=0; i < 4 ; i++){
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80033ca:	e066      	b.n	800349a <XPT2046_getCoordinates+0x142>
		for (j=i; j < 7 ; j++) {
 80033cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033d0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80033d4:	e058      	b.n	8003488 <XPT2046_getCoordinates+0x130>
			int16_t temp = allX[i];
 80033d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	3338      	adds	r3, #56	@ 0x38
 80033de:	443b      	add	r3, r7
 80033e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80033e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			if(temp > allX[j]){
 80033e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	3338      	adds	r3, #56	@ 0x38
 80033ee:	443b      	add	r3, r7
 80033f0:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80033f4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dd16      	ble.n	800342a <XPT2046_getCoordinates+0xd2>
				allX[i] = allX[j];
 80033fc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003400:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	3338      	adds	r3, #56	@ 0x38
 8003408:	443b      	add	r3, r7
 800340a:	f933 1c18 	ldrsh.w	r1, [r3, #-24]
 800340e:	0053      	lsls	r3, r2, #1
 8003410:	3338      	adds	r3, #56	@ 0x38
 8003412:	443b      	add	r3, r7
 8003414:	460a      	mov	r2, r1
 8003416:	f823 2c18 	strh.w	r2, [r3, #-24]
				allX[j] = temp;
 800341a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	3338      	adds	r3, #56	@ 0x38
 8003422:	443b      	add	r3, r7
 8003424:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003426:	f823 2c18 	strh.w	r2, [r3, #-24]
			}
			temp = allY[i];
 800342a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	3338      	adds	r3, #56	@ 0x38
 8003432:	443b      	add	r3, r7
 8003434:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8003438:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			if(temp > allY[j]){
 800343a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	3338      	adds	r3, #56	@ 0x38
 8003442:	443b      	add	r3, r7
 8003444:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8003448:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 800344c:	429a      	cmp	r2, r3
 800344e:	dd16      	ble.n	800347e <XPT2046_getCoordinates+0x126>
				allY[i] = allY[j];
 8003450:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003454:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	3338      	adds	r3, #56	@ 0x38
 800345c:	443b      	add	r3, r7
 800345e:	f933 1c28 	ldrsh.w	r1, [r3, #-40]
 8003462:	0053      	lsls	r3, r2, #1
 8003464:	3338      	adds	r3, #56	@ 0x38
 8003466:	443b      	add	r3, r7
 8003468:	460a      	mov	r2, r1
 800346a:	f823 2c28 	strh.w	r2, [r3, #-40]
				allY[j] = temp;
 800346e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	3338      	adds	r3, #56	@ 0x38
 8003476:	443b      	add	r3, r7
 8003478:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800347a:	f823 2c28 	strh.w	r2, [r3, #-40]
		for (j=i; j < 7 ; j++) {
 800347e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003482:	3301      	adds	r3, #1
 8003484:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8003488:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800348c:	2b06      	cmp	r3, #6
 800348e:	d9a2      	bls.n	80033d6 <XPT2046_getCoordinates+0x7e>
	for (i=0; i < 4 ; i++){
 8003490:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003494:	3301      	adds	r3, #1
 8003496:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800349a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d994      	bls.n	80033cc <XPT2046_getCoordinates+0x74>
			}
		}
	}

#ifdef XPT2046_USE_PIN_IRQ_TO_CHECK_TOUCH
	if(!HAL_GPIO_ReadPin(PIN_IRQ_TOUCH))
 80034a2:	2120      	movs	r1, #32
 80034a4:	4817      	ldr	r0, [pc, #92]	@ (8003504 <XPT2046_getCoordinates+0x1ac>)
 80034a6:	f002 f985 	bl	80057b4 <HAL_GPIO_ReadPin>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <XPT2046_getCoordinates+0x160>
		ret = true;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80034b6:	e002      	b.n	80034be <XPT2046_getCoordinates+0x166>
	else
		ret =  false;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		ret =  false;
	else
		ret =  true;
#endif

	if(coordinateMode == XPT2046_COORDINATE_SCREEN_RELATIVE)
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d109      	bne.n	80034d8 <XPT2046_getCoordinates+0x180>
		XPT2046_convertCoordinateScreenMode(&(allX[3]), &(allY[3]));
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	1d9a      	adds	r2, r3, #6
 80034ca:	f107 0320 	add.w	r3, r7, #32
 80034ce:	3306      	adds	r3, #6
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f91e 	bl	8003714 <XPT2046_convertCoordinateScreenMode>

	*pX = allX[3];
 80034d8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	801a      	strh	r2, [r3, #0]
	*pY = allY[3];
 80034e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	801a      	strh	r2, [r3, #0]

	BSP_SPI_setBaudRate(XPT2046_SPI, previousBaudrate);	//"fast" for everyone else...
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4619      	mov	r1, r3
 80034ee:	4804      	ldr	r0, [pc, #16]	@ (8003500 <XPT2046_getCoordinates+0x1a8>)
 80034f0:	f000 ff86 	bl	8004400 <BSP_SPI_setBaudRate>

	return ret;
 80034f4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3738      	adds	r7, #56	@ 0x38
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40013000 	.word	0x40013000
 8003504:	48000400 	.word	0x48000400

08003508 <XPT2046_getMedianCoordinates>:
 * @param pX Pointeur: pour obtenir la coordonnée X.
 * @param pY Pointeur: pour obtenir la coordonnée Y.
 * @param coordinateMode: Soit XPT2046_COORDINATE_RAW, soit XPT2046_COORDINATE_SCREEN_RELATIVE.
 * @return Un booléen indiquant si l'écran a été touché (et si la coordonnée retournée est valide).
 */
bool XPT2046_getMedianCoordinates(int16_t * pX, int16_t * pY, XPT2046_coordinateMode_e coordinateMode){
 8003508:	b580      	push	{r7, lr}
 800350a:	b092      	sub	sp, #72	@ 0x48
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	71fb      	strb	r3, [r7, #7]
	uint8_t n = 0, i, j;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}point_t;
	point_t tab[NB_POINTS_FOR_MEDIAN];
	point_t current;
	int16_t index;

	index = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	XPT2046_getCoordinates(&tab[0].x , &tab[0].y, coordinateMode);	//on place le premier point dans la première case du tableau.
 8003522:	79fa      	ldrb	r2, [r7, #7]
 8003524:	f107 0320 	add.w	r3, r7, #32
 8003528:	1c99      	adds	r1, r3, #2
 800352a:	f107 0320 	add.w	r3, r7, #32
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff12 	bl	8003358 <XPT2046_getCoordinates>


	for(n=1; n<NB_POINTS_FOR_MEDIAN; n++)
 8003534:	2301      	movs	r3, #1
 8003536:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800353a:	e05d      	b.n	80035f8 <XPT2046_getMedianCoordinates+0xf0>
	{
		if(XPT2046_getCoordinates(&current.x , &current.y, coordinateMode))	//récup d'un point
 800353c:	79fa      	ldrb	r2, [r7, #7]
 800353e:	f107 031c 	add.w	r3, r7, #28
 8003542:	1c99      	adds	r1, r3, #2
 8003544:	f107 031c 	add.w	r3, r7, #28
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff05 	bl	8003358 <XPT2046_getCoordinates>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d04a      	beq.n	80035ea <XPT2046_getMedianCoordinates+0xe2>
		{
			for(i=0; i<index; i++)		//parcours des valeurs plus faibles
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800355a:	e00f      	b.n	800357c <XPT2046_getMedianCoordinates+0x74>
			{
				if(current.x < tab[i].x)
 800355c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003560:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	3348      	adds	r3, #72	@ 0x48
 8003568:	443b      	add	r3, r7
 800356a:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 800356e:	429a      	cmp	r2, r3
 8003570:	db0b      	blt.n	800358a <XPT2046_getMedianCoordinates+0x82>
			for(i=0; i<index; i++)		//parcours des valeurs plus faibles
 8003572:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003576:	3301      	adds	r3, #1
 8003578:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800357c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003580:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8003584:	429a      	cmp	r2, r3
 8003586:	dbe9      	blt.n	800355c <XPT2046_getMedianCoordinates+0x54>
 8003588:	e000      	b.n	800358c <XPT2046_getMedianCoordinates+0x84>
					break;
 800358a:	bf00      	nop
			}
			for(j=(uint8_t)index; j>i; j--)	//déplacement des valeurs plus grandes de 1 case
 800358c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003590:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003594:	e013      	b.n	80035be <XPT2046_getMedianCoordinates+0xb6>
			{
				tab[j] = tab[j-1];
 8003596:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800359a:	1e5a      	subs	r2, r3, #1
 800359c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	3348      	adds	r3, #72	@ 0x48
 80035a4:	443b      	add	r3, r7
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	3248      	adds	r2, #72	@ 0x48
 80035aa:	443a      	add	r2, r7
 80035ac:	f852 2c28 	ldr.w	r2, [r2, #-40]
 80035b0:	f843 2c28 	str.w	r2, [r3, #-40]
			for(j=(uint8_t)index; j>i; j--)	//déplacement des valeurs plus grandes de 1 case
 80035b4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80035b8:	3b01      	subs	r3, #1
 80035ba:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80035be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80035c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d8e5      	bhi.n	8003596 <XPT2046_getMedianCoordinates+0x8e>
			}
			tab[i] = current;	//écriture de la nouvelle valeur à sa position
 80035ca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	3348      	adds	r3, #72	@ 0x48
 80035d2:	443b      	add	r3, r7
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	f843 2c28 	str.w	r2, [r3, #-40]

			index++;
 80035da:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80035e8:	e001      	b.n	80035ee <XPT2046_getMedianCoordinates+0xe6>
		}
		else
			return false;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e05d      	b.n	80036aa <XPT2046_getMedianCoordinates+0x1a2>
	for(n=1; n<NB_POINTS_FOR_MEDIAN; n++)
 80035ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80035f2:	3301      	adds	r3, #1
 80035f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80035f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80035fc:	2b07      	cmp	r3, #7
 80035fe:	d99d      	bls.n	800353c <XPT2046_getMedianCoordinates+0x34>
	}

	*pX = tab[index/2].x;
 8003600:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8003604:	0fda      	lsrs	r2, r3, #31
 8003606:	4413      	add	r3, r2
 8003608:	105b      	asrs	r3, r3, #1
 800360a:	b21b      	sxth	r3, r3
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	3348      	adds	r3, #72	@ 0x48
 8003610:	443b      	add	r3, r7
 8003612:	f933 2c28 	ldrsh.w	r2, [r3, #-40]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	801a      	strh	r2, [r3, #0]
	*pY = tab[index/2].y;
 800361a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800361e:	0fda      	lsrs	r2, r3, #31
 8003620:	4413      	add	r3, r2
 8003622:	105b      	asrs	r3, r3, #1
 8003624:	b21b      	sxth	r3, r3
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3348      	adds	r3, #72	@ 0x48
 800362a:	443b      	add	r3, r7
 800362c:	f933 2c26 	ldrsh.w	r2, [r3, #-38]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	801a      	strh	r2, [r3, #0]
	ILI931_Options_t screenOption = ILI9341_getOptions();
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fe3b 	bl	80032b4 <ILI9341_getOptions>
	if(screenOption.orientation == ILI9341_Orientation_Portrait_1 || screenOption.orientation == ILI9341_Orientation_Portrait_2)
 800363e:	7e3b      	ldrb	r3, [r7, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <XPT2046_getMedianCoordinates+0x142>
 8003644:	7e3b      	ldrb	r3, [r7, #24]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d116      	bne.n	8003678 <XPT2046_getMedianCoordinates+0x170>
	{
		if(*pX > 0 && *pX < 239 && *pY > 0 && *pY < 319)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003650:	2b00      	cmp	r3, #0
 8003652:	dd28      	ble.n	80036a6 <XPT2046_getMedianCoordinates+0x19e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800365a:	2bee      	cmp	r3, #238	@ 0xee
 800365c:	dc23      	bgt.n	80036a6 <XPT2046_getMedianCoordinates+0x19e>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003664:	2b00      	cmp	r3, #0
 8003666:	dd1e      	ble.n	80036a6 <XPT2046_getMedianCoordinates+0x19e>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366e:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003672:	dc18      	bgt.n	80036a6 <XPT2046_getMedianCoordinates+0x19e>
			return true;
 8003674:	2301      	movs	r3, #1
 8003676:	e018      	b.n	80036aa <XPT2046_getMedianCoordinates+0x1a2>
	}
	else
	{
		if(*pX > 0 && *pX < 319 && *pY > 0 && *pY < 239)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367e:	2b00      	cmp	r3, #0
 8003680:	dd12      	ble.n	80036a8 <XPT2046_getMedianCoordinates+0x1a0>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003688:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800368c:	dc0c      	bgt.n	80036a8 <XPT2046_getMedianCoordinates+0x1a0>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003694:	2b00      	cmp	r3, #0
 8003696:	dd07      	ble.n	80036a8 <XPT2046_getMedianCoordinates+0x1a0>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369e:	2bee      	cmp	r3, #238	@ 0xee
 80036a0:	dc02      	bgt.n	80036a8 <XPT2046_getMedianCoordinates+0x1a0>
			return true;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e001      	b.n	80036aa <XPT2046_getMedianCoordinates+0x1a2>
		if(*pX > 0 && *pX < 239 && *pY > 0 && *pY < 319)
 80036a6:	bf00      	nop
	}
	return false;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3748      	adds	r7, #72	@ 0x48
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <XPT2046_getReading>:
/**
 * @brief Fonction privée utilisée pour lire le SPI.
 * @param controlByte: Byte de contrôle utilisé pour la lecture.
 * @return Données lues depuis l'écran tactile.
 */
static uint16_t XPT2046_getReading(controlByte_t controlByte){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]

	uint16_t ret;

	XPT2046_CS_RESET();
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036c8:	f002 f88c 	bl	80057e4 <HAL_GPIO_WritePin>
	BSP_SPI_WriteNoRegister(XPT2046_SPI,controlByte);
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	4619      	mov	r1, r3
 80036d0:	480f      	ldr	r0, [pc, #60]	@ (8003710 <XPT2046_getReading+0x5c>)
 80036d2:	f000 fdb3 	bl	800423c <BSP_SPI_WriteNoRegister>

	ret = (uint16_t)((uint16_t)(BSP_SPI_ReadNoRegister(XPT2046_SPI)) << 5);
 80036d6:	480e      	ldr	r0, [pc, #56]	@ (8003710 <XPT2046_getReading+0x5c>)
 80036d8:	f000 fd6a 	bl	80041b0 <BSP_SPI_ReadNoRegister>
 80036dc:	4603      	mov	r3, r0
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	81fb      	strh	r3, [r7, #14]
	ret |= (uint16_t)(BSP_SPI_ReadNoRegister(XPT2046_SPI) >> (uint16_t)(3));
 80036e2:	480b      	ldr	r0, [pc, #44]	@ (8003710 <XPT2046_getReading+0x5c>)
 80036e4:	f000 fd64 	bl	80041b0 <BSP_SPI_ReadNoRegister>
 80036e8:	4603      	mov	r3, r0
 80036ea:	08db      	lsrs	r3, r3, #3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	89fb      	ldrh	r3, [r7, #14]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	81fb      	strh	r3, [r7, #14]

	XPT2046_CS_SET();
 80036f6:	2201      	movs	r2, #1
 80036f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003700:	f002 f870 	bl	80057e4 <HAL_GPIO_WritePin>

	return ret;
 8003704:	89fb      	ldrh	r3, [r7, #14]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40013000 	.word	0x40013000

08003714 <XPT2046_convertCoordinateScreenMode>:
/**
 * @brief Fonction privée utilisée pour convertir les coordonnées bruts en coordonnées exploitables.
 * @param pX: Coordonnée X.
 * @param pY: Coordonnée Y.
 */
static void XPT2046_convertCoordinateScreenMode(int16_t * pX, int16_t * pY){
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
	ILI931_Options_t screenOption = ILI9341_getOptions();
 800371e:	f107 0308 	add.w	r3, r7, #8
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fdc6 	bl	80032b4 <ILI9341_getOptions>
	int32_t tempX, tempY;
	tempX = (int32_t)*pX;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372e:	617b      	str	r3, [r7, #20]
	tempY = (int32_t)*pY;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003736:	613b      	str	r3, [r7, #16]

	switch(screenOption.orientation){
 8003738:	7b3b      	ldrb	r3, [r7, #12]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d87a      	bhi.n	8003834 <XPT2046_convertCoordinateScreenMode+0x120>
 800373e:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <XPT2046_convertCoordinateScreenMode+0x30>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003755 	.word	0x08003755
 8003748:	0800378f 	.word	0x0800378f
 800374c:	080037c5 	.word	0x080037c5
 8003750:	080037fd 	.word	0x080037fd
	case ILI9341_Orientation_Portrait_1 :
		*pX = (int16_t)((4096 - tempX) * (int32_t)screenOption.width / 4096);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800375a:	893a      	ldrh	r2, [r7, #8]
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	da01      	bge.n	8003768 <XPT2046_convertCoordinateScreenMode+0x54>
 8003764:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003768:	131b      	asrs	r3, r3, #12
 800376a:	b21a      	sxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	801a      	strh	r2, [r3, #0]
		*pY = (int16_t)((4096 - tempY) * (int32_t)screenOption.height / 4096);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8003776:	897a      	ldrh	r2, [r7, #10]
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	da01      	bge.n	8003784 <XPT2046_convertCoordinateScreenMode+0x70>
 8003780:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003784:	131b      	asrs	r3, r3, #12
 8003786:	b21a      	sxth	r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	801a      	strh	r2, [r3, #0]
		break;
 800378c:	e052      	b.n	8003834 <XPT2046_convertCoordinateScreenMode+0x120>

	case ILI9341_Orientation_Portrait_2 :
		*pX = (int16_t)(tempX * (int32_t)screenOption.width / 4096);
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	461a      	mov	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	fb02 f303 	mul.w	r3, r2, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	da01      	bge.n	80037a0 <XPT2046_convertCoordinateScreenMode+0x8c>
 800379c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80037a0:	131b      	asrs	r3, r3, #12
 80037a2:	b21a      	sxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	801a      	strh	r2, [r3, #0]
		*pY = (int16_t)(tempY * (int32_t)screenOption.height / 4096);
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	461a      	mov	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	da01      	bge.n	80037ba <XPT2046_convertCoordinateScreenMode+0xa6>
 80037b6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80037ba:	131b      	asrs	r3, r3, #12
 80037bc:	b21a      	sxth	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	801a      	strh	r2, [r3, #0]
		break;
 80037c2:	e037      	b.n	8003834 <XPT2046_convertCoordinateScreenMode+0x120>

	case ILI9341_Orientation_Landscape_1 :
		*pX = (int16_t)((4096 - tempY) * (int32_t)screenOption.width / 4096);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80037ca:	893a      	ldrh	r2, [r7, #8]
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da01      	bge.n	80037d8 <XPT2046_convertCoordinateScreenMode+0xc4>
 80037d4:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80037d8:	131b      	asrs	r3, r3, #12
 80037da:	b21a      	sxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	801a      	strh	r2, [r3, #0]
		*pY = (int16_t)(tempX * (int32_t)screenOption.height / 4096);
 80037e0:	897b      	ldrh	r3, [r7, #10]
 80037e2:	461a      	mov	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da01      	bge.n	80037f2 <XPT2046_convertCoordinateScreenMode+0xde>
 80037ee:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80037f2:	131b      	asrs	r3, r3, #12
 80037f4:	b21a      	sxth	r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	801a      	strh	r2, [r3, #0]
		break;
 80037fa:	e01b      	b.n	8003834 <XPT2046_convertCoordinateScreenMode+0x120>

	case ILI9341_Orientation_Landscape_2 :
		*pX = (int16_t)((tempY) * (int32_t)screenOption.width / 4096);
 80037fc:	893b      	ldrh	r3, [r7, #8]
 80037fe:	461a      	mov	r2, r3
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	da01      	bge.n	800380e <XPT2046_convertCoordinateScreenMode+0xfa>
 800380a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800380e:	131b      	asrs	r3, r3, #12
 8003810:	b21a      	sxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	801a      	strh	r2, [r3, #0]
		*pY = (int16_t)((4096 - tempX) * (int32_t)screenOption.height / 4096);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800381c:	897a      	ldrh	r2, [r7, #10]
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	da01      	bge.n	800382a <XPT2046_convertCoordinateScreenMode+0x116>
 8003826:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800382a:	131b      	asrs	r3, r3, #12
 800382c:	b21a      	sxth	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	801a      	strh	r2, [r3, #0]
		break;
 8003832:	bf00      	nop
	}
}
 8003834:	bf00      	nop
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <call_extit_user_callback>:
 *
 * Cette fonction est appelée par les fonctions d'interruption EXTIx_IRQHandler
 * @param pin_number : numéro de la broche pour laquelle appeler la fonction de callback
 */
static void call_extit_user_callback(uint8_t pin_number)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
	uint16_t gpio_pin;
	gpio_pin = (uint16_t)(1) << (uint16_t)(pin_number);
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	2201      	movs	r2, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	81fb      	strh	r3, [r7, #14]
	if(__HAL_GPIO_EXTI_GET_IT(gpio_pin))
 8003850:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <call_extit_user_callback+0x58>)
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d017      	beq.n	800388c <call_extit_user_callback+0x50>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(gpio_pin);
 800385c:	4a0d      	ldr	r2, [pc, #52]	@ (8003894 <call_extit_user_callback+0x58>)
 800385e:	89fb      	ldrh	r3, [r7, #14]
 8003860:	6153      	str	r3, [r2, #20]
		if(enables & gpio_pin)
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <call_extit_user_callback+0x5c>)
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	89fb      	ldrh	r3, [r7, #14]
 8003868:	4013      	ands	r3, r2
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <call_extit_user_callback+0x50>
		{
			if(callbacks[pin_number])
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	4a0a      	ldr	r2, [pc, #40]	@ (800389c <call_extit_user_callback+0x60>)
 8003874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <call_extit_user_callback+0x50>
				(*callbacks[pin_number])(pin_number);
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	4a07      	ldr	r2, [pc, #28]	@ (800389c <call_extit_user_callback+0x60>)
 8003880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003884:	79fa      	ldrb	r2, [r7, #7]
 8003886:	b292      	uxth	r2, r2
 8003888:	4610      	mov	r0, r2
 800388a:	4798      	blx	r3
		}
	}
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40010400 	.word	0x40010400
 8003898:	20003ac8 	.word	0x20003ac8
 800389c:	20003a88 	.word	0x20003a88

080038a0 <EXTI0_IRQHandler>:
 * @pre		Cette fonction NE DOIT PAS être appelée directement par l'utilisateur...
 * @post	Acquittement du flag d'interruption, et appel de la fonction de callback rensignée par l'utilisateur (si elle existe)
 * @note	Nous n'avons PAS le choix du nom de cette fonction, c'est comme ça qu'elle est nommée dans le fichier startup.s !
 */
void EXTI0_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
	call_extit_user_callback(0);
 80038a4:	2000      	movs	r0, #0
 80038a6:	f7ff ffc9 	bl	800383c <call_extit_user_callback>
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}

080038ae <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	af00      	add	r7, sp, #0
	call_extit_user_callback(1);
 80038b2:	2001      	movs	r0, #1
 80038b4:	f7ff ffc2 	bl	800383c <call_extit_user_callback>
}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}

080038bc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
	call_extit_user_callback(2);
 80038c0:	2002      	movs	r0, #2
 80038c2:	f7ff ffbb 	bl	800383c <call_extit_user_callback>
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}

080038ca <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	af00      	add	r7, sp, #0
	call_extit_user_callback(3);
 80038ce:	2003      	movs	r0, #3
 80038d0:	f7ff ffb4 	bl	800383c <call_extit_user_callback>
}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
	call_extit_user_callback(4);
 80038dc:	2004      	movs	r0, #4
 80038de:	f7ff ffad 	bl	800383c <call_extit_user_callback>
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	af00      	add	r7, sp, #0
	call_extit_user_callback(5);
 80038ea:	2005      	movs	r0, #5
 80038ec:	f7ff ffa6 	bl	800383c <call_extit_user_callback>
	call_extit_user_callback(6);
 80038f0:	2006      	movs	r0, #6
 80038f2:	f7ff ffa3 	bl	800383c <call_extit_user_callback>
	call_extit_user_callback(7);
 80038f6:	2007      	movs	r0, #7
 80038f8:	f7ff ffa0 	bl	800383c <call_extit_user_callback>
	call_extit_user_callback(8);
 80038fc:	2008      	movs	r0, #8
 80038fe:	f7ff ff9d 	bl	800383c <call_extit_user_callback>
	call_extit_user_callback(9);
 8003902:	2009      	movs	r0, #9
 8003904:	f7ff ff9a 	bl	800383c <call_extit_user_callback>
}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}

0800390c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
	call_extit_user_callback(10);
 8003910:	200a      	movs	r0, #10
 8003912:	f7ff ff93 	bl	800383c <call_extit_user_callback>
	call_extit_user_callback(11);
 8003916:	200b      	movs	r0, #11
 8003918:	f7ff ff90 	bl	800383c <call_extit_user_callback>
	call_extit_user_callback(12);
 800391c:	200c      	movs	r0, #12
 800391e:	f7ff ff8d 	bl	800383c <call_extit_user_callback>
	call_extit_user_callback(13);
 8003922:	200d      	movs	r0, #13
 8003924:	f7ff ff8a 	bl	800383c <call_extit_user_callback>
	call_extit_user_callback(14);
 8003928:	200e      	movs	r0, #14
 800392a:	f7ff ff87 	bl	800383c <call_extit_user_callback>
	call_extit_user_callback(15);
 800392e:	200f      	movs	r0, #15
 8003930:	f7ff ff84 	bl	800383c <call_extit_user_callback>
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}

08003938 <BSP_GPIO_enable>:
/**
 * @brief Activation des horloges des peripheriques GPIOx
 *
 */
void BSP_GPIO_enable(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800393e:	4b1c      	ldr	r3, [pc, #112]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 8003940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003942:	4a1b      	ldr	r2, [pc, #108]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 8003944:	f043 0320 	orr.w	r3, r3, #32
 8003948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800394a:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 800394c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003956:	4b16      	ldr	r3, [pc, #88]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	4a15      	ldr	r2, [pc, #84]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 800395c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003962:	4b13      	ldr	r3, [pc, #76]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	4b10      	ldr	r3, [pc, #64]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	4a0f      	ldr	r2, [pc, #60]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800397a:	4b0d      	ldr	r3, [pc, #52]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003986:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	4a09      	ldr	r2, [pc, #36]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003992:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <BSP_GPIO_enable+0x78>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_DisableUCPDDeadBattery();	//désactive les pull-down sur PB4 et PB6 lorsque PA9 et PA10 sont à 1.
 800399e:	f001 ffdd 	bl	800595c <HAL_PWREx_DisableUCPDDeadBattery>
  initialized = true;
 80039a2:	4b04      	ldr	r3, [pc, #16]	@ (80039b4 <BSP_GPIO_enable+0x7c>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	20003aca 	.word	0x20003aca

080039b8 <BSP_GPIO_pin_config>:
 * @param GPIO_Pull : GPIO_NOPULL, GPIO_PULLUP, GPIO_PULLDOWN
 * @param GPIO_Speed : GPIO_SPEED_LOW (2MHz), GPIO_SPEED_MEDIUM (25MHz), GPIO_SPEED_HIGH (100MHz)
 * @param GPIO_Alternate : GPIO_AF0 à GPIO_AF15 ou GPIO_NO_AF pour une broche GPIO pure sans fonction alternative
 */
void BSP_GPIO_pin_config(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin, uint32_t GPIO_Mode, uint32_t GPIO_Pull, uint32_t GPIO_Speed, uint32_t GPIO_Alternate)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	@ 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStructure = { 0 };//Structure contenant les arguments de la fonction GPIO_Init
 80039c6:	f107 0314 	add.w	r3, r7, #20
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	60da      	str	r2, [r3, #12]
 80039d4:	611a      	str	r2, [r3, #16]

	if(!initialized)
 80039d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <BSP_GPIO_pin_config+0x58>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	f083 0301 	eor.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <BSP_GPIO_pin_config+0x30>
		BSP_GPIO_enable();
 80039e4:	f7ff ffa8 	bl	8003938 <BSP_GPIO_enable>

	GPIO_InitStructure.Pin = GPIO_Pin;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_Mode;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_Pull;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_Speed;
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Alternate = GPIO_Alternate;
 80039f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOx, &GPIO_InitStructure);
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	4619      	mov	r1, r3
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f001 fd54 	bl	80054b0 <HAL_GPIO_Init>
}
 8003a08:	bf00      	nop
 8003a0a:	3728      	adds	r7, #40	@ 0x28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20003aca 	.word	0x20003aca

08003a14 <BSP_SPI_Init>:
 * @pre Si vous souhaitez configurer le SPI2, vous devez vous assurer que le pin F1 est actif en hardware (cf en haut de la page /!\..../!\ ou le tableau des pins)
 * @note /!\ Le baud Rate prescaler va d�pendre du capteur que vous utilis� ;
 * 		 Ce param�tre est crucial et doit �tre r�fl�chi si vous voulez avoir une communication fonctionnelle et optimale /!\
 */
void BSP_SPI_Init(SPI_TypeDef* SPIx, SPI_Mode_e SPI_Mode, SPI_Rank_e SPI_Rank, uint16_t SPI_BAUDRATEPRESCALER_x)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	70fb      	strb	r3, [r7, #3]
 8003a26:	460b      	mov	r3, r1
 8003a28:	70bb      	strb	r3, [r7, #2]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	803b      	strh	r3, [r7, #0]
	assert(SPIx == SPI1 || SPIx == SPI2 || SPIx == SPI3);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4aa0      	ldr	r2, [pc, #640]	@ (8003cb4 <BSP_SPI_Init+0x2a0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00d      	beq.n	8003a52 <BSP_SPI_Init+0x3e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a9f      	ldr	r2, [pc, #636]	@ (8003cb8 <BSP_SPI_Init+0x2a4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <BSP_SPI_Init+0x3e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a9e      	ldr	r2, [pc, #632]	@ (8003cbc <BSP_SPI_Init+0x2a8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d005      	beq.n	8003a52 <BSP_SPI_Init+0x3e>
 8003a46:	4b9e      	ldr	r3, [pc, #632]	@ (8003cc0 <BSP_SPI_Init+0x2ac>)
 8003a48:	4a9e      	ldr	r2, [pc, #632]	@ (8003cc4 <BSP_SPI_Init+0x2b0>)
 8003a4a:	213b      	movs	r1, #59	@ 0x3b
 8003a4c:	489e      	ldr	r0, [pc, #632]	@ (8003cc8 <BSP_SPI_Init+0x2b4>)
 8003a4e:	f005 fee5 	bl	800981c <__assert_func>
	assert(SPI_Mode == FULL_DUPLEX || SPI_Mode == HALF_DUPLEX || SPI_Mode == RECEIVE_ONLY || SPI_Mode == TRANSMIT_ONLY);
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <BSP_SPI_Init+0x62>
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d00b      	beq.n	8003a76 <BSP_SPI_Init+0x62>
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d008      	beq.n	8003a76 <BSP_SPI_Init+0x62>
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d005      	beq.n	8003a76 <BSP_SPI_Init+0x62>
 8003a6a:	4b98      	ldr	r3, [pc, #608]	@ (8003ccc <BSP_SPI_Init+0x2b8>)
 8003a6c:	4a95      	ldr	r2, [pc, #596]	@ (8003cc4 <BSP_SPI_Init+0x2b0>)
 8003a6e:	213c      	movs	r1, #60	@ 0x3c
 8003a70:	4895      	ldr	r0, [pc, #596]	@ (8003cc8 <BSP_SPI_Init+0x2b4>)
 8003a72:	f005 fed3 	bl	800981c <__assert_func>
	assert(SPI_Rank == MASTER || SPI_Rank == SLAVE);
 8003a76:	78bb      	ldrb	r3, [r7, #2]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <BSP_SPI_Init+0x7a>
 8003a7c:	78bb      	ldrb	r3, [r7, #2]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d005      	beq.n	8003a8e <BSP_SPI_Init+0x7a>
 8003a82:	4b93      	ldr	r3, [pc, #588]	@ (8003cd0 <BSP_SPI_Init+0x2bc>)
 8003a84:	4a8f      	ldr	r2, [pc, #572]	@ (8003cc4 <BSP_SPI_Init+0x2b0>)
 8003a86:	213d      	movs	r1, #61	@ 0x3d
 8003a88:	488f      	ldr	r0, [pc, #572]	@ (8003cc8 <BSP_SPI_Init+0x2b4>)
 8003a8a:	f005 fec7 	bl	800981c <__assert_func>
	assert(IS_SPI_BAUDRATE_PRESCALER(SPI_BAUDRATEPRESCALER_x));
 8003a8e:	883b      	ldrh	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01a      	beq.n	8003aca <BSP_SPI_Init+0xb6>
 8003a94:	883b      	ldrh	r3, [r7, #0]
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d017      	beq.n	8003aca <BSP_SPI_Init+0xb6>
 8003a9a:	883b      	ldrh	r3, [r7, #0]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d014      	beq.n	8003aca <BSP_SPI_Init+0xb6>
 8003aa0:	883b      	ldrh	r3, [r7, #0]
 8003aa2:	2b18      	cmp	r3, #24
 8003aa4:	d011      	beq.n	8003aca <BSP_SPI_Init+0xb6>
 8003aa6:	883b      	ldrh	r3, [r7, #0]
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d00e      	beq.n	8003aca <BSP_SPI_Init+0xb6>
 8003aac:	883b      	ldrh	r3, [r7, #0]
 8003aae:	2b28      	cmp	r3, #40	@ 0x28
 8003ab0:	d00b      	beq.n	8003aca <BSP_SPI_Init+0xb6>
 8003ab2:	883b      	ldrh	r3, [r7, #0]
 8003ab4:	2b30      	cmp	r3, #48	@ 0x30
 8003ab6:	d008      	beq.n	8003aca <BSP_SPI_Init+0xb6>
 8003ab8:	883b      	ldrh	r3, [r7, #0]
 8003aba:	2b38      	cmp	r3, #56	@ 0x38
 8003abc:	d005      	beq.n	8003aca <BSP_SPI_Init+0xb6>
 8003abe:	4b85      	ldr	r3, [pc, #532]	@ (8003cd4 <BSP_SPI_Init+0x2c0>)
 8003ac0:	4a80      	ldr	r2, [pc, #512]	@ (8003cc4 <BSP_SPI_Init+0x2b0>)
 8003ac2:	213e      	movs	r1, #62	@ 0x3e
 8003ac4:	4880      	ldr	r0, [pc, #512]	@ (8003cc8 <BSP_SPI_Init+0x2b4>)
 8003ac6:	f005 fea9 	bl	800981c <__assert_func>

	SPI_ID_e id = ((SPIx == SPI1)?SPI1_ID:(SPIx == SPI2)?SPI2_ID:SPI3_ID);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a79      	ldr	r2, [pc, #484]	@ (8003cb4 <BSP_SPI_Init+0x2a0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <BSP_SPI_Init+0xce>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a78      	ldr	r2, [pc, #480]	@ (8003cb8 <BSP_SPI_Init+0x2a4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <BSP_SPI_Init+0xca>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e002      	b.n	8003ae4 <BSP_SPI_Init+0xd0>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e000      	b.n	8003ae4 <BSP_SPI_Init+0xd0>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]

	hSPI[id].Instance = SPIx;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	4a7b      	ldr	r2, [pc, #492]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003aea:	2164      	movs	r1, #100	@ 0x64
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	601a      	str	r2, [r3, #0]
	hSPI[id].Init.DataSize = SPI_DATASIZE_8BIT;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	4a77      	ldr	r2, [pc, #476]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003afa:	2164      	movs	r1, #100	@ 0x64
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	330c      	adds	r3, #12
 8003b04:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003b08:	601a      	str	r2, [r3, #0]
	hSPI[id].Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	4a72      	ldr	r2, [pc, #456]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003b0e:	2164      	movs	r1, #100	@ 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	3310      	adds	r3, #16
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
	hSPI[id].Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003b20:	2164      	movs	r1, #100	@ 0x64
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3314      	adds	r3, #20
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
	hSPI[id].Init.NSS = SPI_NSS_SOFT;			//Chip select must be manage by software
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	4a69      	ldr	r2, [pc, #420]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003b32:	2164      	movs	r1, #100	@ 0x64
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	3318      	adds	r3, #24
 8003b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b40:	601a      	str	r2, [r3, #0]
	hSPI[id].Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	4a64      	ldr	r2, [pc, #400]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003b46:	2164      	movs	r1, #100	@ 0x64
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3320      	adds	r3, #32
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
	hSPI[id].Init.TIMode = SPI_TIMODE_DISABLE;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	4a60      	ldr	r2, [pc, #384]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003b58:	2164      	movs	r1, #100	@ 0x64
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3324      	adds	r3, #36	@ 0x24
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
	hSPI[id].Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003b6a:	2164      	movs	r1, #100	@ 0x64
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	3328      	adds	r3, #40	@ 0x28
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
	hSPI[id].Init.CRCPolynomial = 0;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	4a57      	ldr	r2, [pc, #348]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003b7c:	2164      	movs	r1, #100	@ 0x64
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	332c      	adds	r3, #44	@ 0x2c
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
	hSPI[id].Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	4a52      	ldr	r2, [pc, #328]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003b8e:	2164      	movs	r1, #100	@ 0x64
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	3330      	adds	r3, #48	@ 0x30
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
	switch (SPI_Rank) {
 8003b9c:	78bb      	ldrb	r3, [r7, #2]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <BSP_SPI_Init+0x194>
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d01d      	beq.n	8003be2 <BSP_SPI_Init+0x1ce>
		case SLAVE:
			hSPI[id].Init.Mode = SPI_MODE_SLAVE;
			hSPI[id].Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
			break;
		default:
			break;
 8003ba6:	e02f      	b.n	8003c08 <BSP_SPI_Init+0x1f4>
			hSPI[id].Init.Mode = SPI_MODE_MASTER;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	4a4b      	ldr	r2, [pc, #300]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003bac:	2164      	movs	r1, #100	@ 0x64
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003bba:	601a      	str	r2, [r3, #0]
			hSPI[id].Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_x;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	883a      	ldrh	r2, [r7, #0]
 8003bc0:	4945      	ldr	r1, [pc, #276]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003bc2:	2064      	movs	r0, #100	@ 0x64
 8003bc4:	fb00 f303 	mul.w	r3, r0, r3
 8003bc8:	440b      	add	r3, r1
 8003bca:	331c      	adds	r3, #28
 8003bcc:	601a      	str	r2, [r3, #0]
			hSPI[id].Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	4a41      	ldr	r2, [pc, #260]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003bd2:	2164      	movs	r1, #100	@ 0x64
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	4413      	add	r3, r2
 8003bda:	3334      	adds	r3, #52	@ 0x34
 8003bdc:	2208      	movs	r2, #8
 8003bde:	601a      	str	r2, [r3, #0]
			break;
 8003be0:	e012      	b.n	8003c08 <BSP_SPI_Init+0x1f4>
			hSPI[id].Init.Mode = SPI_MODE_SLAVE;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	4a3c      	ldr	r2, [pc, #240]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003be6:	2164      	movs	r1, #100	@ 0x64
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3304      	adds	r3, #4
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
			hSPI[id].Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	4a38      	ldr	r2, [pc, #224]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003bf8:	2164      	movs	r1, #100	@ 0x64
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	3334      	adds	r3, #52	@ 0x34
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
			break;
 8003c06:	bf00      	nop
	}
	switch (SPI_Mode) {
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d844      	bhi.n	8003c98 <BSP_SPI_Init+0x284>
 8003c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <BSP_SPI_Init+0x200>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c5f 	.word	0x08003c5f
 8003c20:	08003c7d 	.word	0x08003c7d
		case FULL_DUPLEX:
			hSPI[id].Init.Direction = SPI_DIRECTION_2LINES;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003c28:	2164      	movs	r1, #100	@ 0x64
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	3308      	adds	r3, #8
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
			SPI_GPIO_FULLDUPLEX_config(id);
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f84f 	bl	8003cdc <SPI_GPIO_FULLDUPLEX_config>
			break;
 8003c3e:	e02c      	b.n	8003c9a <BSP_SPI_Init+0x286>
		case HALF_DUPLEX:
			hSPI[id].Init.Direction = SPI_DIRECTION_1LINE;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	4a25      	ldr	r2, [pc, #148]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003c44:	2164      	movs	r1, #100	@ 0x64
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003c52:	601a      	str	r2, [r3, #0]
			SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config(id);
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f8de 	bl	8003e18 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config>
			break;
 8003c5c:	e01d      	b.n	8003c9a <BSP_SPI_Init+0x286>
		case RECEIVE_ONLY:
			hSPI[id].Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003c62:	2164      	movs	r1, #100	@ 0x64
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c70:	601a      	str	r2, [r3, #0]
			SPI_GPIO_RECEIVEONLY_config(id);
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f9b5 	bl	8003fe4 <SPI_GPIO_RECEIVEONLY_config>
			break;
 8003c7a:	e00e      	b.n	8003c9a <BSP_SPI_Init+0x286>
		case TRANSMIT_ONLY:
			hSPI[id].Init.Direction = SPI_DIRECTION_2LINES;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003c80:	2164      	movs	r1, #100	@ 0x64
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	3308      	adds	r3, #8
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
			SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config(id);
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f8c1 	bl	8003e18 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config>
			break;
 8003c96:	e000      	b.n	8003c9a <BSP_SPI_Init+0x286>
		default:
			break;
 8003c98:	bf00      	nop
	}
	HAL_SPI_Init(&hSPI[id]);
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2264      	movs	r2, #100	@ 0x64
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd8 <BSP_SPI_Init+0x2c4>)
 8003ca4:	4413      	add	r3, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f002 fd86 	bl	80067b8 <HAL_SPI_Init>
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40013000 	.word	0x40013000
 8003cb8:	40003800 	.word	0x40003800
 8003cbc:	40003c00 	.word	0x40003c00
 8003cc0:	0800c458 	.word	0x0800c458
 8003cc4:	0800d32c 	.word	0x0800d32c
 8003cc8:	0800c488 	.word	0x0800c488
 8003ccc:	0800c4a8 	.word	0x0800c4a8
 8003cd0:	0800c514 	.word	0x0800c514
 8003cd4:	0800c53c 	.word	0x0800c53c
 8003cd8:	20003acc 	.word	0x20003acc

08003cdc <SPI_GPIO_FULLDUPLEX_config>:

/**
 * @brief Fonction qui initialise les GPIOs pour une communication SPI en Full Duplex
 * @param SPI_id: SPI1_ID, SPI2_ID ou SPI3_ID
 */
void SPI_GPIO_FULLDUPLEX_config(SPI_ID_e SPI_id){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	@ 0x30
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
	switch (SPI_id) {
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d066      	beq.n	8003dba <SPI_GPIO_FULLDUPLEX_config+0xde>
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	f300 8087 	bgt.w	8003e00 <SPI_GPIO_FULLDUPLEX_config+0x124>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <SPI_GPIO_FULLDUPLEX_config+0x20>
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d024      	beq.n	8003d44 <SPI_GPIO_FULLDUPLEX_config+0x68>
			PB5     ------> SPI3_MOSI
			*/
			BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
			break;
		default:
			break;
 8003cfa:	e081      	b.n	8003e00 <SPI_GPIO_FULLDUPLEX_config+0x124>
			__HAL_RCC_SPI1_CLK_ENABLE();
 8003cfc:	4b43      	ldr	r3, [pc, #268]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d00:	4a42      	ldr	r2, [pc, #264]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d06:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d08:	4b40      	ldr	r3, [pc, #256]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d14:	4b3d      	ldr	r3, [pc, #244]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d18:	4a3c      	ldr	r2, [pc, #240]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d20:	4b3a      	ldr	r3, [pc, #232]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	623b      	str	r3, [r7, #32]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
			BSP_GPIO_pin_config(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI1);
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	2303      	movs	r3, #3
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2300      	movs	r3, #0
 8003d36:	2202      	movs	r2, #2
 8003d38:	21e0      	movs	r1, #224	@ 0xe0
 8003d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d3e:	f7ff fe3b 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8003d42:	e05e      	b.n	8003e02 <SPI_GPIO_FULLDUPLEX_config+0x126>
		    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d44:	4b31      	ldr	r3, [pc, #196]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	4a30      	ldr	r2, [pc, #192]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d50:	4b2e      	ldr	r3, [pc, #184]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
		    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d60:	4a2a      	ldr	r2, [pc, #168]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d62:	f043 0320 	orr.w	r3, r3, #32
 8003d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d68:	4b28      	ldr	r3, [pc, #160]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	69bb      	ldr	r3, [r7, #24]
		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d74:	4b25      	ldr	r3, [pc, #148]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d78:	4a24      	ldr	r2, [pc, #144]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d80:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
		    BSP_GPIO_pin_config(GPIOF, GPIO_PIN_1, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI2);
 8003d8c:	2305      	movs	r3, #5
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	2303      	movs	r3, #3
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	2300      	movs	r3, #0
 8003d96:	2202      	movs	r2, #2
 8003d98:	2102      	movs	r1, #2
 8003d9a:	481d      	ldr	r0, [pc, #116]	@ (8003e10 <SPI_GPIO_FULLDUPLEX_config+0x134>)
 8003d9c:	f7ff fe0c 	bl	80039b8 <BSP_GPIO_pin_config>
		    BSP_GPIO_pin_config(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI2);
 8003da0:	2305      	movs	r3, #5
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	2303      	movs	r3, #3
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	2202      	movs	r2, #2
 8003dac:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8003db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003db4:	f7ff fe00 	bl	80039b8 <BSP_GPIO_pin_config>
		    break;
 8003db8:	e023      	b.n	8003e02 <SPI_GPIO_FULLDUPLEX_config+0x126>
			__HAL_RCC_SPI3_CLK_ENABLE();
 8003dba:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbe:	4a13      	ldr	r2, [pc, #76]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc6:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	693b      	ldr	r3, [r7, #16]
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <SPI_GPIO_FULLDUPLEX_config+0x130>)
 8003de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
			BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
 8003dea:	2306      	movs	r3, #6
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2303      	movs	r3, #3
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	2202      	movs	r2, #2
 8003df6:	2138      	movs	r1, #56	@ 0x38
 8003df8:	4806      	ldr	r0, [pc, #24]	@ (8003e14 <SPI_GPIO_FULLDUPLEX_config+0x138>)
 8003dfa:	f7ff fddd 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8003dfe:	e000      	b.n	8003e02 <SPI_GPIO_FULLDUPLEX_config+0x126>
			break;
 8003e00:	bf00      	nop
	}
}
 8003e02:	bf00      	nop
 8003e04:	3728      	adds	r7, #40	@ 0x28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	48001400 	.word	0x48001400
 8003e14:	48000400 	.word	0x48000400

08003e18 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config>:

/**
 * @brief Fonction qui initialise les GPIOs pour une communication SPI en Half Duplex ou Transmit Only
 * @param SPI_id: SPI1_ID, SPI2_ID ou SPI3_ID
 */
void SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config(SPI_ID_e SPI_id){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08c      	sub	sp, #48	@ 0x30
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
	switch (SPI_id) {
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	f000 8096 	beq.w	8003f56 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x13e>
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	f300 80cc 	bgt.w	8003fc8 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1b0>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x22>
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d03b      	beq.n	8003eb0 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x98>
				BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
			else
				BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
			break;
		default:
			break;
 8003e38:	e0c6      	b.n	8003fc8 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1b0>
			__HAL_RCC_SPI1_CLK_ENABLE();
 8003e3a:	4b66      	ldr	r3, [pc, #408]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3e:	4a65      	ldr	r2, [pc, #404]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003e40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e44:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e46:	4b63      	ldr	r3, [pc, #396]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8003e52:	4b60      	ldr	r3, [pc, #384]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e56:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	6a3b      	ldr	r3, [r7, #32]
			if (hSPI[SPI_id].Init.Mode == SPI_MODE_MASTER)
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd8 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1c0>)
 8003e6e:	2164      	movs	r1, #100	@ 0x64
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e7e:	d10b      	bne.n	8003e98 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x80>
				BSP_GPIO_pin_config(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI1);
 8003e80:	2305      	movs	r3, #5
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	2303      	movs	r3, #3
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	21a0      	movs	r1, #160	@ 0xa0
 8003e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e92:	f7ff fd91 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8003e96:	e098      	b.n	8003fca <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1b2>
				BSP_GPIO_pin_config(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI1);
 8003e98:	2305      	movs	r3, #5
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	2160      	movs	r1, #96	@ 0x60
 8003ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003eaa:	f7ff fd85 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8003eae:	e08c      	b.n	8003fca <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1b2>
			__HAL_RCC_SPI2_CLK_ENABLE();
 8003eb0:	4b48      	ldr	r3, [pc, #288]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb4:	4a47      	ldr	r2, [pc, #284]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003eb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ebc:	4b45      	ldr	r3, [pc, #276]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
			__HAL_RCC_GPIOF_CLK_ENABLE();
 8003ec8:	4b42      	ldr	r3, [pc, #264]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ecc:	4a41      	ldr	r2, [pc, #260]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003ece:	f043 0320 	orr.w	r3, r3, #32
 8003ed2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	69bb      	ldr	r3, [r7, #24]
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee4:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eec:	4b39      	ldr	r3, [pc, #228]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697b      	ldr	r3, [r7, #20]
		    BSP_GPIO_pin_config(GPIOF, GPIO_PIN_1, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI2);
 8003ef8:	2305      	movs	r3, #5
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	2303      	movs	r3, #3
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	2300      	movs	r3, #0
 8003f02:	2202      	movs	r2, #2
 8003f04:	2102      	movs	r1, #2
 8003f06:	4835      	ldr	r0, [pc, #212]	@ (8003fdc <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1c4>)
 8003f08:	f7ff fd56 	bl	80039b8 <BSP_GPIO_pin_config>
			if (hSPI[SPI_id].Init.Mode == SPI_MODE_MASTER)
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	4a32      	ldr	r2, [pc, #200]	@ (8003fd8 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1c0>)
 8003f10:	2164      	movs	r1, #100	@ 0x64
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3304      	adds	r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f20:	d10c      	bne.n	8003f3c <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x124>
			    BSP_GPIO_pin_config(GPIOA, GPIO_PIN_11, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI2);
 8003f22:	2305      	movs	r3, #5
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	2303      	movs	r3, #3
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f36:	f7ff fd3f 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8003f3a:	e046      	b.n	8003fca <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1b2>
			    BSP_GPIO_pin_config(GPIOA, GPIO_PIN_10, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI2);
 8003f3c:	2305      	movs	r3, #5
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	2303      	movs	r3, #3
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	2202      	movs	r2, #2
 8003f48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f50:	f7ff fd32 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8003f54:	e039      	b.n	8003fca <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1b2>
			__HAL_RCC_SPI3_CLK_ENABLE();
 8003f56:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f62:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6e:	4b19      	ldr	r3, [pc, #100]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	4a18      	ldr	r2, [pc, #96]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f7a:	4b16      	ldr	r3, [pc, #88]	@ (8003fd4 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1bc>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
			if (hSPI[SPI_id].Init.Mode == SPI_MODE_MASTER)
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	4a13      	ldr	r2, [pc, #76]	@ (8003fd8 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1c0>)
 8003f8a:	2164      	movs	r1, #100	@ 0x64
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	3304      	adds	r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f9a:	d10a      	bne.n	8003fb2 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x19a>
				BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
 8003f9c:	2306      	movs	r3, #6
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	2128      	movs	r1, #40	@ 0x28
 8003faa:	480d      	ldr	r0, [pc, #52]	@ (8003fe0 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1c8>)
 8003fac:	f7ff fd04 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8003fb0:	e00b      	b.n	8003fca <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1b2>
				BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
 8003fb2:	2306      	movs	r3, #6
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	2118      	movs	r1, #24
 8003fc0:	4807      	ldr	r0, [pc, #28]	@ (8003fe0 <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1c8>)
 8003fc2:	f7ff fcf9 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8003fc6:	e000      	b.n	8003fca <SPI_GPIO_HALFDUPLEX_or_TRANSMITONLY_config+0x1b2>
			break;
 8003fc8:	bf00      	nop
	}
}
 8003fca:	bf00      	nop
 8003fcc:	3728      	adds	r7, #40	@ 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	20003acc 	.word	0x20003acc
 8003fdc:	48001400 	.word	0x48001400
 8003fe0:	48000400 	.word	0x48000400

08003fe4 <SPI_GPIO_RECEIVEONLY_config>:

/**
 * @brief Fonction qui initialise les GPIOs pour une communication SPI en mode Receive Only (tout est dans le nom)
 * @param SPI_id: SPI1_ID, SPI2_ID ou SPI3_ID
 */
void SPI_GPIO_RECEIVEONLY_config(SPI_ID_e SPI_id){
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	@ 0x30
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
	switch (SPI_id) {
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	f000 8096 	beq.w	8004122 <SPI_GPIO_RECEIVEONLY_config+0x13e>
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	f300 80cc 	bgt.w	8004194 <SPI_GPIO_RECEIVEONLY_config+0x1b0>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <SPI_GPIO_RECEIVEONLY_config+0x22>
 8004000:	2b01      	cmp	r3, #1
 8004002:	d03b      	beq.n	800407c <SPI_GPIO_RECEIVEONLY_config+0x98>
				BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
			else
				BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
			break;
		default:
			break;
 8004004:	e0c6      	b.n	8004194 <SPI_GPIO_RECEIVEONLY_config+0x1b0>
			__HAL_RCC_SPI1_CLK_ENABLE();
 8004006:	4b66      	ldr	r3, [pc, #408]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400a:	4a65      	ldr	r2, [pc, #404]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 800400c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004010:	6613      	str	r3, [r2, #96]	@ 0x60
 8004012:	4b63      	ldr	r3, [pc, #396]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
			__HAL_RCC_GPIOA_CLK_ENABLE();
 800401e:	4b60      	ldr	r3, [pc, #384]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004022:	4a5f      	ldr	r2, [pc, #380]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800402a:	4b5d      	ldr	r3, [pc, #372]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	6a3b      	ldr	r3, [r7, #32]
			if (hSPI[SPI_id].Init.Mode == SPI_MODE_MASTER)
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	4a5a      	ldr	r2, [pc, #360]	@ (80041a4 <SPI_GPIO_RECEIVEONLY_config+0x1c0>)
 800403a:	2164      	movs	r1, #100	@ 0x64
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	3304      	adds	r3, #4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800404a:	d10b      	bne.n	8004064 <SPI_GPIO_RECEIVEONLY_config+0x80>
				BSP_GPIO_pin_config(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI1);
 800404c:	2305      	movs	r3, #5
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	2303      	movs	r3, #3
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2300      	movs	r3, #0
 8004056:	2202      	movs	r2, #2
 8004058:	2160      	movs	r1, #96	@ 0x60
 800405a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800405e:	f7ff fcab 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8004062:	e098      	b.n	8004196 <SPI_GPIO_RECEIVEONLY_config+0x1b2>
				BSP_GPIO_pin_config(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI1);
 8004064:	2305      	movs	r3, #5
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	2303      	movs	r3, #3
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	2202      	movs	r2, #2
 8004070:	21a0      	movs	r1, #160	@ 0xa0
 8004072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004076:	f7ff fc9f 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 800407a:	e08c      	b.n	8004196 <SPI_GPIO_RECEIVEONLY_config+0x1b2>
			__HAL_RCC_SPI2_CLK_ENABLE();
 800407c:	4b48      	ldr	r3, [pc, #288]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	4a47      	ldr	r2, [pc, #284]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004086:	6593      	str	r3, [r2, #88]	@ 0x58
 8004088:	4b45      	ldr	r3, [pc, #276]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	69fb      	ldr	r3, [r7, #28]
			__HAL_RCC_GPIOF_CLK_ENABLE();
 8004094:	4b42      	ldr	r3, [pc, #264]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004098:	4a41      	ldr	r2, [pc, #260]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 800409a:	f043 0320 	orr.w	r3, r3, #32
 800409e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040a0:	4b3f      	ldr	r3, [pc, #252]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 80040a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	69bb      	ldr	r3, [r7, #24]
			__HAL_RCC_GPIOA_CLK_ENABLE();
 80040ac:	4b3c      	ldr	r3, [pc, #240]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 80040ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b0:	4a3b      	ldr	r2, [pc, #236]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040b8:	4b39      	ldr	r3, [pc, #228]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 80040ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	697b      	ldr	r3, [r7, #20]
			BSP_GPIO_pin_config(GPIOF, GPIO_PIN_1, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI2);
 80040c4:	2305      	movs	r3, #5
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	2303      	movs	r3, #3
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2300      	movs	r3, #0
 80040ce:	2202      	movs	r2, #2
 80040d0:	2102      	movs	r1, #2
 80040d2:	4835      	ldr	r0, [pc, #212]	@ (80041a8 <SPI_GPIO_RECEIVEONLY_config+0x1c4>)
 80040d4:	f7ff fc70 	bl	80039b8 <BSP_GPIO_pin_config>
			if (hSPI[SPI_id].Init.Mode == SPI_MODE_MASTER)
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	4a32      	ldr	r2, [pc, #200]	@ (80041a4 <SPI_GPIO_RECEIVEONLY_config+0x1c0>)
 80040dc:	2164      	movs	r1, #100	@ 0x64
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ec:	d10c      	bne.n	8004108 <SPI_GPIO_RECEIVEONLY_config+0x124>
				BSP_GPIO_pin_config(GPIOA, GPIO_PIN_10, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI2);
 80040ee:	2305      	movs	r3, #5
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	2303      	movs	r3, #3
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2300      	movs	r3, #0
 80040f8:	2202      	movs	r2, #2
 80040fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004102:	f7ff fc59 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8004106:	e046      	b.n	8004196 <SPI_GPIO_RECEIVEONLY_config+0x1b2>
				BSP_GPIO_pin_config(GPIOA, GPIO_PIN_11, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF5_SPI2);
 8004108:	2305      	movs	r3, #5
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	2303      	movs	r3, #3
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	2202      	movs	r2, #2
 8004114:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800411c:	f7ff fc4c 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8004120:	e039      	b.n	8004196 <SPI_GPIO_RECEIVEONLY_config+0x1b2>
			__HAL_RCC_SPI3_CLK_ENABLE();
 8004122:	4b1f      	ldr	r3, [pc, #124]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	4a1e      	ldr	r2, [pc, #120]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800412c:	6593      	str	r3, [r2, #88]	@ 0x58
 800412e:	4b1c      	ldr	r3, [pc, #112]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800413a:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 800413c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413e:	4a18      	ldr	r2, [pc, #96]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004146:	4b16      	ldr	r3, [pc, #88]	@ (80041a0 <SPI_GPIO_RECEIVEONLY_config+0x1bc>)
 8004148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
			if (hSPI[SPI_id].Init.Mode == SPI_MODE_MASTER)
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	4a13      	ldr	r2, [pc, #76]	@ (80041a4 <SPI_GPIO_RECEIVEONLY_config+0x1c0>)
 8004156:	2164      	movs	r1, #100	@ 0x64
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3304      	adds	r3, #4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004166:	d10a      	bne.n	800417e <SPI_GPIO_RECEIVEONLY_config+0x19a>
				BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
 8004168:	2306      	movs	r3, #6
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	2303      	movs	r3, #3
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	2300      	movs	r3, #0
 8004172:	2202      	movs	r2, #2
 8004174:	2118      	movs	r1, #24
 8004176:	480d      	ldr	r0, [pc, #52]	@ (80041ac <SPI_GPIO_RECEIVEONLY_config+0x1c8>)
 8004178:	f7ff fc1e 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 800417c:	e00b      	b.n	8004196 <SPI_GPIO_RECEIVEONLY_config+0x1b2>
				BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF6_SPI3);
 800417e:	2306      	movs	r3, #6
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2303      	movs	r3, #3
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2300      	movs	r3, #0
 8004188:	2202      	movs	r2, #2
 800418a:	2128      	movs	r1, #40	@ 0x28
 800418c:	4807      	ldr	r0, [pc, #28]	@ (80041ac <SPI_GPIO_RECEIVEONLY_config+0x1c8>)
 800418e:	f7ff fc13 	bl	80039b8 <BSP_GPIO_pin_config>
			break;
 8004192:	e000      	b.n	8004196 <SPI_GPIO_RECEIVEONLY_config+0x1b2>
			break;
 8004194:	bf00      	nop
	}
}
 8004196:	bf00      	nop
 8004198:	3728      	adds	r7, #40	@ 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000
 80041a4:	20003acc 	.word	0x20003acc
 80041a8:	48001400 	.word	0x48001400
 80041ac:	48000400 	.word	0x48000400

080041b0 <BSP_SPI_ReadNoRegister>:
 * @brief Cette fonction sert � recevoir une donn�e sur l'un des bus SPI.
 * @param SPIx: est le SPI � lire.
 * @return Cette fonction retourne la donn�e lue sur le SPI choisi
 */
uint8_t BSP_SPI_ReadNoRegister(SPI_TypeDef* SPIx)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	uint8_t data;
	assert(SPIx == SPI1 || SPIx == SPI2 || SPIx == SPI3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a19      	ldr	r2, [pc, #100]	@ (8004220 <BSP_SPI_ReadNoRegister+0x70>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <BSP_SPI_ReadNoRegister+0x2e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a18      	ldr	r2, [pc, #96]	@ (8004224 <BSP_SPI_ReadNoRegister+0x74>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00a      	beq.n	80041de <BSP_SPI_ReadNoRegister+0x2e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a17      	ldr	r2, [pc, #92]	@ (8004228 <BSP_SPI_ReadNoRegister+0x78>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d006      	beq.n	80041de <BSP_SPI_ReadNoRegister+0x2e>
 80041d0:	4b16      	ldr	r3, [pc, #88]	@ (800422c <BSP_SPI_ReadNoRegister+0x7c>)
 80041d2:	4a17      	ldr	r2, [pc, #92]	@ (8004230 <BSP_SPI_ReadNoRegister+0x80>)
 80041d4:	f240 111d 	movw	r1, #285	@ 0x11d
 80041d8:	4816      	ldr	r0, [pc, #88]	@ (8004234 <BSP_SPI_ReadNoRegister+0x84>)
 80041da:	f005 fb1f 	bl	800981c <__assert_func>
	SPI_ID_e id = ((SPIx == SPI1)?SPI1_ID:(SPIx == SPI2)?SPI2_ID:SPI3_ID);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a0f      	ldr	r2, [pc, #60]	@ (8004220 <BSP_SPI_ReadNoRegister+0x70>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <BSP_SPI_ReadNoRegister+0x46>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004224 <BSP_SPI_ReadNoRegister+0x74>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <BSP_SPI_ReadNoRegister+0x42>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e002      	b.n	80041f8 <BSP_SPI_ReadNoRegister+0x48>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e000      	b.n	80041f8 <BSP_SPI_ReadNoRegister+0x48>
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
	data = 0x00;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Receive(&hSPI[id],&data,1,100);
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2264      	movs	r2, #100	@ 0x64
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	4a0c      	ldr	r2, [pc, #48]	@ (8004238 <BSP_SPI_ReadNoRegister+0x88>)
 8004208:	1898      	adds	r0, r3, r2
 800420a:	f107 010e 	add.w	r1, r7, #14
 800420e:	2364      	movs	r3, #100	@ 0x64
 8004210:	2201      	movs	r2, #1
 8004212:	f002 fcfb 	bl	8006c0c <HAL_SPI_Receive>
	return data;
 8004216:	7bbb      	ldrb	r3, [r7, #14]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40013000 	.word	0x40013000
 8004224:	40003800 	.word	0x40003800
 8004228:	40003c00 	.word	0x40003c00
 800422c:	0800c458 	.word	0x0800c458
 8004230:	0800d33c 	.word	0x0800d33c
 8004234:	0800c488 	.word	0x0800c488
 8004238:	20003acc 	.word	0x20003acc

0800423c <BSP_SPI_WriteNoRegister>:
 * @brief Cette fonction sert � envoyer une donn�e sur l'un des bus SPI.
 * @param SPIx: le SPI sur lequel envoyer la donn�e.
 * @param data: la donn�e � envoyer.
 */
void BSP_SPI_WriteNoRegister(SPI_TypeDef* SPIx, uint8_t data)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
	assert(SPIx == SPI1 || SPIx == SPI2 || SPIx == SPI3);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a17      	ldr	r2, [pc, #92]	@ (80042a8 <BSP_SPI_WriteNoRegister+0x6c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <BSP_SPI_WriteNoRegister+0x32>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <BSP_SPI_WriteNoRegister+0x70>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00a      	beq.n	800426e <BSP_SPI_WriteNoRegister+0x32>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a15      	ldr	r2, [pc, #84]	@ (80042b0 <BSP_SPI_WriteNoRegister+0x74>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d006      	beq.n	800426e <BSP_SPI_WriteNoRegister+0x32>
 8004260:	4b14      	ldr	r3, [pc, #80]	@ (80042b4 <BSP_SPI_WriteNoRegister+0x78>)
 8004262:	4a15      	ldr	r2, [pc, #84]	@ (80042b8 <BSP_SPI_WriteNoRegister+0x7c>)
 8004264:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8004268:	4814      	ldr	r0, [pc, #80]	@ (80042bc <BSP_SPI_WriteNoRegister+0x80>)
 800426a:	f005 fad7 	bl	800981c <__assert_func>
	SPI_ID_e id = ((SPIx == SPI1)?SPI1_ID:(SPIx == SPI2)?SPI2_ID:SPI3_ID);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a0d      	ldr	r2, [pc, #52]	@ (80042a8 <BSP_SPI_WriteNoRegister+0x6c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <BSP_SPI_WriteNoRegister+0x4a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a0c      	ldr	r2, [pc, #48]	@ (80042ac <BSP_SPI_WriteNoRegister+0x70>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <BSP_SPI_WriteNoRegister+0x46>
 800427e:	2301      	movs	r3, #1
 8004280:	e002      	b.n	8004288 <BSP_SPI_WriteNoRegister+0x4c>
 8004282:	2302      	movs	r3, #2
 8004284:	e000      	b.n	8004288 <BSP_SPI_WriteNoRegister+0x4c>
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hSPI[id],&data,1,100);
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2264      	movs	r2, #100	@ 0x64
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	4a0b      	ldr	r2, [pc, #44]	@ (80042c0 <BSP_SPI_WriteNoRegister+0x84>)
 8004294:	1898      	adds	r0, r3, r2
 8004296:	1cf9      	adds	r1, r7, #3
 8004298:	2364      	movs	r3, #100	@ 0x64
 800429a:	2201      	movs	r2, #1
 800429c:	f002 fb41 	bl	8006922 <HAL_SPI_Transmit>
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40013000 	.word	0x40013000
 80042ac:	40003800 	.word	0x40003800
 80042b0:	40003c00 	.word	0x40003c00
 80042b4:	0800c458 	.word	0x0800c458
 80042b8:	0800d354 	.word	0x0800d354
 80042bc:	0800c488 	.word	0x0800c488
 80042c0:	20003acc 	.word	0x20003acc

080042c4 <BSP_SPI_WriteMultiNoRegister>:
 * @param SPIx: le SPI sur lequel envoyer les donn�es.
 * @param *data: la donn�e � envoyer.
 * @param count: le nombre de donn�es � envoyer.
 */
void BSP_SPI_WriteMultiNoRegister(SPI_TypeDef* SPIx, uint8_t* data, uint16_t count)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
	assert(SPIx == SPI1 || SPIx == SPI2 || SPIx == SPI3);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a17      	ldr	r2, [pc, #92]	@ (8004334 <BSP_SPI_WriteMultiNoRegister+0x70>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00e      	beq.n	80042f8 <BSP_SPI_WriteMultiNoRegister+0x34>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a16      	ldr	r2, [pc, #88]	@ (8004338 <BSP_SPI_WriteMultiNoRegister+0x74>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00a      	beq.n	80042f8 <BSP_SPI_WriteMultiNoRegister+0x34>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a15      	ldr	r2, [pc, #84]	@ (800433c <BSP_SPI_WriteMultiNoRegister+0x78>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d006      	beq.n	80042f8 <BSP_SPI_WriteMultiNoRegister+0x34>
 80042ea:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <BSP_SPI_WriteMultiNoRegister+0x7c>)
 80042ec:	4a15      	ldr	r2, [pc, #84]	@ (8004344 <BSP_SPI_WriteMultiNoRegister+0x80>)
 80042ee:	f240 1145 	movw	r1, #325	@ 0x145
 80042f2:	4815      	ldr	r0, [pc, #84]	@ (8004348 <BSP_SPI_WriteMultiNoRegister+0x84>)
 80042f4:	f005 fa92 	bl	800981c <__assert_func>
	SPI_ID_e id = ((SPIx == SPI1)?SPI1_ID:(SPIx == SPI2)?SPI2_ID:SPI3_ID);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <BSP_SPI_WriteMultiNoRegister+0x70>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <BSP_SPI_WriteMultiNoRegister+0x4c>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4a0d      	ldr	r2, [pc, #52]	@ (8004338 <BSP_SPI_WriteMultiNoRegister+0x74>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <BSP_SPI_WriteMultiNoRegister+0x48>
 8004308:	2301      	movs	r3, #1
 800430a:	e002      	b.n	8004312 <BSP_SPI_WriteMultiNoRegister+0x4e>
 800430c:	2302      	movs	r3, #2
 800430e:	e000      	b.n	8004312 <BSP_SPI_WriteMultiNoRegister+0x4e>
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(&hSPI[id],data,count,100);
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	2264      	movs	r2, #100	@ 0x64
 8004318:	fb02 f303 	mul.w	r3, r2, r3
 800431c:	4a0b      	ldr	r2, [pc, #44]	@ (800434c <BSP_SPI_WriteMultiNoRegister+0x88>)
 800431e:	1898      	adds	r0, r3, r2
 8004320:	88fa      	ldrh	r2, [r7, #6]
 8004322:	2364      	movs	r3, #100	@ 0x64
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	f002 fafc 	bl	8006922 <HAL_SPI_Transmit>
}
 800432a:	bf00      	nop
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40013000 	.word	0x40013000
 8004338:	40003800 	.word	0x40003800
 800433c:	40003c00 	.word	0x40003c00
 8004340:	0800c458 	.word	0x0800c458
 8004344:	0800d36c 	.word	0x0800d36c
 8004348:	0800c488 	.word	0x0800c488
 800434c:	20003acc 	.word	0x20003acc

08004350 <BSP_SPI_SetDataSize>:
 * @param DataSize est la taille des donn�e :
 * 						SPI_DATASIZE_8BIT  pour configurer le SPI en mode 8-bits
 * 						SPI_DATASIZE_16BIT pour configurer le SPI en mode 16-bits
 */
void BSP_SPI_SetDataSize(SPI_TypeDef* SPIx, uint32_t DataSize)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	SPI_ID_e id = ((SPIx == SPI2)?SPI2_ID:SPI1_ID);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a17      	ldr	r2, [pc, #92]	@ (80043bc <BSP_SPI_SetDataSize+0x6c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	73fb      	strb	r3, [r7, #15]

	/* Disable SPI first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	601a      	str	r2, [r3, #0]

	/* Set proper value */
	SPIx->CR2 &= ~SPI_CR2_DS_Msk;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]
	hSPI[id].Init.DataSize = DataSize;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	4a0e      	ldr	r2, [pc, #56]	@ (80043c0 <BSP_SPI_SetDataSize+0x70>)
 8004386:	2164      	movs	r1, #100	@ 0x64
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	330c      	adds	r3, #12
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	601a      	str	r2, [r3, #0]
	SPIx->CR2 |= (DataSize & SPI_CR2_DS_Msk);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	605a      	str	r2, [r3, #4]

	/* Enable SPI back */
	SPIx->CR1 |= SPI_CR1_SPE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40003800 	.word	0x40003800
 80043c0:	20003acc 	.word	0x20003acc

080043c4 <SPI_Cmd>:
 * @brief Permet d'envoyer une commande sur le bus SPI.
 * @param SPIx le SPI dont sur lequel on veut envoyer la commande.
 * @param NewState etat a envoyer comme commande au SPI
 */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <SPI_Cmd+0x20>
  {
    /* Enable the selected SPI peripheral */
	 SPIx->CR1 |= SPI_CR1_SPE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
	 SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80043e2:	e006      	b.n	80043f2 <SPI_Cmd+0x2e>
	 SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 80043ec:	4013      	ands	r3, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <BSP_SPI_setBaudRate>:
 * @param SPIx le SPI dont on veut modifier le baudRate.
 * @param BaudRate choisi, voir SPI_BAUDRATEPRESCALER_x o� x vaut 2, 4, 8, 16, 32, 64, 128, 256
 * @pre SPI_Init(SPIx) must be called before
 */
void BSP_SPI_setBaudRate(SPI_TypeDef* SPIx, uint16_t SPI_BaudRatePrescaler)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
	assert(SPIx == SPI1 || SPIx == SPI2 || SPIx == SPI3);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a1f      	ldr	r2, [pc, #124]	@ (800448c <BSP_SPI_setBaudRate+0x8c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <BSP_SPI_setBaudRate+0x32>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1e      	ldr	r2, [pc, #120]	@ (8004490 <BSP_SPI_setBaudRate+0x90>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00a      	beq.n	8004432 <BSP_SPI_setBaudRate+0x32>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a1d      	ldr	r2, [pc, #116]	@ (8004494 <BSP_SPI_setBaudRate+0x94>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d006      	beq.n	8004432 <BSP_SPI_setBaudRate+0x32>
 8004424:	4b1c      	ldr	r3, [pc, #112]	@ (8004498 <BSP_SPI_setBaudRate+0x98>)
 8004426:	4a1d      	ldr	r2, [pc, #116]	@ (800449c <BSP_SPI_setBaudRate+0x9c>)
 8004428:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800442c:	481c      	ldr	r0, [pc, #112]	@ (80044a0 <BSP_SPI_setBaudRate+0xa0>)
 800442e:	f005 f9f5 	bl	800981c <__assert_func>
	SPI_ID_e id = ((SPIx == SPI1)?SPI1_ID:(SPIx == SPI2)?SPI2_ID:SPI3_ID);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a15      	ldr	r2, [pc, #84]	@ (800448c <BSP_SPI_setBaudRate+0x8c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <BSP_SPI_setBaudRate+0x4a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <BSP_SPI_setBaudRate+0x90>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <BSP_SPI_setBaudRate+0x46>
 8004442:	2301      	movs	r3, #1
 8004444:	e002      	b.n	800444c <BSP_SPI_setBaudRate+0x4c>
 8004446:	2302      	movs	r3, #2
 8004448:	e000      	b.n	800444c <BSP_SPI_setBaudRate+0x4c>
 800444a:	2300      	movs	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]
	SPI_Cmd(SPIx, DISABLE);
 800444e:	2100      	movs	r1, #0
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ffb7 	bl	80043c4 <SPI_Cmd>
	hSPI[id].Init.BaudRatePrescaler = SPI_BaudRatePrescaler;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	887a      	ldrh	r2, [r7, #2]
 800445a:	4912      	ldr	r1, [pc, #72]	@ (80044a4 <BSP_SPI_setBaudRate+0xa4>)
 800445c:	2064      	movs	r0, #100	@ 0x64
 800445e:	fb00 f303 	mul.w	r3, r0, r3
 8004462:	440b      	add	r3, r1
 8004464:	331c      	adds	r3, #28
 8004466:	601a      	str	r2, [r3, #0]
	HAL_SPI_Init(&hSPI[id]);
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2264      	movs	r2, #100	@ 0x64
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	4a0c      	ldr	r2, [pc, #48]	@ (80044a4 <BSP_SPI_setBaudRate+0xa4>)
 8004472:	4413      	add	r3, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f002 f99f 	bl	80067b8 <HAL_SPI_Init>
	SPI_Cmd(SPIx, ENABLE);
 800447a:	2101      	movs	r1, #1
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ffa1 	bl	80043c4 <SPI_Cmd>
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40013000 	.word	0x40013000
 8004490:	40003800 	.word	0x40003800
 8004494:	40003c00 	.word	0x40003c00
 8004498:	0800c458 	.word	0x0800c458
 800449c:	0800d38c 	.word	0x0800d38c
 80044a0:	0800c488 	.word	0x0800c488
 80044a4:	20003acc 	.word	0x20003acc

080044a8 <BSP_SPI_getBaudrate>:

uint32_t BSP_SPI_getBaudrate(SPI_TypeDef* SPIx)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	assert(SPIx == SPI1 || SPIx == SPI2 || SPIx == SPI3);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a16      	ldr	r2, [pc, #88]	@ (800450c <BSP_SPI_getBaudrate+0x64>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <BSP_SPI_getBaudrate+0x2e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a15      	ldr	r2, [pc, #84]	@ (8004510 <BSP_SPI_getBaudrate+0x68>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00a      	beq.n	80044d6 <BSP_SPI_getBaudrate+0x2e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a14      	ldr	r2, [pc, #80]	@ (8004514 <BSP_SPI_getBaudrate+0x6c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d006      	beq.n	80044d6 <BSP_SPI_getBaudrate+0x2e>
 80044c8:	4b13      	ldr	r3, [pc, #76]	@ (8004518 <BSP_SPI_getBaudrate+0x70>)
 80044ca:	4a14      	ldr	r2, [pc, #80]	@ (800451c <BSP_SPI_getBaudrate+0x74>)
 80044cc:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80044d0:	4813      	ldr	r0, [pc, #76]	@ (8004520 <BSP_SPI_getBaudrate+0x78>)
 80044d2:	f005 f9a3 	bl	800981c <__assert_func>
	SPI_ID_e id = ((SPIx == SPI1)?SPI1_ID:(SPIx == SPI2)?SPI2_ID:SPI3_ID);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a0c      	ldr	r2, [pc, #48]	@ (800450c <BSP_SPI_getBaudrate+0x64>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <BSP_SPI_getBaudrate+0x46>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004510 <BSP_SPI_getBaudrate+0x68>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <BSP_SPI_getBaudrate+0x42>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e002      	b.n	80044f0 <BSP_SPI_getBaudrate+0x48>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e000      	b.n	80044f0 <BSP_SPI_getBaudrate+0x48>
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
	return hSPI[id].Init.BaudRatePrescaler;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004524 <BSP_SPI_getBaudrate+0x7c>)
 80044f6:	2164      	movs	r1, #100	@ 0x64
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	331c      	adds	r3, #28
 8004500:	681b      	ldr	r3, [r3, #0]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40013000 	.word	0x40013000
 8004510:	40003800 	.word	0x40003800
 8004514:	40003c00 	.word	0x40003c00
 8004518:	0800c458 	.word	0x0800c458
 800451c:	0800d3a0 	.word	0x0800d3a0
 8004520:	0800c488 	.word	0x0800c488
 8004524:	20003acc 	.word	0x20003acc

08004528 <BSP_SYS_set_std_usart>:
/* Private function definitions ----------------------------------------------*/

/* Public function definitions -----------------------------------------------*/

void BSP_SYS_set_std_usart(uart_id_t in, uart_id_t out, uart_id_t err)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
 8004532:	460b      	mov	r3, r1
 8004534:	71bb      	strb	r3, [r7, #6]
 8004536:	4613      	mov	r3, r2
 8004538:	717b      	strb	r3, [r7, #5]
	uart_initialized = 0xE5E0E5E0;
 800453a:	4b09      	ldr	r3, [pc, #36]	@ (8004560 <BSP_SYS_set_std_usart+0x38>)
 800453c:	4a09      	ldr	r2, [pc, #36]	@ (8004564 <BSP_SYS_set_std_usart+0x3c>)
 800453e:	601a      	str	r2, [r3, #0]
	stdin_usart = in;
 8004540:	4a09      	ldr	r2, [pc, #36]	@ (8004568 <BSP_SYS_set_std_usart+0x40>)
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	7013      	strb	r3, [r2, #0]
	stdout_usart = out;
 8004546:	4a09      	ldr	r2, [pc, #36]	@ (800456c <BSP_SYS_set_std_usart+0x44>)
 8004548:	79bb      	ldrb	r3, [r7, #6]
 800454a:	7013      	strb	r3, [r2, #0]
	stderr_usart = err;
 800454c:	4a08      	ldr	r2, [pc, #32]	@ (8004570 <BSP_SYS_set_std_usart+0x48>)
 800454e:	797b      	ldrb	r3, [r7, #5]
 8004550:	7013      	strb	r3, [r2, #0]
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20003bfc 	.word	0x20003bfc
 8004564:	e5e0e5e0 	.word	0xe5e0e5e0
 8004568:	20003bfa 	.word	0x20003bfa
 800456c:	20003bf8 	.word	0x20003bf8
 8004570:	20003bf9 	.word	0x20003bf9

08004574 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0


  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457a:	4b0f      	ldr	r3, [pc, #60]	@ (80045b8 <HAL_MspInit+0x44>)
 800457c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457e:	4a0e      	ldr	r2, [pc, #56]	@ (80045b8 <HAL_MspInit+0x44>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6613      	str	r3, [r2, #96]	@ 0x60
 8004586:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <HAL_MspInit+0x44>)
 8004588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_MspInit+0x44>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004596:	4a08      	ldr	r2, [pc, #32]	@ (80045b8 <HAL_MspInit+0x44>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459c:	6593      	str	r3, [r2, #88]	@ 0x58
 800459e:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_MspInit+0x44>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]

  /* Configure the system clock */
  SystemClock_Config();
 80045aa:	f000 f807 	bl	80045bc <SystemClock_Config>

  /* System interrupt init*/


}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000

080045bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b094      	sub	sp, #80	@ 0x50
 80045c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045c2:	f107 0318 	add.w	r3, r7, #24
 80045c6:	2238      	movs	r2, #56	@ 0x38
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f005 ff65 	bl	800a49a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80045de:	2000      	movs	r0, #0
 80045e0:	f001 f918 	bl	8005814 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80045e4:	2302      	movs	r3, #2
 80045e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045ee:	2340      	movs	r3, #64	@ 0x40
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045f2:	2302      	movs	r3, #2
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80045f6:	2302      	movs	r3, #2
 80045f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80045fa:	2304      	movs	r3, #4
 80045fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80045fe:	2355      	movs	r3, #85	@ 0x55
 8004600:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004602:	2302      	movs	r3, #2
 8004604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004606:	2302      	movs	r3, #2
 8004608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800460a:	2302      	movs	r3, #2
 800460c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800460e:	f107 0318 	add.w	r3, r7, #24
 8004612:	4618      	mov	r0, r3
 8004614:	f001 f9b2 	bl	800597c <HAL_RCC_OscConfig>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800461e:	f000 f89f 	bl	8004760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004622:	230f      	movs	r3, #15
 8004624:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004626:	2303      	movs	r3, #3
 8004628:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	2104      	movs	r1, #4
 800463a:	4618      	mov	r0, r3
 800463c:	f001 fcb0 	bl	8005fa0 <HAL_RCC_ClockConfig>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004646:	f000 f88b 	bl	8004760 <Error_Handler>
  }
}
 800464a:	bf00      	nop
 800464c:	3750      	adds	r7, #80	@ 0x50
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <_read>:
 * @param ptr
 * @param len
 * @return
 */
int _read(int file, char *ptr, int len)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
	int n;
	int num = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
	switch (file) {
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d125      	bne.n	80046b6 <_read+0x62>
		case STDIN_FILENO:
			for (n = 0; n < len; n++)
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	e01d      	b.n	80046ac <_read+0x58>
			{
				/*while ((stdin_usart->SR & USART_FLAG_RXNE) == (uint16_t)RESET);
				char c = (char)(stdin_usart->DR & (uint16_t)0x01FF);*/
				char c;
				while(!BSP_UART_data_ready(stdin_usart));	//Blocking
 8004670:	bf00      	nop
 8004672:	4b17      	ldr	r3, [pc, #92]	@ (80046d0 <_read+0x7c>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f9c2 	bl	8004a00 <BSP_UART_data_ready>
 800467c:	4603      	mov	r3, r0
 800467e:	f083 0301 	eor.w	r3, r3, #1
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f4      	bne.n	8004672 <_read+0x1e>
				c = BSP_UART_get_next_byte(stdin_usart);
 8004688:	4b11      	ldr	r3, [pc, #68]	@ (80046d0 <_read+0x7c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f000 f9d5 	bl	8004a3c <BSP_UART_get_next_byte>
 8004692:	4603      	mov	r3, r0
 8004694:	75fb      	strb	r3, [r7, #23]
				*ptr++ = c;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	60ba      	str	r2, [r7, #8]
 800469c:	7dfa      	ldrb	r2, [r7, #23]
 800469e:	701a      	strb	r2, [r3, #0]
				num++;
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	3301      	adds	r3, #1
 80046a4:	61bb      	str	r3, [r7, #24]
			for (n = 0; n < len; n++)
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3301      	adds	r3, #1
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	dbdd      	blt.n	8004670 <_read+0x1c>
			}
			break;
 80046b4:	e007      	b.n	80046c6 <_read+0x72>
		default:
			errno = EBADF;
 80046b6:	f005 ff43 	bl	800a540 <__errno>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2209      	movs	r2, #9
 80046be:	601a      	str	r2, [r3, #0]
			return -1;
 80046c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046c4:	e000      	b.n	80046c8 <_read+0x74>
	}
	return num;
 80046c6:	69bb      	ldr	r3, [r7, #24]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20003bfa 	.word	0x20003bfa

080046d4 <_write>:
 * @param ptr
 * @param len
 * @return
 */
int _write(int file, char *ptr, int len)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
	int n;
	switch (file) {
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d003      	beq.n	80046ee <_write+0x1a>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d014      	beq.n	8004716 <_write+0x42>
 80046ec:	e027      	b.n	800473e <_write+0x6a>
		case STDOUT_FILENO: /*stdout*/
			//UART_puts(stdout_usart,ptr, len);

			for (n = 0; n < len; n++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	e00b      	b.n	800470c <_write+0x38>
			{
#if TRACE
				trace_putchar(*ptr++);
#else
				BSP_UART_putc(stdout_usart,*ptr++);
 80046f4:	4b18      	ldr	r3, [pc, #96]	@ (8004758 <_write+0x84>)
 80046f6:	7818      	ldrb	r0, [r3, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	60ba      	str	r2, [r7, #8]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	f000 f9f9 	bl	8004af8 <BSP_UART_putc>
			for (n = 0; n < len; n++)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	3301      	adds	r3, #1
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	dbef      	blt.n	80046f4 <_write+0x20>
#endif
			}
			break;
 8004714:	e01b      	b.n	800474e <_write+0x7a>
		case STDERR_FILENO: /* stderr */
			for (n = 0; n < len; n++)
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e00b      	b.n	8004734 <_write+0x60>
				//while ((stderr_usart->SR & USART_FLAG_TC) == (uint16_t)RESET);
				//stderr_usart->DR = (*ptr++ & (uint16_t)0x01FF);
#if TRACE
				trace_putchar(*ptr++);
#else
				BSP_UART_putc(stderr_usart,*ptr++);
 800471c:	4b0f      	ldr	r3, [pc, #60]	@ (800475c <_write+0x88>)
 800471e:	7818      	ldrb	r0, [r3, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	60ba      	str	r2, [r7, #8]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	4619      	mov	r1, r3
 800472a:	f000 f9e5 	bl	8004af8 <BSP_UART_putc>
			for (n = 0; n < len; n++)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	3301      	adds	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	429a      	cmp	r2, r3
 800473a:	dbef      	blt.n	800471c <_write+0x48>
#endif
			}
			break;
 800473c:	e007      	b.n	800474e <_write+0x7a>
		default:
			errno = EBADF;
 800473e:	f005 feff 	bl	800a540 <__errno>
 8004742:	4603      	mov	r3, r0
 8004744:	2209      	movs	r2, #9
 8004746:	601a      	str	r2, [r3, #0]
			return -1;
 8004748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800474c:	e000      	b.n	8004750 <_write+0x7c>
	}
	return len;
 800474e:	687b      	ldr	r3, [r7, #4]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20003bf8 	.word	0x20003bf8
 800475c:	20003bf9 	.word	0x20003bf9

08004760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004764:	b672      	cpsid	i
}
 8004766:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <Error_Handler+0x8>

0800476c <BSP_systick_init>:
 * @brief Initialization function for high level Systick service
 *
 * @post The systick interruption priority is set and the callback function table is initialized
 */
void BSP_systick_init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 8004772:	2300      	movs	r3, #0
 8004774:	71fb      	strb	r3, [r7, #7]
 8004776:	e007      	b.n	8004788 <BSP_systick_init+0x1c>
		callback_functions[i] = NULL;
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	4a0b      	ldr	r2, [pc, #44]	@ (80047a8 <BSP_systick_init+0x3c>)
 800477c:	2100      	movs	r1, #0
 800477e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	3301      	adds	r3, #1
 8004786:	71fb      	strb	r3, [r7, #7]
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	2b0f      	cmp	r3, #15
 800478c:	d9f4      	bls.n	8004778 <BSP_systick_init+0xc>
	HAL_NVIC_SetPriority(SysTick_IRQn , 0,  0);
 800478e:	2200      	movs	r2, #0
 8004790:	2100      	movs	r1, #0
 8004792:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004796:	f000 fd96 	bl	80052c6 <HAL_NVIC_SetPriority>
	initialized = true;
 800479a:	4b04      	ldr	r3, [pc, #16]	@ (80047ac <BSP_systick_init+0x40>)
 800479c:	2201      	movs	r2, #1
 800479e:	701a      	strb	r2, [r3, #0]
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20003c00 	.word	0x20003c00
 80047ac:	20003c40 	.word	0x20003c40

080047b0 <BSP_systick_add_callback_function>:
 *
 * @param func the function to be called as callback
 * @return true if the function was added, false otherwise
 */
bool BSP_systick_add_callback_function(callback_fun_t func)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if(!initialized)
 80047b8:	4b11      	ldr	r3, [pc, #68]	@ (8004800 <BSP_systick_add_callback_function+0x50>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f083 0301 	eor.w	r3, r3, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <BSP_systick_add_callback_function+0x1a>
		BSP_systick_init();
 80047c6:	f7ff ffd1 	bl	800476c <BSP_systick_init>

	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
 80047ce:	e00f      	b.n	80047f0 <BSP_systick_add_callback_function+0x40>
	{
		if(!callback_functions[i])	//On a trouvé une place libre ?
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004804 <BSP_systick_add_callback_function+0x54>)
 80047d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <BSP_systick_add_callback_function+0x3a>
		{
			callback_functions[i] = func;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	4909      	ldr	r1, [pc, #36]	@ (8004804 <BSP_systick_add_callback_function+0x54>)
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			return true;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e006      	b.n	80047f8 <BSP_systick_add_callback_function+0x48>
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	3301      	adds	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b0f      	cmp	r3, #15
 80047f4:	d9ec      	bls.n	80047d0 <BSP_systick_add_callback_function+0x20>
		}
	}
	return false;	//Pas de place libre !
 80047f6:	2300      	movs	r3, #0

}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20003c40 	.word	0x20003c40
 8004804:	20003c00 	.word	0x20003c00

08004808 <SysTick_Handler>:
/**
 * @brief Interrupt function called every 1ms
 *
 */
void SysTick_Handler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
	/* Minimum interruption job for SysTick */
	HAL_IncTick();
 800480e:	f000 fc3f 	bl	8005090 <HAL_IncTick>
	/* Use of HAL_SYSTICK_IRQHandler() as been discouraged by ST and is not generated anymore by CubeMX */

	if(!initialized)
 8004812:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <SysTick_Handler+0x50>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	f083 0301 	eor.w	r3, r3, #1
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <SysTick_Handler+0x1c>
		BSP_systick_init();
 8004820:	f7ff ffa4 	bl	800476c <BSP_systick_init>

	/* Management of the callback functions */
	uint8_t i;
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 8004824:	2300      	movs	r3, #0
 8004826:	71fb      	strb	r3, [r7, #7]
 8004828:	e00d      	b.n	8004846 <SysTick_Handler+0x3e>
	{
		if(callback_functions[i])
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	4a0b      	ldr	r2, [pc, #44]	@ (800485c <SysTick_Handler+0x54>)
 800482e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d004      	beq.n	8004840 <SysTick_Handler+0x38>
			(*callback_functions[i])();		/* Function calls. */
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	4a08      	ldr	r2, [pc, #32]	@ (800485c <SysTick_Handler+0x54>)
 800483a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483e:	4798      	blx	r3
	for(i = 0; i<MAX_CALLBACK_FUNCTION_NB; i++)
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	3301      	adds	r3, #1
 8004844:	71fb      	strb	r3, [r7, #7]
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	2b0f      	cmp	r3, #15
 800484a:	d9ee      	bls.n	800482a <SysTick_Handler+0x22>
	}
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20003c40 	.word	0x20003c40
 800485c:	20003c00 	.word	0x20003c00

08004860 <TIMER1_user_handler_it>:
 * L'attribut weak indique à l'éditeur de liens, lors de la compilation, que cette fonction sera ignorée s'il en existe une autre portant le même nom. Elle sera choisie par défaut d'autre fonction homonyme.
 * Ainsi, si l'utilisateur définie sa propre TIMERX_user_handler_it(), elle sera appelée
 * Sinon, aucun message d'erreur n'indiquera que cette fonction n'existe pas !
 */
__weak void TIMER1_user_handler_it(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0

}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <TIMER2_user_handler_it>:

__weak void TIMER2_user_handler_it(void)
{
 800486e:	b480      	push	{r7}
 8004870:	af00      	add	r7, sp, #0

}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <TIMER3_user_handler_it>:

__weak void TIMER3_user_handler_it(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0

}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIMER4_user_handler_it>:

__weak void TIMER4_user_handler_it(void)
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0

}
 800488e:	bf00      	nop
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <TIMER6_user_handler_it>:


__weak void TIMER6_user_handler_it(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
}
 800489c:	bf00      	nop
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <TIM1_UP_TIM16_IRQHandler>:
 * @brief 	Routine d'interruption appelée AUTOMATIQUEMENT lorsque le timer 1 arrive a écheance.
 * @pre		Cette fonction NE DOIT PAS être appelée directement par l'utilisateur...
 * @post	Acquittement du flag d'interruption, et appel de la fonction de l'utilisateur : TIMER1_user_handler_it()
 * @note	Nous n'avons PAS le choix du nom de cette fonction, c'est comme ça qu'elle est nommée dans le fichier startup.s !
 */
void TIM1_UP_TIM16_IRQHandler(void){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER1_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levé...
 80048ac:	4b07      	ldr	r3, [pc, #28]	@ (80048cc <TIM1_UP_TIM16_IRQHandler+0x24>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d106      	bne.n	80048c8 <TIM1_UP_TIM16_IRQHandler+0x20>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER1_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 80048ba:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <TIM1_UP_TIM16_IRQHandler+0x24>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f06f 0201 	mvn.w	r2, #1
 80048c2:	611a      	str	r2, [r3, #16]
		TIMER1_user_handler_it();									//...Et on appelle la fonction qui nous intéresse
 80048c4:	f7ff ffcc 	bl	8004860 <TIMER1_user_handler_it>
	}
}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20003c44 	.word	0x20003c44

080048d0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER2_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levé...
 80048d4:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <TIM2_IRQHandler+0x24>)
 80048d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d106      	bne.n	80048f0 <TIM2_IRQHandler+0x20>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER2_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 80048e2:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <TIM2_IRQHandler+0x24>)
 80048e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e6:	f06f 0201 	mvn.w	r2, #1
 80048ea:	611a      	str	r2, [r3, #16]
		TIMER2_user_handler_it();									//...Et on appelle la fonction qui nous intéresse
 80048ec:	f7ff ffbf 	bl	800486e <TIMER2_user_handler_it>
	}
}
 80048f0:	bf00      	nop
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20003c44 	.word	0x20003c44

080048f8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER3_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levé...
 80048fc:	4b08      	ldr	r3, [pc, #32]	@ (8004920 <TIM3_IRQHandler+0x28>)
 80048fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <TIM3_IRQHandler+0x24>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER3_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 800490c:	4b04      	ldr	r3, [pc, #16]	@ (8004920 <TIM3_IRQHandler+0x28>)
 800490e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004912:	f06f 0201 	mvn.w	r2, #1
 8004916:	611a      	str	r2, [r3, #16]
		TIMER3_user_handler_it();									//...Et on appelle la fonction qui nous intéresse
 8004918:	f7ff ffb0 	bl	800487c <TIMER3_user_handler_it>
	}
}
 800491c:	bf00      	nop
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20003c44 	.word	0x20003c44

08004924 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER4_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levé...
 8004928:	4b08      	ldr	r3, [pc, #32]	@ (800494c <TIM4_IRQHandler+0x28>)
 800492a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d107      	bne.n	8004948 <TIM4_IRQHandler+0x24>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER4_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 8004938:	4b04      	ldr	r3, [pc, #16]	@ (800494c <TIM4_IRQHandler+0x28>)
 800493a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800493e:	f06f 0201 	mvn.w	r2, #1
 8004942:	611a      	str	r2, [r3, #16]
		TIMER4_user_handler_it();									//...Et on appelle la fonction qui nous intéresse
 8004944:	f7ff ffa1 	bl	800488a <TIMER4_user_handler_it>
	}
}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20003c44 	.word	0x20003c44

08004950 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_IT_SOURCE(&structure_handles[TIMER6_ID], TIM_IT_UPDATE) != RESET) 	//Si le flag est levé...
 8004954:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <TIM6_DAC_IRQHandler+0x28>)
 8004956:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <TIM6_DAC_IRQHandler+0x24>
	{
		__HAL_TIM_CLEAR_IT(&structure_handles[TIMER6_ID], TIM_IT_UPDATE);				//...On l'acquitte...
 8004964:	4b04      	ldr	r3, [pc, #16]	@ (8004978 <TIM6_DAC_IRQHandler+0x28>)
 8004966:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800496a:	f06f 0201 	mvn.w	r2, #1
 800496e:	611a      	str	r2, [r3, #16]
		TIMER6_user_handler_it();									//...Et on appelle la fonction qui nous intéresse
 8004970:	f7ff ff92 	bl	8004898 <TIMER6_user_handler_it>
	}

}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20003c44 	.word	0x20003c44

0800497c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	2b00      	cmp	r3, #0
 800498c:	db0b      	blt.n	80049a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	f003 021f 	and.w	r2, r3, #31
 8004994:	4907      	ldr	r1, [pc, #28]	@ (80049b4 <__NVIC_EnableIRQ+0x38>)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2001      	movs	r0, #1
 800499e:	fa00 f202 	lsl.w	r2, r0, r2
 80049a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	e000e100 	.word	0xe000e100

080049b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	db12      	blt.n	80049f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	f003 021f 	and.w	r2, r3, #31
 80049d0:	490a      	ldr	r1, [pc, #40]	@ (80049fc <__NVIC_DisableIRQ+0x44>)
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2001      	movs	r0, #1
 80049da:	fa00 f202 	lsl.w	r2, r0, r2
 80049de:	3320      	adds	r3, #32
 80049e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049e4:	f3bf 8f4f 	dsb	sy
}
 80049e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049ea:	f3bf 8f6f 	isb	sy
}
 80049ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000e100 	.word	0xe000e100

08004a00 <BSP_UART_data_ready>:
 *
 * @param uart_id ID de l'uart concerné
 * @ret bool true si des caractères sont disponibles, false sinon
 */
bool BSP_UART_data_ready(uart_id_t uart_id)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
	assert(uart_id < UART_ID_NB);
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d905      	bls.n	8004a1c <BSP_UART_data_ready+0x1c>
 8004a10:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <BSP_UART_data_ready+0x2c>)
 8004a12:	4a07      	ldr	r2, [pc, #28]	@ (8004a30 <BSP_UART_data_ready+0x30>)
 8004a14:	2182      	movs	r1, #130	@ 0x82
 8004a16:	4807      	ldr	r0, [pc, #28]	@ (8004a34 <BSP_UART_data_ready+0x34>)
 8004a18:	f004 ff00 	bl	800981c <__assert_func>
	return buffer_rx_data_ready[uart_id];
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	4a06      	ldr	r2, [pc, #24]	@ (8004a38 <BSP_UART_data_ready+0x38>)
 8004a20:	5cd3      	ldrb	r3, [r2, r3]
 8004a22:	b2db      	uxtb	r3, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	0800c570 	.word	0x0800c570
 8004a30:	0800d3b8 	.word	0x0800d3b8
 8004a34:	0800c588 	.word	0x0800c588
 8004a38:	20003ff4 	.word	0x20003ff4

08004a3c <BSP_UART_get_next_byte>:
 * @param uart_id ID de l'uart concerné
 * @return uint8_t le dernier caractère reçu? Ou 0 si rien n'a été reçu
 * @post Le caractère lu est retiré du buffer de réception
 */
uint8_t BSP_UART_get_next_byte(uart_id_t uart_id)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	assert(uart_id < UART_ID_NB);
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d905      	bls.n	8004a58 <BSP_UART_get_next_byte+0x1c>
 8004a4c:	4b22      	ldr	r3, [pc, #136]	@ (8004ad8 <BSP_UART_get_next_byte+0x9c>)
 8004a4e:	4a23      	ldr	r2, [pc, #140]	@ (8004adc <BSP_UART_get_next_byte+0xa0>)
 8004a50:	21a5      	movs	r1, #165	@ 0xa5
 8004a52:	4823      	ldr	r0, [pc, #140]	@ (8004ae0 <BSP_UART_get_next_byte+0xa4>)
 8004a54:	f004 fee2 	bl	800981c <__assert_func>

	if(!buffer_rx_data_ready[uart_id])	//N'est jamais sensé se produire si l'utilisateur vérifie que BSP_UART_data_ready() avant d'appeler UART_get_next_byte()
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	4a22      	ldr	r2, [pc, #136]	@ (8004ae4 <BSP_UART_get_next_byte+0xa8>)
 8004a5c:	5cd3      	ldrb	r3, [r2, r3]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f083 0301 	eor.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <BSP_UART_get_next_byte+0x32>
		return 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e030      	b.n	8004ad0 <BSP_UART_get_next_byte+0x94>

	ret =  buffer_rx[uart_id][buffer_rx_read_index[uart_id]];
 8004a6e:	79fa      	ldrb	r2, [r7, #7]
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	491d      	ldr	r1, [pc, #116]	@ (8004ae8 <BSP_UART_get_next_byte+0xac>)
 8004a74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a78:	491c      	ldr	r1, [pc, #112]	@ (8004aec <BSP_UART_get_next_byte+0xb0>)
 8004a7a:	01d2      	lsls	r2, r2, #7
 8004a7c:	440a      	add	r2, r1
 8004a7e:	4413      	add	r3, r2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	73fb      	strb	r3, [r7, #15]
	buffer_rx_read_index[uart_id] = (buffer_rx_read_index[uart_id] + 1) % BUFFER_RX_SIZE;
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	4a18      	ldr	r2, [pc, #96]	@ (8004ae8 <BSP_UART_get_next_byte+0xac>)
 8004a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a94:	4914      	ldr	r1, [pc, #80]	@ (8004ae8 <BSP_UART_get_next_byte+0xac>)
 8004a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Section critique durant laquelle on désactive les interruptions... pour éviter une mauvaise préemption.
	NVIC_DisableIRQ(nvic_IRQ_array[uart_id]);
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	4a14      	ldr	r2, [pc, #80]	@ (8004af0 <BSP_UART_get_next_byte+0xb4>)
 8004a9e:	56d3      	ldrsb	r3, [r2, r3]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff ff89 	bl	80049b8 <__NVIC_DisableIRQ>
	if (buffer_rx_write_index[uart_id] == buffer_rx_read_index[uart_id])
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	4a12      	ldr	r2, [pc, #72]	@ (8004af4 <BSP_UART_get_next_byte+0xb8>)
 8004aaa:	5cd3      	ldrb	r3, [r2, r3]
 8004aac:	4619      	mov	r1, r3
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae8 <BSP_UART_get_next_byte+0xac>)
 8004ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab6:	4299      	cmp	r1, r3
 8004ab8:	d103      	bne.n	8004ac2 <BSP_UART_get_next_byte+0x86>
		buffer_rx_data_ready[uart_id] = false;
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	4a09      	ldr	r2, [pc, #36]	@ (8004ae4 <BSP_UART_get_next_byte+0xa8>)
 8004abe:	2100      	movs	r1, #0
 8004ac0:	54d1      	strb	r1, [r2, r3]
	NVIC_EnableIRQ(nvic_IRQ_array[uart_id]);
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8004af0 <BSP_UART_get_next_byte+0xb4>)
 8004ac6:	56d3      	ldrsb	r3, [r2, r3]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ff57 	bl	800497c <__NVIC_EnableIRQ>
	return ret;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	0800c570 	.word	0x0800c570
 8004adc:	0800d3cc 	.word	0x0800d3cc
 8004ae0:	0800c588 	.word	0x0800c588
 8004ae4:	20003ff4 	.word	0x20003ff4
 8004ae8:	20003fec 	.word	0x20003fec
 8004aec:	20003ee8 	.word	0x20003ee8
 8004af0:	0800d3b4 	.word	0x0800d3b4
 8004af4:	20003fe8 	.word	0x20003fe8

08004af8 <BSP_UART_putc>:
 *
 * @param	c : le caractere a envoyer
 * @param	uart_id UART1_ID, UART2_ID
 */
void BSP_UART_putc(uart_id_t uart_id, uint8_t c)
 {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	460a      	mov	r2, r1
 8004b02:	71fb      	strb	r3, [r7, #7]
 8004b04:	4613      	mov	r3, r2
 8004b06:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef state;
	assert(uart_id < UART_ID_NB);
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d906      	bls.n	8004b1c <BSP_UART_putc+0x24>
 8004b0e:	4b17      	ldr	r3, [pc, #92]	@ (8004b6c <BSP_UART_putc+0x74>)
 8004b10:	4a17      	ldr	r2, [pc, #92]	@ (8004b70 <BSP_UART_putc+0x78>)
 8004b12:	f240 110f 	movw	r1, #271	@ 0x10f
 8004b16:	4817      	ldr	r0, [pc, #92]	@ (8004b74 <BSP_UART_putc+0x7c>)
 8004b18:	f004 fe80 	bl	800981c <__assert_func>
	if(uart_initialized[uart_id])
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	@ (8004b78 <BSP_UART_putc+0x80>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01c      	beq.n	8004b62 <BSP_UART_putc+0x6a>
	{
		do
		{
			NVIC_DisableIRQ(nvic_IRQ_array[uart_id]);
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	4a14      	ldr	r2, [pc, #80]	@ (8004b7c <BSP_UART_putc+0x84>)
 8004b2c:	56d3      	ldrsb	r3, [r2, r3]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff42 	bl	80049b8 <__NVIC_DisableIRQ>
			state = HAL_UART_Transmit(&structure_handles[uart_id], &c, 1, UART_TIMEOUT);
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	2294      	movs	r2, #148	@ 0x94
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	4a10      	ldr	r2, [pc, #64]	@ (8004b80 <BSP_UART_putc+0x88>)
 8004b3e:	1898      	adds	r0, r3, r2
 8004b40:	1db9      	adds	r1, r7, #6
 8004b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b46:	2201      	movs	r2, #1
 8004b48:	f002 fdc6 	bl	80076d8 <HAL_UART_Transmit>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	73fb      	strb	r3, [r7, #15]
			NVIC_EnableIRQ(nvic_IRQ_array[uart_id]);
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	4a0a      	ldr	r2, [pc, #40]	@ (8004b7c <BSP_UART_putc+0x84>)
 8004b54:	56d3      	ldrsb	r3, [r2, r3]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff10 	bl	800497c <__NVIC_EnableIRQ>
		}while(state == HAL_BUSY);
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d0e2      	beq.n	8004b28 <BSP_UART_putc+0x30>
	}
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	0800c570 	.word	0x0800c570
 8004b70:	0800d3e4 	.word	0x0800d3e4
 8004b74:	0800c588 	.word	0x0800c588
 8004b78:	20003ff8 	.word	0x20003ff8
 8004b7c:	0800d3b4 	.word	0x0800d3b4
 8004b80:	20003dc0 	.word	0x20003dc0

08004b84 <BSP_UART_init>:
 * 				USART2 : Rx=PA3 et Tx=PA2 		ou avec remap : Rx=PA15 et Tx=PA14	ou Rx=PB4 et Tx=PB3
 * 				La gestion des envois et reception se fait en interruption.
 *
 */
void BSP_UART_init(uart_id_t uart_id, uint32_t baudrate)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	71fb      	strb	r3, [r7, #7]
	assert(baudrate > 1000);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b96:	d806      	bhi.n	8004ba6 <BSP_UART_init+0x22>
 8004b98:	4b7e      	ldr	r3, [pc, #504]	@ (8004d94 <BSP_UART_init+0x210>)
 8004b9a:	4a7f      	ldr	r2, [pc, #508]	@ (8004d98 <BSP_UART_init+0x214>)
 8004b9c:	f240 114b 	movw	r1, #331	@ 0x14b
 8004ba0:	487e      	ldr	r0, [pc, #504]	@ (8004d9c <BSP_UART_init+0x218>)
 8004ba2:	f004 fe3b 	bl	800981c <__assert_func>
	assert(uart_id < UART_ID_NB);
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d906      	bls.n	8004bba <BSP_UART_init+0x36>
 8004bac:	4b7c      	ldr	r3, [pc, #496]	@ (8004da0 <BSP_UART_init+0x21c>)
 8004bae:	4a7a      	ldr	r2, [pc, #488]	@ (8004d98 <BSP_UART_init+0x214>)
 8004bb0:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8004bb4:	4879      	ldr	r0, [pc, #484]	@ (8004d9c <BSP_UART_init+0x218>)
 8004bb6:	f004 fe31 	bl	800981c <__assert_func>

	buffer_rx_read_index[uart_id] = 0;
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	4a79      	ldr	r2, [pc, #484]	@ (8004da4 <BSP_UART_init+0x220>)
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	buffer_rx_write_index[uart_id] = 0;
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	4a78      	ldr	r2, [pc, #480]	@ (8004da8 <BSP_UART_init+0x224>)
 8004bc8:	2100      	movs	r1, #0
 8004bca:	54d1      	strb	r1, [r2, r3]
	buffer_rx_data_ready[uart_id] = false;
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	4a77      	ldr	r2, [pc, #476]	@ (8004dac <BSP_UART_init+0x228>)
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	54d1      	strb	r1, [r2, r3]
		- OverSampling: enable
		- One bit sampling: disable
		- Prescaler: DIV1
		- Advance features: disabled
	*/
	structure_handles[uart_id].Instance = (USART_TypeDef*)instances_array[uart_id];
 8004bd4:	79fa      	ldrb	r2, [r7, #7]
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	4975      	ldr	r1, [pc, #468]	@ (8004db0 <BSP_UART_init+0x22c>)
 8004bda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004bde:	4975      	ldr	r1, [pc, #468]	@ (8004db4 <BSP_UART_init+0x230>)
 8004be0:	2094      	movs	r0, #148	@ 0x94
 8004be2:	fb00 f303 	mul.w	r3, r0, r3
 8004be6:	440b      	add	r3, r1
 8004be8:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].Init.BaudRate = baudrate;
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	4a71      	ldr	r2, [pc, #452]	@ (8004db4 <BSP_UART_init+0x230>)
 8004bee:	2194      	movs	r1, #148	@ 0x94
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].Init.WordLength = UART_WORDLENGTH_8B;
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	4a6d      	ldr	r2, [pc, #436]	@ (8004db4 <BSP_UART_init+0x230>)
 8004c00:	2194      	movs	r1, #148	@ 0x94
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	3308      	adds	r3, #8
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].Init.StopBits = UART_STOPBITS_1;
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	4a68      	ldr	r2, [pc, #416]	@ (8004db4 <BSP_UART_init+0x230>)
 8004c12:	2194      	movs	r1, #148	@ 0x94
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].Init.Parity = UART_PARITY_NONE;
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	4a64      	ldr	r2, [pc, #400]	@ (8004db4 <BSP_UART_init+0x230>)
 8004c24:	2194      	movs	r1, #148	@ 0x94
 8004c26:	fb01 f303 	mul.w	r3, r1, r3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	4a5f      	ldr	r2, [pc, #380]	@ (8004db4 <BSP_UART_init+0x230>)
 8004c36:	2194      	movs	r1, #148	@ 0x94
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3318      	adds	r3, #24
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].Init.Mode = UART_MODE_TX_RX;
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	4a5b      	ldr	r2, [pc, #364]	@ (8004db4 <BSP_UART_init+0x230>)
 8004c48:	2194      	movs	r1, #148	@ 0x94
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	3314      	adds	r3, #20
 8004c52:	220c      	movs	r2, #12
 8004c54:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].Init.OverSampling = UART_OVERSAMPLING_16;
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	4a56      	ldr	r2, [pc, #344]	@ (8004db4 <BSP_UART_init+0x230>)
 8004c5a:	2194      	movs	r1, #148	@ 0x94
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	331c      	adds	r3, #28
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	4a52      	ldr	r2, [pc, #328]	@ (8004db4 <BSP_UART_init+0x230>)
 8004c6c:	2194      	movs	r1, #148	@ 0x94
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	4413      	add	r3, r2
 8004c74:	3320      	adds	r3, #32
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8004db4 <BSP_UART_init+0x230>)
 8004c7e:	2194      	movs	r1, #148	@ 0x94
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	4413      	add	r3, r2
 8004c86:	3324      	adds	r3, #36	@ 0x24
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
	structure_handles[uart_id].AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	4a49      	ldr	r2, [pc, #292]	@ (8004db4 <BSP_UART_init+0x230>)
 8004c90:	2194      	movs	r1, #148	@ 0x94
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	3328      	adds	r3, #40	@ 0x28
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]

	if (HAL_UART_Init(&structure_handles[uart_id]) != HAL_OK)
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	2294      	movs	r2, #148	@ 0x94
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	4a43      	ldr	r2, [pc, #268]	@ (8004db4 <BSP_UART_init+0x230>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f002 fcc4 	bl	8007638 <HAL_UART_Init>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <BSP_UART_init+0x136>
	{
		Error_Handler();
 8004cb6:	f7ff fd53 	bl	8004760 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&structure_handles[uart_id], UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	2294      	movs	r2, #148	@ 0x94
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8004db4 <BSP_UART_init+0x230>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f004 fcdc 	bl	8009686 <HAL_UARTEx_SetTxFifoThreshold>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <BSP_UART_init+0x154>
	{
		Error_Handler();
 8004cd4:	f7ff fd44 	bl	8004760 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&structure_handles[uart_id], UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	2294      	movs	r2, #148	@ 0x94
 8004cdc:	fb02 f303 	mul.w	r3, r2, r3
 8004ce0:	4a34      	ldr	r2, [pc, #208]	@ (8004db4 <BSP_UART_init+0x230>)
 8004ce2:	4413      	add	r3, r2
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f004 fd0b 	bl	8009702 <HAL_UARTEx_SetRxFifoThreshold>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <BSP_UART_init+0x172>
	{
		Error_Handler();
 8004cf2:	f7ff fd35 	bl	8004760 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&structure_handles[uart_id]) != HAL_OK)
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	2294      	movs	r2, #148	@ 0x94
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8004db4 <BSP_UART_init+0x230>)
 8004d00:	4413      	add	r3, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f004 fc86 	bl	8009614 <HAL_UARTEx_DisableFifoMode>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <BSP_UART_init+0x18e>
	{
		Error_Handler();
 8004d0e:	f7ff fd27 	bl	8004760 <Error_Handler>
	}

	/* Interrupt Init */
	HAL_NVIC_SetPriority(nvic_IRQ_array[uart_id], 1, 1);
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	4a28      	ldr	r2, [pc, #160]	@ (8004db8 <BSP_UART_init+0x234>)
 8004d16:	56d3      	ldrsb	r3, [r2, r3]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fad2 	bl	80052c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(nvic_IRQ_array[uart_id]);
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	4a24      	ldr	r2, [pc, #144]	@ (8004db8 <BSP_UART_init+0x234>)
 8004d26:	56d3      	ldrsb	r3, [r2, r3]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fae6 	bl	80052fa <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&structure_handles[uart_id],&buffer_rx[uart_id][buffer_rx_write_index[uart_id]],1);	//Activation de la réception d'un caractère
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	2294      	movs	r2, #148	@ 0x94
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	4a1f      	ldr	r2, [pc, #124]	@ (8004db4 <BSP_UART_init+0x230>)
 8004d38:	1898      	adds	r0, r3, r2
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	79fa      	ldrb	r2, [r7, #7]
 8004d3e:	491a      	ldr	r1, [pc, #104]	@ (8004da8 <BSP_UART_init+0x224>)
 8004d40:	5c8a      	ldrb	r2, [r1, r2]
 8004d42:	01db      	lsls	r3, r3, #7
 8004d44:	4413      	add	r3, r2
 8004d46:	4a1d      	ldr	r2, [pc, #116]	@ (8004dbc <BSP_UART_init+0x238>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f002 fd51 	bl	80077f4 <HAL_UART_Receive_IT>

	//Config LibC: no buffering
	setvbuf(stdout, NULL, _IONBF, 0 );
 8004d52:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc0 <BSP_UART_init+0x23c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6898      	ldr	r0, [r3, #8]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f005 faa5 	bl	800a2ac <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0 );
 8004d62:	4b17      	ldr	r3, [pc, #92]	@ (8004dc0 <BSP_UART_init+0x23c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68d8      	ldr	r0, [r3, #12]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f005 fa9d 	bl	800a2ac <setvbuf>
	setvbuf(stdin, NULL, _IONBF, 0 );
 8004d72:	4b13      	ldr	r3, [pc, #76]	@ (8004dc0 <BSP_UART_init+0x23c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6858      	ldr	r0, [r3, #4]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	f005 fa95 	bl	800a2ac <setvbuf>

	uart_initialized[uart_id] = true;
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	4a0f      	ldr	r2, [pc, #60]	@ (8004dc4 <BSP_UART_init+0x240>)
 8004d86:	2101      	movs	r1, #1
 8004d88:	54d1      	strb	r1, [r2, r3]
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	0800c5a8 	.word	0x0800c5a8
 8004d98:	0800d3f4 	.word	0x0800d3f4
 8004d9c:	0800c588 	.word	0x0800c588
 8004da0:	0800c570 	.word	0x0800c570
 8004da4:	20003fec 	.word	0x20003fec
 8004da8:	20003fe8 	.word	0x20003fe8
 8004dac:	20003ff4 	.word	0x20003ff4
 8004db0:	20000028 	.word	0x20000028
 8004db4:	20003dc0 	.word	0x20003dc0
 8004db8:	0800d3b4 	.word	0x0800d3b4
 8004dbc:	20003ee8 	.word	0x20003ee8
 8004dc0:	20000044 	.word	0x20000044
 8004dc4:	20003ff8 	.word	0x20003ff8

08004dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uart_handle)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b09a      	sub	sp, #104	@ 0x68
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dd0:	f107 031c 	add.w	r3, r7, #28
 8004dd4:	2244      	movs	r2, #68	@ 0x44
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f005 fb5e 	bl	800a49a <memset>

	if(uart_handle->Instance==USART1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a36      	ldr	r2, [pc, #216]	@ (8004ebc <HAL_UART_MspInit+0xf4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d12f      	bne.n	8004e48 <HAL_UART_MspInit+0x80>
	{
		/** Initializes the peripherals clocks
		*/
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004de8:	2301      	movs	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
		PeriphClkInit.Usart2ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004dec:	2300      	movs	r3, #0
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004df0:	f107 031c 	add.w	r3, r7, #28
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 faef 	bl	80063d8 <HAL_RCCEx_PeriphCLKConfig>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_UART_MspInit+0x3c>
		{
		  Error_Handler();
 8004e00:	f7ff fcae 	bl	8004760 <Error_Handler>
#ifdef UART1_ON_PA10_PA9
		__HAL_RCC_GPIOA_CLK_ENABLE();
		BSP_GPIO_pin_config(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF7_USART1);
#endif
#ifdef UART1_ON_PB7_PB6
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8004e04:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e08:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e0a:	f043 0302 	orr.w	r3, r3, #2
 8004e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e10:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
		BSP_GPIO_pin_config(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF7_USART1);
 8004e1c:	2307      	movs	r3, #7
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	2303      	movs	r3, #3
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	2202      	movs	r2, #2
 8004e28:	21c0      	movs	r1, #192	@ 0xc0
 8004e2a:	4826      	ldr	r0, [pc, #152]	@ (8004ec4 <HAL_UART_MspInit+0xfc>)
 8004e2c:	f7fe fdc4 	bl	80039b8 <BSP_GPIO_pin_config>
#endif
		/* UART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8004e30:	4b23      	ldr	r3, [pc, #140]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e34:	4a22      	ldr	r2, [pc, #136]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e3c:	4b20      	ldr	r3, [pc, #128]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	697b      	ldr	r3, [r7, #20]
	}

	if(uart_handle->Instance==USART2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec8 <HAL_UART_MspInit+0x100>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d130      	bne.n	8004eb4 <HAL_UART_MspInit+0xec>
	{
		/** Initializes the peripherals clocks
		*/
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004e52:	2302      	movs	r3, #2
 8004e54:	61fb      	str	r3, [r7, #28]
		PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004e56:	2300      	movs	r3, #0
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e5a:	f107 031c 	add.w	r3, r7, #28
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 faba 	bl	80063d8 <HAL_RCCEx_PeriphCLKConfig>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_UART_MspInit+0xa6>
		{
		  Error_Handler();
 8004e6a:	f7ff fc79 	bl	8004760 <Error_Handler>
		}

#ifdef UART2_ON_PA3_PA2
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004e6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e72:	4a13      	ldr	r2, [pc, #76]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e7a:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
		BSP_GPIO_pin_config(GPIOA, GPIO_PIN_2 | GPIO_PIN_3, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF7_USART2);
 8004e86:	2307      	movs	r3, #7
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2202      	movs	r2, #2
 8004e92:	210c      	movs	r1, #12
 8004e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e98:	f7fe fd8e 	bl	80039b8 <BSP_GPIO_pin_config>
		__HAL_RCC_GPIOB_CLK_ENABLE();
		BSP_GPIO_pin_config(GPIOB, GPIO_PIN_3 | GPIO_PIN_4, GPIO_MODE_AF_PP, GPIO_NOPULL, GPIO_SPEED_FREQ_VERY_HIGH, GPIO_AF7_USART2);
#endif

		/* UART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8004e9c:	4b08      	ldr	r3, [pc, #32]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea0:	4a07      	ldr	r2, [pc, #28]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ea8:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_UART_MspInit+0xf8>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
	}
}
 8004eb4:	bf00      	nop
 8004eb6:	3760      	adds	r7, #96	@ 0x60
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40013800 	.word	0x40013800
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	48000400 	.word	0x48000400
 8004ec8:	40004400 	.word	0x40004400

08004ecc <USART1_IRQHandler>:

	}
}

void USART1_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&structure_handles[UART1_ID]);
 8004ed0:	4802      	ldr	r0, [pc, #8]	@ (8004edc <USART1_IRQHandler+0x10>)
 8004ed2:	f002 fcdb 	bl	800788c <HAL_UART_IRQHandler>
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20003dc0 	.word	0x20003dc0

08004ee0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&structure_handles[UART2_ID]);
 8004ee4:	4802      	ldr	r0, [pc, #8]	@ (8004ef0 <USART2_IRQHandler+0x10>)
 8004ee6:	f002 fcd1 	bl	800788c <HAL_UART_IRQHandler>
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20003e54 	.word	0x20003e54

08004ef4 <HAL_UART_ErrorCallback>:
	callback_uart_rx[uart_id] = cb;
}

#define USART_FLAG_ERRORS (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE | USART_ISR_PE)
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	__unused uint8_t trash;
	uint32_t status;
	do{
		status = huart->Instance->ISR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	60fb      	str	r3, [r7, #12]
		if (status & USART_ISR_RXNE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_UART_ErrorCallback+0x22>
			trash = (uint8_t) (huart->Instance->RDR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	72fb      	strb	r3, [r7, #11]
		if (status & USART_FLAG_ERRORS)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_UART_ErrorCallback+0x34>
			huart->Instance->ICR = USART_FLAG_ERRORS;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	220f      	movs	r2, #15
 8004f26:	621a      	str	r2, [r3, #32]
	}while(status & USART_FLAG_ERRORS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e4      	bne.n	8004efc <HAL_UART_ErrorCallback+0x8>
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UART_RxCpltCallback>:
 * @param Size	Le nombre d'octet à traiter
 * @post Les octets reçus sont stockés dans le buffer correspondant.
 * @post La réception en IT des prochains octets est réactivée.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	uart_id_t uart_id;
	if (huart->Instance == USART1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a20      	ldr	r2, [pc, #128]	@ (8004fd0 <HAL_UART_RxCpltCallback+0x90>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d102      	bne.n	8004f58 <HAL_UART_RxCpltCallback+0x18>
		uart_id = UART1_ID;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	e006      	b.n	8004f66 <HAL_UART_RxCpltCallback+0x26>
	else if (huart->Instance == USART2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd4 <HAL_UART_RxCpltCallback+0x94>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d132      	bne.n	8004fc8 <HAL_UART_RxCpltCallback+0x88>
		uart_id = UART2_ID;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
	else
		return;

	buffer_rx_data_ready[uart_id] = true;
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x98>)
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	54d1      	strb	r1, [r2, r3]
	buffer_rx_write_index[uart_id] = (buffer_rx_write_index[uart_id] + 1) % BUFFER_RX_SIZE;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	4a1a      	ldr	r2, [pc, #104]	@ (8004fdc <HAL_UART_RxCpltCallback+0x9c>)
 8004f72:	5cd3      	ldrb	r3, [r2, r3]
 8004f74:	3301      	adds	r3, #1
 8004f76:	425a      	negs	r2, r3
 8004f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f80:	bf58      	it	pl
 8004f82:	4253      	negpl	r3, r2
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	b2d9      	uxtb	r1, r3
 8004f88:	4b14      	ldr	r3, [pc, #80]	@ (8004fdc <HAL_UART_RxCpltCallback+0x9c>)
 8004f8a:	5499      	strb	r1, [r3, r2]
	if (callback_uart_rx[uart_id] != NULL)
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <HAL_UART_RxCpltCallback+0xa0>)
 8004f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <HAL_UART_RxCpltCallback+0x62>
		callback_uart_rx[uart_id]();
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	4a11      	ldr	r2, [pc, #68]	@ (8004fe0 <HAL_UART_RxCpltCallback+0xa0>)
 8004f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa0:	4798      	blx	r3
	HAL_UART_Receive_IT(&structure_handles[uart_id], &buffer_rx[uart_id][buffer_rx_write_index[uart_id]], 1);//Activation de la réception d'un caractère
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2294      	movs	r2, #148	@ 0x94
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe4 <HAL_UART_RxCpltCallback+0xa4>)
 8004fac:	1898      	adds	r0, r3, r2
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	7bfa      	ldrb	r2, [r7, #15]
 8004fb2:	490a      	ldr	r1, [pc, #40]	@ (8004fdc <HAL_UART_RxCpltCallback+0x9c>)
 8004fb4:	5c8a      	ldrb	r2, [r1, r2]
 8004fb6:	01db      	lsls	r3, r3, #7
 8004fb8:	4413      	add	r3, r2
 8004fba:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe8 <HAL_UART_RxCpltCallback+0xa8>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f002 fc17 	bl	80077f4 <HAL_UART_Receive_IT>
 8004fc6:	e000      	b.n	8004fca <HAL_UART_RxCpltCallback+0x8a>
		return;
 8004fc8:	bf00      	nop
}
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40013800 	.word	0x40013800
 8004fd4:	40004400 	.word	0x40004400
 8004fd8:	20003ff4 	.word	0x20003ff4
 8004fdc:	20003fe8 	.word	0x20003fe8
 8004fe0:	20003ffc 	.word	0x20003ffc
 8004fe4:	20003dc0 	.word	0x20003dc0
 8004fe8:	20003ee8 	.word	0x20003ee8

08004fec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ff6:	2003      	movs	r0, #3
 8004ff8:	f000 f95a 	bl	80052b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f000 f80d 	bl	800501c <HAL_InitTick>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	71fb      	strb	r3, [r7, #7]
 800500c:	e001      	b.n	8005012 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800500e:	f7ff fab1 	bl	8004574 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005012:	79fb      	ldrb	r3, [r7, #7]

}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005028:	4b16      	ldr	r3, [pc, #88]	@ (8005084 <HAL_InitTick+0x68>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d022      	beq.n	8005076 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005030:	4b15      	ldr	r3, [pc, #84]	@ (8005088 <HAL_InitTick+0x6c>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <HAL_InitTick+0x68>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800503c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	4618      	mov	r0, r3
 8005046:	f000 f966 	bl	8005316 <HAL_SYSTICK_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10f      	bne.n	8005070 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b0f      	cmp	r3, #15
 8005054:	d809      	bhi.n	800506a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005056:	2200      	movs	r2, #0
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800505e:	f000 f932 	bl	80052c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005062:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <HAL_InitTick+0x70>)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	e007      	b.n	800507a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
 800506e:	e004      	b.n	800507a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e001      	b.n	800507a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000034 	.word	0x20000034
 8005088:	20000018 	.word	0x20000018
 800508c:	20000030 	.word	0x20000030

08005090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005094:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <HAL_IncTick+0x1c>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <HAL_IncTick+0x20>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4413      	add	r3, r2
 800509e:	4a03      	ldr	r2, [pc, #12]	@ (80050ac <HAL_IncTick+0x1c>)
 80050a0:	6013      	str	r3, [r2, #0]
}
 80050a2:	bf00      	nop
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	20004004 	.word	0x20004004
 80050b0:	20000034 	.word	0x20000034

080050b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return uwTick;
 80050b8:	4b03      	ldr	r3, [pc, #12]	@ (80050c8 <HAL_GetTick+0x14>)
 80050ba:	681b      	ldr	r3, [r3, #0]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20004004 	.word	0x20004004

080050cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050d4:	f7ff ffee 	bl	80050b4 <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050e4:	d004      	beq.n	80050f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80050e6:	4b09      	ldr	r3, [pc, #36]	@ (800510c <HAL_Delay+0x40>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050f0:	bf00      	nop
 80050f2:	f7ff ffdf 	bl	80050b4 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d8f7      	bhi.n	80050f2 <HAL_Delay+0x26>
  {
  }
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000034 	.word	0x20000034

08005110 <__NVIC_SetPriorityGrouping>:
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005120:	4b0c      	ldr	r3, [pc, #48]	@ (8005154 <__NVIC_SetPriorityGrouping+0x44>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800512c:	4013      	ands	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800513c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005142:	4a04      	ldr	r2, [pc, #16]	@ (8005154 <__NVIC_SetPriorityGrouping+0x44>)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	60d3      	str	r3, [r2, #12]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <__NVIC_GetPriorityGrouping>:
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800515c:	4b04      	ldr	r3, [pc, #16]	@ (8005170 <__NVIC_GetPriorityGrouping+0x18>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 0307 	and.w	r3, r3, #7
}
 8005166:	4618      	mov	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <__NVIC_EnableIRQ>:
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800517e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005182:	2b00      	cmp	r3, #0
 8005184:	db0b      	blt.n	800519e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	f003 021f 	and.w	r2, r3, #31
 800518c:	4907      	ldr	r1, [pc, #28]	@ (80051ac <__NVIC_EnableIRQ+0x38>)
 800518e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2001      	movs	r0, #1
 8005196:	fa00 f202 	lsl.w	r2, r0, r2
 800519a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	e000e100 	.word	0xe000e100

080051b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	6039      	str	r1, [r7, #0]
 80051ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db0a      	blt.n	80051da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	490c      	ldr	r1, [pc, #48]	@ (80051fc <__NVIC_SetPriority+0x4c>)
 80051ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ce:	0112      	lsls	r2, r2, #4
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	440b      	add	r3, r1
 80051d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d8:	e00a      	b.n	80051f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4908      	ldr	r1, [pc, #32]	@ (8005200 <__NVIC_SetPriority+0x50>)
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	3b04      	subs	r3, #4
 80051e8:	0112      	lsls	r2, r2, #4
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	440b      	add	r3, r1
 80051ee:	761a      	strb	r2, [r3, #24]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	e000e100 	.word	0xe000e100
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005204:	b480      	push	{r7}
 8005206:	b089      	sub	sp, #36	@ 0x24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f1c3 0307 	rsb	r3, r3, #7
 800521e:	2b04      	cmp	r3, #4
 8005220:	bf28      	it	cs
 8005222:	2304      	movcs	r3, #4
 8005224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3304      	adds	r3, #4
 800522a:	2b06      	cmp	r3, #6
 800522c:	d902      	bls.n	8005234 <NVIC_EncodePriority+0x30>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3b03      	subs	r3, #3
 8005232:	e000      	b.n	8005236 <NVIC_EncodePriority+0x32>
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005238:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43da      	mvns	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	401a      	ands	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800524c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	43d9      	mvns	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525c:	4313      	orrs	r3, r2
         );
}
 800525e:	4618      	mov	r0, r3
 8005260:	3724      	adds	r7, #36	@ 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3b01      	subs	r3, #1
 8005278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800527c:	d301      	bcc.n	8005282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800527e:	2301      	movs	r3, #1
 8005280:	e00f      	b.n	80052a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005282:	4a0a      	ldr	r2, [pc, #40]	@ (80052ac <SysTick_Config+0x40>)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800528a:	210f      	movs	r1, #15
 800528c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005290:	f7ff ff8e 	bl	80051b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <SysTick_Config+0x40>)
 8005296:	2200      	movs	r2, #0
 8005298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800529a:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <SysTick_Config+0x40>)
 800529c:	2207      	movs	r2, #7
 800529e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	e000e010 	.word	0xe000e010

080052b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff29 	bl	8005110 <__NVIC_SetPriorityGrouping>
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	4603      	mov	r3, r0
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052d4:	f7ff ff40 	bl	8005158 <__NVIC_GetPriorityGrouping>
 80052d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	6978      	ldr	r0, [r7, #20]
 80052e0:	f7ff ff90 	bl	8005204 <NVIC_EncodePriority>
 80052e4:	4602      	mov	r2, r0
 80052e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff ff5f 	bl	80051b0 <__NVIC_SetPriority>
}
 80052f2:	bf00      	nop
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	4603      	mov	r3, r0
 8005302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff ff33 	bl	8005174 <__NVIC_EnableIRQ>
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff ffa4 	bl	800526c <SysTick_Config>
 8005324:	4603      	mov	r3, r0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d005      	beq.n	8005352 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
 8005350:	e037      	b.n	80053c2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 020e 	bic.w	r2, r2, #14
 8005360:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005370:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	f003 021f 	and.w	r2, r3, #31
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f202 	lsl.w	r2, r1, r2
 8005394:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800539e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00c      	beq.n	80053c2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053b6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053c0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d00d      	beq.n	8005414 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2204      	movs	r2, #4
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	73fb      	strb	r3, [r7, #15]
 8005412:	e047      	b.n	80054a4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 020e 	bic.w	r2, r2, #14
 8005422:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0201 	bic.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800543e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	f003 021f 	and.w	r2, r3, #31
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005450:	2101      	movs	r1, #1
 8005452:	fa01 f202 	lsl.w	r2, r1, r2
 8005456:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005460:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005478:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005482:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	4798      	blx	r3
    }
  }
  return status;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80054be:	e15a      	b.n	8005776 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	2101      	movs	r1, #1
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	4013      	ands	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 814c 	beq.w	8005770 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d005      	beq.n	80054f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d130      	bne.n	8005552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	2203      	movs	r2, #3
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005526:	2201      	movs	r2, #1
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 0201 	and.w	r2, r3, #1
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b03      	cmp	r3, #3
 800555c:	d017      	beq.n	800558e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	2203      	movs	r2, #3
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4013      	ands	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d123      	bne.n	80055e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	08da      	lsrs	r2, r3, #3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3208      	adds	r2, #8
 80055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	220f      	movs	r2, #15
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4013      	ands	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	08da      	lsrs	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3208      	adds	r2, #8
 80055dc:	6939      	ldr	r1, [r7, #16]
 80055de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	2203      	movs	r2, #3
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4013      	ands	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 0203 	and.w	r2, r3, #3
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80a6 	beq.w	8005770 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005624:	4b5b      	ldr	r3, [pc, #364]	@ (8005794 <HAL_GPIO_Init+0x2e4>)
 8005626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005628:	4a5a      	ldr	r2, [pc, #360]	@ (8005794 <HAL_GPIO_Init+0x2e4>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005630:	4b58      	ldr	r3, [pc, #352]	@ (8005794 <HAL_GPIO_Init+0x2e4>)
 8005632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800563c:	4a56      	ldr	r2, [pc, #344]	@ (8005798 <HAL_GPIO_Init+0x2e8>)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	3302      	adds	r3, #2
 8005644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	220f      	movs	r2, #15
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4013      	ands	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005666:	d01f      	beq.n	80056a8 <HAL_GPIO_Init+0x1f8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a4c      	ldr	r2, [pc, #304]	@ (800579c <HAL_GPIO_Init+0x2ec>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d019      	beq.n	80056a4 <HAL_GPIO_Init+0x1f4>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a4b      	ldr	r2, [pc, #300]	@ (80057a0 <HAL_GPIO_Init+0x2f0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_GPIO_Init+0x1f0>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a4a      	ldr	r2, [pc, #296]	@ (80057a4 <HAL_GPIO_Init+0x2f4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00d      	beq.n	800569c <HAL_GPIO_Init+0x1ec>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a49      	ldr	r2, [pc, #292]	@ (80057a8 <HAL_GPIO_Init+0x2f8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d007      	beq.n	8005698 <HAL_GPIO_Init+0x1e8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a48      	ldr	r2, [pc, #288]	@ (80057ac <HAL_GPIO_Init+0x2fc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d101      	bne.n	8005694 <HAL_GPIO_Init+0x1e4>
 8005690:	2305      	movs	r3, #5
 8005692:	e00a      	b.n	80056aa <HAL_GPIO_Init+0x1fa>
 8005694:	2306      	movs	r3, #6
 8005696:	e008      	b.n	80056aa <HAL_GPIO_Init+0x1fa>
 8005698:	2304      	movs	r3, #4
 800569a:	e006      	b.n	80056aa <HAL_GPIO_Init+0x1fa>
 800569c:	2303      	movs	r3, #3
 800569e:	e004      	b.n	80056aa <HAL_GPIO_Init+0x1fa>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e002      	b.n	80056aa <HAL_GPIO_Init+0x1fa>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <HAL_GPIO_Init+0x1fa>
 80056a8:	2300      	movs	r3, #0
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	f002 0203 	and.w	r2, r2, #3
 80056b0:	0092      	lsls	r2, r2, #2
 80056b2:	4093      	lsls	r3, r2
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056ba:	4937      	ldr	r1, [pc, #220]	@ (8005798 <HAL_GPIO_Init+0x2e8>)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	3302      	adds	r3, #2
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056c8:	4b39      	ldr	r3, [pc, #228]	@ (80057b0 <HAL_GPIO_Init+0x300>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4013      	ands	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056ec:	4a30      	ldr	r2, [pc, #192]	@ (80057b0 <HAL_GPIO_Init+0x300>)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056f2:	4b2f      	ldr	r3, [pc, #188]	@ (80057b0 <HAL_GPIO_Init+0x300>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005716:	4a26      	ldr	r2, [pc, #152]	@ (80057b0 <HAL_GPIO_Init+0x300>)
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800571c:	4b24      	ldr	r3, [pc, #144]	@ (80057b0 <HAL_GPIO_Init+0x300>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	43db      	mvns	r3, r3
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4013      	ands	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005740:	4a1b      	ldr	r2, [pc, #108]	@ (80057b0 <HAL_GPIO_Init+0x300>)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005746:	4b1a      	ldr	r3, [pc, #104]	@ (80057b0 <HAL_GPIO_Init+0x300>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	43db      	mvns	r3, r3
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4013      	ands	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800576a:	4a11      	ldr	r2, [pc, #68]	@ (80057b0 <HAL_GPIO_Init+0x300>)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	3301      	adds	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	f47f ae9d 	bne.w	80054c0 <HAL_GPIO_Init+0x10>
  }
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	40021000 	.word	0x40021000
 8005798:	40010000 	.word	0x40010000
 800579c:	48000400 	.word	0x48000400
 80057a0:	48000800 	.word	0x48000800
 80057a4:	48000c00 	.word	0x48000c00
 80057a8:	48001000 	.word	0x48001000
 80057ac:	48001400 	.word	0x48001400
 80057b0:	40010400 	.word	0x40010400

080057b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	887b      	ldrh	r3, [r7, #2]
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e001      	b.n	80057d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
 80057f0:	4613      	mov	r3, r2
 80057f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057f4:	787b      	ldrb	r3, [r7, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005800:	e002      	b.n	8005808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d141      	bne.n	80058a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005822:	4b4b      	ldr	r3, [pc, #300]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582e:	d131      	bne.n	8005894 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005830:	4b47      	ldr	r3, [pc, #284]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005836:	4a46      	ldr	r2, [pc, #280]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800583c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005840:	4b43      	ldr	r3, [pc, #268]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005848:	4a41      	ldr	r2, [pc, #260]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800584a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800584e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005850:	4b40      	ldr	r3, [pc, #256]	@ (8005954 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2232      	movs	r2, #50	@ 0x32
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	4a3f      	ldr	r2, [pc, #252]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800585c:	fba2 2303 	umull	r2, r3, r2, r3
 8005860:	0c9b      	lsrs	r3, r3, #18
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005866:	e002      	b.n	800586e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3b01      	subs	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800586e:	4b38      	ldr	r3, [pc, #224]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800587a:	d102      	bne.n	8005882 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f2      	bne.n	8005868 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005882:	4b33      	ldr	r3, [pc, #204]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800588a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800588e:	d158      	bne.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e057      	b.n	8005944 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005894:	4b2e      	ldr	r3, [pc, #184]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800589a:	4a2d      	ldr	r2, [pc, #180]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058a4:	e04d      	b.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ac:	d141      	bne.n	8005932 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058ae:	4b28      	ldr	r3, [pc, #160]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ba:	d131      	bne.n	8005920 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058bc:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c2:	4a23      	ldr	r2, [pc, #140]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058cc:	4b20      	ldr	r3, [pc, #128]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005954 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2232      	movs	r2, #50	@ 0x32
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	0c9b      	lsrs	r3, r3, #18
 80058ee:	3301      	adds	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058f2:	e002      	b.n	80058fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058fa:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005906:	d102      	bne.n	800590e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f2      	bne.n	80058f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800590e:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800591a:	d112      	bne.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e011      	b.n	8005944 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005926:	4a0a      	ldr	r2, [pc, #40]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800592c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005930:	e007      	b.n	8005942 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005932:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800593a:	4a05      	ldr	r2, [pc, #20]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005940:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40007000 	.word	0x40007000
 8005954:	20000018 	.word	0x20000018
 8005958:	431bde83 	.word	0x431bde83

0800595c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005960:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4a04      	ldr	r2, [pc, #16]	@ (8005978 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005966:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800596a:	6093      	str	r3, [r2, #8]
}
 800596c:	bf00      	nop
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40007000 	.word	0x40007000

0800597c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e2fe      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d075      	beq.n	8005a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800599a:	4b97      	ldr	r3, [pc, #604]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 030c 	and.w	r3, r3, #12
 80059a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059a4:	4b94      	ldr	r3, [pc, #592]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	d102      	bne.n	80059ba <HAL_RCC_OscConfig+0x3e>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d002      	beq.n	80059c0 <HAL_RCC_OscConfig+0x44>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d10b      	bne.n	80059d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c0:	4b8d      	ldr	r3, [pc, #564]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d05b      	beq.n	8005a84 <HAL_RCC_OscConfig+0x108>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d157      	bne.n	8005a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e2d9      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e0:	d106      	bne.n	80059f0 <HAL_RCC_OscConfig+0x74>
 80059e2:	4b85      	ldr	r3, [pc, #532]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a84      	ldr	r2, [pc, #528]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e01d      	b.n	8005a2c <HAL_RCC_OscConfig+0xb0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059f8:	d10c      	bne.n	8005a14 <HAL_RCC_OscConfig+0x98>
 80059fa:	4b7f      	ldr	r3, [pc, #508]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a7e      	ldr	r2, [pc, #504]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	4b7c      	ldr	r3, [pc, #496]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a7b      	ldr	r2, [pc, #492]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e00b      	b.n	8005a2c <HAL_RCC_OscConfig+0xb0>
 8005a14:	4b78      	ldr	r3, [pc, #480]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a77      	ldr	r2, [pc, #476]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	4b75      	ldr	r3, [pc, #468]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a74      	ldr	r2, [pc, #464]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d013      	beq.n	8005a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7ff fb3e 	bl	80050b4 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a3c:	f7ff fb3a 	bl	80050b4 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b64      	cmp	r3, #100	@ 0x64
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e29e      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0xc0>
 8005a5a:	e014      	b.n	8005a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7ff fb2a 	bl	80050b4 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a64:	f7ff fb26 	bl	80050b4 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b64      	cmp	r3, #100	@ 0x64
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e28a      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a76:	4b60      	ldr	r3, [pc, #384]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0xe8>
 8005a82:	e000      	b.n	8005a86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d075      	beq.n	8005b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a92:	4b59      	ldr	r3, [pc, #356]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a9c:	4b56      	ldr	r3, [pc, #344]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	d102      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x136>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d002      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x13c>
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d11f      	bne.n	8005af8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x154>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e25d      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad0:	4b49      	ldr	r3, [pc, #292]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	061b      	lsls	r3, r3, #24
 8005ade:	4946      	ldr	r1, [pc, #280]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ae4:	4b45      	ldr	r3, [pc, #276]	@ (8005bfc <HAL_RCC_OscConfig+0x280>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff fa97 	bl	800501c <HAL_InitTick>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d043      	beq.n	8005b7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e249      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d023      	beq.n	8005b48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b00:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a3c      	ldr	r2, [pc, #240]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7ff fad2 	bl	80050b4 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b14:	f7ff face 	bl	80050b4 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e232      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b26:	4b34      	ldr	r3, [pc, #208]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b32:	4b31      	ldr	r3, [pc, #196]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	061b      	lsls	r3, r3, #24
 8005b40:	492d      	ldr	r1, [pc, #180]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
 8005b46:	e01a      	b.n	8005b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b48:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7ff faae 	bl	80050b4 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b5c:	f7ff faaa 	bl	80050b4 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e20e      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b6e:	4b22      	ldr	r3, [pc, #136]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x1e0>
 8005b7a:	e000      	b.n	8005b7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d041      	beq.n	8005c0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01c      	beq.n	8005bcc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b92:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b98:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba2:	f7ff fa87 	bl	80050b4 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005baa:	f7ff fa83 	bl	80050b4 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e1e7      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ef      	beq.n	8005baa <HAL_RCC_OscConfig+0x22e>
 8005bca:	e020      	b.n	8005c0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bd2:	4a09      	ldr	r2, [pc, #36]	@ (8005bf8 <HAL_RCC_OscConfig+0x27c>)
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7ff fa6a 	bl	80050b4 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005be2:	e00d      	b.n	8005c00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005be4:	f7ff fa66 	bl	80050b4 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d906      	bls.n	8005c00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e1ca      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	20000030 	.word	0x20000030
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c00:	4b8c      	ldr	r3, [pc, #560]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1ea      	bne.n	8005be4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 80a6 	beq.w	8005d68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c20:	4b84      	ldr	r3, [pc, #528]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_OscConfig+0x2b4>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_RCC_OscConfig+0x2b6>
 8005c30:	2300      	movs	r3, #0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c36:	4b7f      	ldr	r3, [pc, #508]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c42:	4b7c      	ldr	r3, [pc, #496]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c52:	4b79      	ldr	r3, [pc, #484]	@ (8005e38 <HAL_RCC_OscConfig+0x4bc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d118      	bne.n	8005c90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c5e:	4b76      	ldr	r3, [pc, #472]	@ (8005e38 <HAL_RCC_OscConfig+0x4bc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a75      	ldr	r2, [pc, #468]	@ (8005e38 <HAL_RCC_OscConfig+0x4bc>)
 8005c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c6a:	f7ff fa23 	bl	80050b4 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c72:	f7ff fa1f 	bl	80050b4 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e183      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c84:	4b6c      	ldr	r3, [pc, #432]	@ (8005e38 <HAL_RCC_OscConfig+0x4bc>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d108      	bne.n	8005caa <HAL_RCC_OscConfig+0x32e>
 8005c98:	4b66      	ldr	r3, [pc, #408]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9e:	4a65      	ldr	r2, [pc, #404]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ca8:	e024      	b.n	8005cf4 <HAL_RCC_OscConfig+0x378>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b05      	cmp	r3, #5
 8005cb0:	d110      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x358>
 8005cb2:	4b60      	ldr	r3, [pc, #384]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb8:	4a5e      	ldr	r2, [pc, #376]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cba:	f043 0304 	orr.w	r3, r3, #4
 8005cbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cd2:	e00f      	b.n	8005cf4 <HAL_RCC_OscConfig+0x378>
 8005cd4:	4b57      	ldr	r3, [pc, #348]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cda:	4a56      	ldr	r2, [pc, #344]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ce4:	4b53      	ldr	r3, [pc, #332]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cea:	4a52      	ldr	r2, [pc, #328]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005cec:	f023 0304 	bic.w	r3, r3, #4
 8005cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d016      	beq.n	8005d2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7ff f9da 	bl	80050b4 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7ff f9d6 	bl	80050b4 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e138      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d1a:	4b46      	ldr	r3, [pc, #280]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0ed      	beq.n	8005d04 <HAL_RCC_OscConfig+0x388>
 8005d28:	e015      	b.n	8005d56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2a:	f7ff f9c3 	bl	80050b4 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d30:	e00a      	b.n	8005d48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d32:	f7ff f9bf 	bl	80050b4 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e121      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d48:	4b3a      	ldr	r3, [pc, #232]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1ed      	bne.n	8005d32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d56:	7ffb      	ldrb	r3, [r7, #31]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d105      	bne.n	8005d68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5c:	4b35      	ldr	r3, [pc, #212]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d60:	4a34      	ldr	r2, [pc, #208]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d03c      	beq.n	8005dee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01c      	beq.n	8005db6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d82:	4a2c      	ldr	r2, [pc, #176]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8c:	f7ff f992 	bl	80050b4 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d94:	f7ff f98e 	bl	80050b4 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e0f2      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005da6:	4b23      	ldr	r3, [pc, #140]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0ef      	beq.n	8005d94 <HAL_RCC_OscConfig+0x418>
 8005db4:	e01b      	b.n	8005dee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005db6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc6:	f7ff f975 	bl	80050b4 <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dce:	f7ff f971 	bl	80050b4 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e0d5      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005de0:	4b14      	ldr	r3, [pc, #80]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ef      	bne.n	8005dce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80c9 	beq.w	8005f8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005df8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 030c 	and.w	r3, r3, #12
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	f000 8083 	beq.w	8005f0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d15e      	bne.n	8005ecc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0e:	4b09      	ldr	r3, [pc, #36]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a08      	ldr	r2, [pc, #32]	@ (8005e34 <HAL_RCC_OscConfig+0x4b8>)
 8005e14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1a:	f7ff f94b 	bl	80050b4 <HAL_GetTick>
 8005e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e20:	e00c      	b.n	8005e3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e22:	f7ff f947 	bl	80050b4 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d905      	bls.n	8005e3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e0ab      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e3c:	4b55      	ldr	r3, [pc, #340]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1ec      	bne.n	8005e22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e48:	4b52      	ldr	r3, [pc, #328]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	4b52      	ldr	r3, [pc, #328]	@ (8005f98 <HAL_RCC_OscConfig+0x61c>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6a11      	ldr	r1, [r2, #32]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	0112      	lsls	r2, r2, #4
 8005e5c:	4311      	orrs	r1, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e62:	0212      	lsls	r2, r2, #8
 8005e64:	4311      	orrs	r1, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e6a:	0852      	lsrs	r2, r2, #1
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	0552      	lsls	r2, r2, #21
 8005e70:	4311      	orrs	r1, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e76:	0852      	lsrs	r2, r2, #1
 8005e78:	3a01      	subs	r2, #1
 8005e7a:	0652      	lsls	r2, r2, #25
 8005e7c:	4311      	orrs	r1, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e82:	06d2      	lsls	r2, r2, #27
 8005e84:	430a      	orrs	r2, r1
 8005e86:	4943      	ldr	r1, [pc, #268]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e8c:	4b41      	ldr	r3, [pc, #260]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a40      	ldr	r2, [pc, #256]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e98:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4a3d      	ldr	r2, [pc, #244]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ea2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea4:	f7ff f906 	bl	80050b4 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eac:	f7ff f902 	bl	80050b4 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e066      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ebe:	4b35      	ldr	r3, [pc, #212]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0f0      	beq.n	8005eac <HAL_RCC_OscConfig+0x530>
 8005eca:	e05e      	b.n	8005f8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ecc:	4b31      	ldr	r3, [pc, #196]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a30      	ldr	r2, [pc, #192]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7ff f8ec 	bl	80050b4 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee0:	f7ff f8e8 	bl	80050b4 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e04c      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ef2:	4b28      	ldr	r3, [pc, #160]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005efe:	4b25      	ldr	r3, [pc, #148]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	4924      	ldr	r1, [pc, #144]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005f04:	4b25      	ldr	r3, [pc, #148]	@ (8005f9c <HAL_RCC_OscConfig+0x620>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	60cb      	str	r3, [r1, #12]
 8005f0a:	e03e      	b.n	8005f8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e039      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f18:	4b1e      	ldr	r3, [pc, #120]	@ (8005f94 <HAL_RCC_OscConfig+0x618>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f003 0203 	and.w	r2, r3, #3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d12c      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	3b01      	subs	r3, #1
 8005f38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d123      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d11b      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d113      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f68:	085b      	lsrs	r3, r3, #1
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d109      	bne.n	8005f86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d001      	beq.n	8005f8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40021000 	.word	0x40021000
 8005f98:	019f800c 	.word	0x019f800c
 8005f9c:	feeefffc 	.word	0xfeeefffc

08005fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e11e      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b91      	ldr	r3, [pc, #580]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d910      	bls.n	8005fe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b8e      	ldr	r3, [pc, #568]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 020f 	bic.w	r2, r3, #15
 8005fce:	498c      	ldr	r1, [pc, #560]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	4b8a      	ldr	r3, [pc, #552]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e106      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d073      	beq.n	80060dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d129      	bne.n	8006050 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ffc:	4b81      	ldr	r3, [pc, #516]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0f4      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800600c:	f000 f99e 	bl	800634c <RCC_GetSysClockFreqFromPLLSource>
 8006010:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4a7c      	ldr	r2, [pc, #496]	@ (8006208 <HAL_RCC_ClockConfig+0x268>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d93f      	bls.n	800609a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800601a:	4b7a      	ldr	r3, [pc, #488]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800602e:	2b00      	cmp	r3, #0
 8006030:	d033      	beq.n	800609a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006036:	2b00      	cmp	r3, #0
 8006038:	d12f      	bne.n	800609a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800603a:	4b72      	ldr	r3, [pc, #456]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006042:	4a70      	ldr	r2, [pc, #448]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006048:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800604a:	2380      	movs	r3, #128	@ 0x80
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e024      	b.n	800609a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d107      	bne.n	8006068 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006058:	4b6a      	ldr	r3, [pc, #424]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0c6      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006068:	4b66      	ldr	r3, [pc, #408]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0be      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006078:	f000 f8ce 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 800607c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4a61      	ldr	r2, [pc, #388]	@ (8006208 <HAL_RCC_ClockConfig+0x268>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d909      	bls.n	800609a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006086:	4b5f      	ldr	r3, [pc, #380]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800608e:	4a5d      	ldr	r2, [pc, #372]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006094:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006096:	2380      	movs	r3, #128	@ 0x80
 8006098:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800609a:	4b5a      	ldr	r3, [pc, #360]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f023 0203 	bic.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4957      	ldr	r1, [pc, #348]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ac:	f7ff f802 	bl	80050b4 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b4:	f7fe fffe 	bl	80050b4 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e095      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	4b4e      	ldr	r3, [pc, #312]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 020c 	and.w	r2, r3, #12
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d1eb      	bne.n	80060b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d023      	beq.n	8006130 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060f4:	4b43      	ldr	r3, [pc, #268]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4a42      	ldr	r2, [pc, #264]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80060fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80060fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800610c:	4b3d      	ldr	r3, [pc, #244]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006114:	4a3b      	ldr	r2, [pc, #236]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006116:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800611a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800611c:	4b39      	ldr	r3, [pc, #228]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4936      	ldr	r1, [pc, #216]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
 800612e:	e008      	b.n	8006142 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2b80      	cmp	r3, #128	@ 0x80
 8006134:	d105      	bne.n	8006142 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006136:	4b33      	ldr	r3, [pc, #204]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	4a32      	ldr	r2, [pc, #200]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800613c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006140:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006142:	4b2f      	ldr	r3, [pc, #188]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d21d      	bcs.n	800618c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006150:	4b2b      	ldr	r3, [pc, #172]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f023 020f 	bic.w	r2, r3, #15
 8006158:	4929      	ldr	r1, [pc, #164]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	4313      	orrs	r3, r2
 800615e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006160:	f7fe ffa8 	bl	80050b4 <HAL_GetTick>
 8006164:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006166:	e00a      	b.n	800617e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006168:	f7fe ffa4 	bl	80050b4 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006176:	4293      	cmp	r3, r2
 8006178:	d901      	bls.n	800617e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e03b      	b.n	80061f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b20      	ldr	r3, [pc, #128]	@ (8006200 <HAL_RCC_ClockConfig+0x260>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d1ed      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006198:	4b1a      	ldr	r3, [pc, #104]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4917      	ldr	r1, [pc, #92]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061b6:	4b13      	ldr	r3, [pc, #76]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	490f      	ldr	r1, [pc, #60]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061ca:	f000 f825 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80061ce:	4602      	mov	r2, r0
 80061d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006204 <HAL_RCC_ClockConfig+0x264>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	490c      	ldr	r1, [pc, #48]	@ (800620c <HAL_RCC_ClockConfig+0x26c>)
 80061dc:	5ccb      	ldrb	r3, [r1, r3]
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	fa22 f303 	lsr.w	r3, r2, r3
 80061e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006210 <HAL_RCC_ClockConfig+0x270>)
 80061e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80061ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006214 <HAL_RCC_ClockConfig+0x274>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe ff14 	bl	800501c <HAL_InitTick>
 80061f4:	4603      	mov	r3, r0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40022000 	.word	0x40022000
 8006204:	40021000 	.word	0x40021000
 8006208:	04c4b400 	.word	0x04c4b400
 800620c:	0800c5b8 	.word	0x0800c5b8
 8006210:	20000018 	.word	0x20000018
 8006214:	20000030 	.word	0x20000030

08006218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800621e:	4b2c      	ldr	r3, [pc, #176]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b04      	cmp	r3, #4
 8006228:	d102      	bne.n	8006230 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800622a:	4b2a      	ldr	r3, [pc, #168]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	e047      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006230:	4b27      	ldr	r3, [pc, #156]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 030c 	and.w	r3, r3, #12
 8006238:	2b08      	cmp	r3, #8
 800623a:	d102      	bne.n	8006242 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800623c:	4b26      	ldr	r3, [pc, #152]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	e03e      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006242:	4b23      	ldr	r3, [pc, #140]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 030c 	and.w	r3, r3, #12
 800624a:	2b0c      	cmp	r3, #12
 800624c:	d136      	bne.n	80062bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800624e:	4b20      	ldr	r3, [pc, #128]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006258:	4b1d      	ldr	r3, [pc, #116]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	3301      	adds	r3, #1
 8006264:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d10c      	bne.n	8006286 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800626c:	4a1a      	ldr	r2, [pc, #104]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	4a16      	ldr	r2, [pc, #88]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006276:	68d2      	ldr	r2, [r2, #12]
 8006278:	0a12      	lsrs	r2, r2, #8
 800627a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	617b      	str	r3, [r7, #20]
      break;
 8006284:	e00c      	b.n	80062a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006286:	4a13      	ldr	r2, [pc, #76]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	fbb2 f3f3 	udiv	r3, r2, r3
 800628e:	4a10      	ldr	r2, [pc, #64]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006290:	68d2      	ldr	r2, [r2, #12]
 8006292:	0a12      	lsrs	r2, r2, #8
 8006294:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006298:	fb02 f303 	mul.w	r3, r2, r3
 800629c:	617b      	str	r3, [r7, #20]
      break;
 800629e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062a0:	4b0b      	ldr	r3, [pc, #44]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	0e5b      	lsrs	r3, r3, #25
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	3301      	adds	r3, #1
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	e001      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062c0:	693b      	ldr	r3, [r7, #16]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40021000 	.word	0x40021000
 80062d4:	00f42400 	.word	0x00f42400
 80062d8:	007a1200 	.word	0x007a1200

080062dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e0:	4b03      	ldr	r3, [pc, #12]	@ (80062f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062e2:	681b      	ldr	r3, [r3, #0]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20000018 	.word	0x20000018

080062f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062f8:	f7ff fff0 	bl	80062dc <HAL_RCC_GetHCLKFreq>
 80062fc:	4602      	mov	r2, r0
 80062fe:	4b06      	ldr	r3, [pc, #24]	@ (8006318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	4904      	ldr	r1, [pc, #16]	@ (800631c <HAL_RCC_GetPCLK1Freq+0x28>)
 800630a:	5ccb      	ldrb	r3, [r1, r3]
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40021000 	.word	0x40021000
 800631c:	0800c5c8 	.word	0x0800c5c8

08006320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006324:	f7ff ffda 	bl	80062dc <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b06      	ldr	r3, [pc, #24]	@ (8006344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0adb      	lsrs	r3, r3, #11
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4904      	ldr	r1, [pc, #16]	@ (8006348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40021000 	.word	0x40021000
 8006348:	0800c5c8 	.word	0x0800c5c8

0800634c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006352:	4b1e      	ldr	r3, [pc, #120]	@ (80063cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800635c:	4b1b      	ldr	r3, [pc, #108]	@ (80063cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	3301      	adds	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d10c      	bne.n	800638a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006370:	4a17      	ldr	r2, [pc, #92]	@ (80063d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	4a14      	ldr	r2, [pc, #80]	@ (80063cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800637a:	68d2      	ldr	r2, [r2, #12]
 800637c:	0a12      	lsrs	r2, r2, #8
 800637e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	617b      	str	r3, [r7, #20]
    break;
 8006388:	e00c      	b.n	80063a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800638a:	4a12      	ldr	r2, [pc, #72]	@ (80063d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006392:	4a0e      	ldr	r2, [pc, #56]	@ (80063cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006394:	68d2      	ldr	r2, [r2, #12]
 8006396:	0a12      	lsrs	r2, r2, #8
 8006398:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]
    break;
 80063a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063a4:	4b09      	ldr	r3, [pc, #36]	@ (80063cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	0e5b      	lsrs	r3, r3, #25
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	3301      	adds	r3, #1
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80063be:	687b      	ldr	r3, [r7, #4]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	40021000 	.word	0x40021000
 80063d0:	007a1200 	.word	0x007a1200
 80063d4:	00f42400 	.word	0x00f42400

080063d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063e0:	2300      	movs	r3, #0
 80063e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063e4:	2300      	movs	r3, #0
 80063e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8098 	beq.w	8006526 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063f6:	2300      	movs	r3, #0
 80063f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063fa:	4b43      	ldr	r3, [pc, #268]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10d      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006406:	4b40      	ldr	r3, [pc, #256]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800640a:	4a3f      	ldr	r2, [pc, #252]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800640c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006410:	6593      	str	r3, [r2, #88]	@ 0x58
 8006412:	4b3d      	ldr	r3, [pc, #244]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800641a:	60bb      	str	r3, [r7, #8]
 800641c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800641e:	2301      	movs	r3, #1
 8006420:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006422:	4b3a      	ldr	r3, [pc, #232]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a39      	ldr	r2, [pc, #228]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800642c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800642e:	f7fe fe41 	bl	80050b4 <HAL_GetTick>
 8006432:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006434:	e009      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006436:	f7fe fe3d 	bl	80050b4 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d902      	bls.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	74fb      	strb	r3, [r7, #19]
        break;
 8006448:	e005      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800644a:	4b30      	ldr	r3, [pc, #192]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0ef      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006456:	7cfb      	ldrb	r3, [r7, #19]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d159      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800645c:	4b2a      	ldr	r3, [pc, #168]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006466:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d01e      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	429a      	cmp	r2, r3
 8006476:	d019      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006478:	4b23      	ldr	r3, [pc, #140]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800647e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006482:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006484:	4b20      	ldr	r3, [pc, #128]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648a:	4a1f      	ldr	r2, [pc, #124]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800648c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006494:	4b1c      	ldr	r3, [pc, #112]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649a:	4a1b      	ldr	r2, [pc, #108]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800649c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064a4:	4a18      	ldr	r2, [pc, #96]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b6:	f7fe fdfd 	bl	80050b4 <HAL_GetTick>
 80064ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064bc:	e00b      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064be:	f7fe fdf9 	bl	80050b4 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d902      	bls.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	74fb      	strb	r3, [r7, #19]
            break;
 80064d4:	e006      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0ec      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064ea:	4b07      	ldr	r3, [pc, #28]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f8:	4903      	ldr	r1, [pc, #12]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006500:	e008      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006502:	7cfb      	ldrb	r3, [r7, #19]
 8006504:	74bb      	strb	r3, [r7, #18]
 8006506:	e005      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006508:	40021000 	.word	0x40021000
 800650c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006514:	7c7b      	ldrb	r3, [r7, #17]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d105      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800651a:	4ba6      	ldr	r3, [pc, #664]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800651c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651e:	4aa5      	ldr	r2, [pc, #660]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006524:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006532:	4ba0      	ldr	r3, [pc, #640]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006538:	f023 0203 	bic.w	r2, r3, #3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	499c      	ldr	r1, [pc, #624]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006554:	4b97      	ldr	r3, [pc, #604]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f023 020c 	bic.w	r2, r3, #12
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	4994      	ldr	r1, [pc, #592]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006576:	4b8f      	ldr	r3, [pc, #572]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	498b      	ldr	r1, [pc, #556]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006598:	4b86      	ldr	r3, [pc, #536]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800659a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	4983      	ldr	r1, [pc, #524]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065ba:	4b7e      	ldr	r3, [pc, #504]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	497a      	ldr	r1, [pc, #488]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065dc:	4b75      	ldr	r3, [pc, #468]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	4972      	ldr	r1, [pc, #456]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065fe:	4b6d      	ldr	r3, [pc, #436]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006604:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	4969      	ldr	r1, [pc, #420]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006620:	4b64      	ldr	r3, [pc, #400]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006626:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	4961      	ldr	r1, [pc, #388]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006630:	4313      	orrs	r3, r2
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006642:	4b5c      	ldr	r3, [pc, #368]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006648:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	4958      	ldr	r1, [pc, #352]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006660:	2b00      	cmp	r3, #0
 8006662:	d015      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006664:	4b53      	ldr	r3, [pc, #332]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006672:	4950      	ldr	r1, [pc, #320]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006674:	4313      	orrs	r3, r2
 8006676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006682:	d105      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006684:	4b4b      	ldr	r3, [pc, #300]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4a4a      	ldr	r2, [pc, #296]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800668a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800668e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006698:	2b00      	cmp	r3, #0
 800669a:	d015      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800669c:	4b45      	ldr	r3, [pc, #276]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066aa:	4942      	ldr	r1, [pc, #264]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066ba:	d105      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066bc:	4b3d      	ldr	r3, [pc, #244]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4a3c      	ldr	r2, [pc, #240]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d015      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066d4:	4b37      	ldr	r3, [pc, #220]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	4934      	ldr	r1, [pc, #208]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066f2:	d105      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066f4:	4b2f      	ldr	r3, [pc, #188]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4a2e      	ldr	r2, [pc, #184]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d015      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800670c:	4b29      	ldr	r3, [pc, #164]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006712:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671a:	4926      	ldr	r1, [pc, #152]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800672a:	d105      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800672c:	4b21      	ldr	r3, [pc, #132]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	4a20      	ldr	r2, [pc, #128]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006736:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006744:	4b1b      	ldr	r3, [pc, #108]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006752:	4918      	ldr	r1, [pc, #96]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006762:	d105      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006764:	4b13      	ldr	r3, [pc, #76]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4a12      	ldr	r2, [pc, #72]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800676a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800676e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d015      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800677c:	4b0d      	ldr	r3, [pc, #52]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006782:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800678a:	490a      	ldr	r1, [pc, #40]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800679a:	d105      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800679c:	4b05      	ldr	r3, [pc, #20]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4a04      	ldr	r2, [pc, #16]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40021000 	.word	0x40021000

080067b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e09d      	b.n	8006906 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d108      	bne.n	80067e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067da:	d009      	beq.n	80067f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	61da      	str	r2, [r3, #28]
 80067e2:	e005      	b.n	80067f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f87f 	bl	800690e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006826:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006830:	d902      	bls.n	8006838 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e002      	b.n	800683e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800683c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006846:	d007      	beq.n	8006858 <HAL_SPI_Init+0xa0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006850:	d002      	beq.n	8006858 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689a:	ea42 0103 	orr.w	r1, r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	0c1b      	lsrs	r3, r3, #16
 80068b4:	f003 0204 	and.w	r2, r3, #4
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80068d4:	ea42 0103 	orr.w	r1, r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b088      	sub	sp, #32
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	603b      	str	r3, [r7, #0]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_SPI_Transmit+0x22>
 8006940:	2302      	movs	r3, #2
 8006942:	e15f      	b.n	8006c04 <HAL_SPI_Transmit+0x2e2>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800694c:	f7fe fbb2 	bl	80050b4 <HAL_GetTick>
 8006950:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b01      	cmp	r3, #1
 8006960:	d002      	beq.n	8006968 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006962:	2302      	movs	r3, #2
 8006964:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006966:	e148      	b.n	8006bfa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <HAL_SPI_Transmit+0x52>
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d102      	bne.n	800697a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006978:	e13f      	b.n	8006bfa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2203      	movs	r2, #3
 800697e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	88fa      	ldrh	r2, [r7, #6]
 8006992:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	88fa      	ldrh	r2, [r7, #6]
 8006998:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069c4:	d10f      	bne.n	80069e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f0:	2b40      	cmp	r3, #64	@ 0x40
 80069f2:	d007      	beq.n	8006a04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a0c:	d94f      	bls.n	8006aae <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_SPI_Transmit+0xfa>
 8006a16:	8afb      	ldrh	r3, [r7, #22]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d142      	bne.n	8006aa2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a20:	881a      	ldrh	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2c:	1c9a      	adds	r2, r3, #2
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a40:	e02f      	b.n	8006aa2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d112      	bne.n	8006a76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a54:	881a      	ldrh	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a60:	1c9a      	adds	r2, r3, #2
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a74:	e015      	b.n	8006aa2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a76:	f7fe fb1d 	bl	80050b4 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d803      	bhi.n	8006a8e <HAL_SPI_Transmit+0x16c>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a8c:	d102      	bne.n	8006a94 <HAL_SPI_Transmit+0x172>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d106      	bne.n	8006aa2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006aa0:	e0ab      	b.n	8006bfa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ca      	bne.n	8006a42 <HAL_SPI_Transmit+0x120>
 8006aac:	e080      	b.n	8006bb0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_SPI_Transmit+0x19a>
 8006ab6:	8afb      	ldrh	r3, [r7, #22]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d174      	bne.n	8006ba6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d912      	bls.n	8006aec <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aca:	881a      	ldrh	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad6:	1c9a      	adds	r2, r3, #2
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3b02      	subs	r3, #2
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006aea:	e05c      	b.n	8006ba6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	330c      	adds	r3, #12
 8006af6:	7812      	ldrb	r2, [r2, #0]
 8006af8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006b12:	e048      	b.n	8006ba6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d12b      	bne.n	8006b7a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d912      	bls.n	8006b52 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b30:	881a      	ldrh	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	1c9a      	adds	r2, r3, #2
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b02      	subs	r3, #2
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b50:	e029      	b.n	8006ba6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	7812      	ldrb	r2, [r2, #0]
 8006b5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b78:	e015      	b.n	8006ba6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b7a:	f7fe fa9b 	bl	80050b4 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d803      	bhi.n	8006b92 <HAL_SPI_Transmit+0x270>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b90:	d102      	bne.n	8006b98 <HAL_SPI_Transmit+0x276>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006ba4:	e029      	b.n	8006bfa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1b1      	bne.n	8006b14 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 fcf9 	bl	80075ac <SPI_EndRxTxTransaction>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bce:	2300      	movs	r3, #0
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e003      	b.n	8006bfa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006c02:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3720      	adds	r7, #32
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d002      	beq.n	8006c32 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c30:	e11a      	b.n	8006e68 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c3a:	d112      	bne.n	8006c62 <HAL_SPI_Receive+0x56>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10e      	bne.n	8006c62 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2204      	movs	r2, #4
 8006c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c4c:	88fa      	ldrh	r2, [r7, #6]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4613      	mov	r3, r2
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f90e 	bl	8006e7a <HAL_SPI_TransmitReceive>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	e107      	b.n	8006e72 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_SPI_Receive+0x64>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e100      	b.n	8006e72 <HAL_SPI_Receive+0x266>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c78:	f7fe fa1c 	bl	80050b4 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <HAL_SPI_Receive+0x7e>
 8006c84:	88fb      	ldrh	r3, [r7, #6]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c8e:	e0eb      	b.n	8006e68 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2204      	movs	r2, #4
 8006c94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	88fa      	ldrh	r2, [r7, #6]
 8006ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	88fa      	ldrh	r2, [r7, #6]
 8006cb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cda:	d908      	bls.n	8006cee <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cea:	605a      	str	r2, [r3, #4]
 8006cec:	e007      	b.n	8006cfe <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006cfc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d06:	d10f      	bne.n	8006d28 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d26:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d32:	2b40      	cmp	r3, #64	@ 0x40
 8006d34:	d007      	beq.n	8006d46 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d4e:	d86f      	bhi.n	8006e30 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d50:	e034      	b.n	8006dbc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d117      	bne.n	8006d90 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f103 020c 	add.w	r2, r3, #12
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6c:	7812      	ldrb	r2, [r2, #0]
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006d8e:	e015      	b.n	8006dbc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d90:	f7fe f990 	bl	80050b4 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d803      	bhi.n	8006da8 <HAL_SPI_Receive+0x19c>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006da6:	d102      	bne.n	8006dae <HAL_SPI_Receive+0x1a2>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006dba:	e055      	b.n	8006e68 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1c4      	bne.n	8006d52 <HAL_SPI_Receive+0x146>
 8006dc8:	e038      	b.n	8006e3c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d115      	bne.n	8006e04 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	b292      	uxth	r2, r2
 8006de4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dea:	1c9a      	adds	r2, r3, #2
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006e02:	e015      	b.n	8006e30 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e04:	f7fe f956 	bl	80050b4 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d803      	bhi.n	8006e1c <HAL_SPI_Receive+0x210>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e1a:	d102      	bne.n	8006e22 <HAL_SPI_Receive+0x216>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006e2e:	e01b      	b.n	8006e68 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1c6      	bne.n	8006dca <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fb5b 	bl	80074fc <SPI_EndRxTransaction>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
 8006e5e:	e003      	b.n	8006e68 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b08a      	sub	sp, #40	@ 0x28
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	607a      	str	r2, [r7, #4]
 8006e86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_SPI_TransmitReceive+0x26>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e20a      	b.n	80072b6 <HAL_SPI_TransmitReceive+0x43c>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ea8:	f7fe f904 	bl	80050b4 <HAL_GetTick>
 8006eac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006eb4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ebc:	887b      	ldrh	r3, [r7, #2]
 8006ebe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006ec0:	887b      	ldrh	r3, [r7, #2]
 8006ec2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ec4:	7efb      	ldrb	r3, [r7, #27]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d00e      	beq.n	8006ee8 <HAL_SPI_TransmitReceive+0x6e>
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ed0:	d106      	bne.n	8006ee0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <HAL_SPI_TransmitReceive+0x66>
 8006eda:	7efb      	ldrb	r3, [r7, #27]
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d003      	beq.n	8006ee8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006ee6:	e1e0      	b.n	80072aa <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_SPI_TransmitReceive+0x80>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_SPI_TransmitReceive+0x80>
 8006ef4:	887b      	ldrh	r3, [r7, #2]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d103      	bne.n	8006f02 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006f00:	e1d3      	b.n	80072aa <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d003      	beq.n	8006f16 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2205      	movs	r2, #5
 8006f12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	887a      	ldrh	r2, [r7, #2]
 8006f26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	887a      	ldrh	r2, [r7, #2]
 8006f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	887a      	ldrh	r2, [r7, #2]
 8006f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	887a      	ldrh	r2, [r7, #2]
 8006f42:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f58:	d802      	bhi.n	8006f60 <HAL_SPI_TransmitReceive+0xe6>
 8006f5a:	8a3b      	ldrh	r3, [r7, #16]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d908      	bls.n	8006f72 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f6e:	605a      	str	r2, [r3, #4]
 8006f70:	e007      	b.n	8006f82 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f80:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8c:	2b40      	cmp	r3, #64	@ 0x40
 8006f8e:	d007      	beq.n	8006fa0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fa8:	f240 8081 	bls.w	80070ae <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_SPI_TransmitReceive+0x140>
 8006fb4:	8a7b      	ldrh	r3, [r7, #18]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d16d      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbe:	881a      	ldrh	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fca:	1c9a      	adds	r2, r3, #2
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fde:	e05a      	b.n	8007096 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d11b      	bne.n	8007026 <HAL_SPI_TransmitReceive+0x1ac>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d016      	beq.n	8007026 <HAL_SPI_TransmitReceive+0x1ac>
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d113      	bne.n	8007026 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007002:	881a      	ldrh	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	1c9a      	adds	r2, r3, #2
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b01      	cmp	r3, #1
 8007032:	d11c      	bne.n	800706e <HAL_SPI_TransmitReceive+0x1f4>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d016      	beq.n	800706e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	b292      	uxth	r2, r2
 800704c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007052:	1c9a      	adds	r2, r3, #2
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800706a:	2301      	movs	r3, #1
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800706e:	f7fe f821 	bl	80050b4 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707a:	429a      	cmp	r2, r3
 800707c:	d80b      	bhi.n	8007096 <HAL_SPI_TransmitReceive+0x21c>
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007084:	d007      	beq.n	8007096 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007094:	e109      	b.n	80072aa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d19f      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x166>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d199      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x166>
 80070ac:	e0e3      	b.n	8007276 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_SPI_TransmitReceive+0x244>
 80070b6:	8a7b      	ldrh	r3, [r7, #18]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	f040 80cf 	bne.w	800725c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d912      	bls.n	80070ee <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070cc:	881a      	ldrh	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	1c9a      	adds	r2, r3, #2
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b02      	subs	r3, #2
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070ec:	e0b6      	b.n	800725c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007114:	e0a2      	b.n	800725c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b02      	cmp	r3, #2
 8007122:	d134      	bne.n	800718e <HAL_SPI_TransmitReceive+0x314>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d02f      	beq.n	800718e <HAL_SPI_TransmitReceive+0x314>
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	2b01      	cmp	r3, #1
 8007132:	d12c      	bne.n	800718e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b01      	cmp	r3, #1
 800713c:	d912      	bls.n	8007164 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	881a      	ldrh	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	1c9a      	adds	r2, r3, #2
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007158:	b29b      	uxth	r3, r3
 800715a:	3b02      	subs	r3, #2
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007162:	e012      	b.n	800718a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	7812      	ldrb	r2, [r2, #0]
 8007170:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b01      	cmp	r3, #1
 800719a:	d148      	bne.n	800722e <HAL_SPI_TransmitReceive+0x3b4>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d042      	beq.n	800722e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d923      	bls.n	80071fc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	b292      	uxth	r2, r2
 80071c0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	1c9a      	adds	r2, r3, #2
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b02      	subs	r3, #2
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d81f      	bhi.n	800722a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071f8:	605a      	str	r2, [r3, #4]
 80071fa:	e016      	b.n	800722a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f103 020c 	add.w	r2, r3, #12
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007208:	7812      	ldrb	r2, [r2, #0]
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800722a:	2301      	movs	r3, #1
 800722c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800722e:	f7fd ff41 	bl	80050b4 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800723a:	429a      	cmp	r2, r3
 800723c:	d803      	bhi.n	8007246 <HAL_SPI_TransmitReceive+0x3cc>
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007244:	d102      	bne.n	800724c <HAL_SPI_TransmitReceive+0x3d2>
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	2b00      	cmp	r3, #0
 800724a:	d107      	bne.n	800725c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800725a:	e026      	b.n	80072aa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	f47f af57 	bne.w	8007116 <HAL_SPI_TransmitReceive+0x29c>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800726e:	b29b      	uxth	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	f47f af50 	bne.w	8007116 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f996 	bl	80075ac <SPI_EndRxTxTransaction>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2220      	movs	r2, #32
 8007290:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a0:	e003      	b.n	80072aa <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80072b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3728      	adds	r7, #40	@ 0x28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072d0:	f7fd fef0 	bl	80050b4 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	4413      	add	r3, r2
 80072de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072e0:	f7fd fee8 	bl	80050b4 <HAL_GetTick>
 80072e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072e6:	4b39      	ldr	r3, [pc, #228]	@ (80073cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	015b      	lsls	r3, r3, #5
 80072ec:	0d1b      	lsrs	r3, r3, #20
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072f6:	e054      	b.n	80073a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072fe:	d050      	beq.n	80073a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007300:	f7fd fed8 	bl	80050b4 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	429a      	cmp	r2, r3
 800730e:	d902      	bls.n	8007316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d13d      	bne.n	8007392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800732e:	d111      	bne.n	8007354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007338:	d004      	beq.n	8007344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007342:	d107      	bne.n	8007354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800735c:	d10f      	bne.n	800737e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800737c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e017      	b.n	80073c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	3b01      	subs	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4013      	ands	r3, r2
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	bf0c      	ite	eq
 80073b2:	2301      	moveq	r3, #1
 80073b4:	2300      	movne	r3, #0
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d19b      	bne.n	80072f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000018 	.word	0x20000018

080073d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	@ 0x28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073e2:	f7fd fe67 	bl	80050b4 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	4413      	add	r3, r2
 80073f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80073f2:	f7fd fe5f 	bl	80050b4 <HAL_GetTick>
 80073f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	330c      	adds	r3, #12
 80073fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007400:	4b3d      	ldr	r3, [pc, #244]	@ (80074f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	00da      	lsls	r2, r3, #3
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	0d1b      	lsrs	r3, r3, #20
 8007410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007412:	fb02 f303 	mul.w	r3, r2, r3
 8007416:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007418:	e060      	b.n	80074dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007420:	d107      	bne.n	8007432 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007430:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007438:	d050      	beq.n	80074dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800743a:	f7fd fe3b 	bl	80050b4 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007446:	429a      	cmp	r2, r3
 8007448:	d902      	bls.n	8007450 <SPI_WaitFifoStateUntilTimeout+0x80>
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	d13d      	bne.n	80074cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800745e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007468:	d111      	bne.n	800748e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007472:	d004      	beq.n	800747e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800747c:	d107      	bne.n	800748e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800748c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007496:	d10f      	bne.n	80074b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e010      	b.n	80074ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	3b01      	subs	r3, #1
 80074da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	4013      	ands	r3, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d196      	bne.n	800741a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3728      	adds	r7, #40	@ 0x28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000018 	.word	0x20000018

080074fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af02      	add	r7, sp, #8
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007510:	d111      	bne.n	8007536 <SPI_EndRxTransaction+0x3a>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800751a:	d004      	beq.n	8007526 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007524:	d107      	bne.n	8007536 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007534:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2200      	movs	r2, #0
 800753e:	2180      	movs	r1, #128	@ 0x80
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff febd 	bl	80072c0 <SPI_WaitFlagStateUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d007      	beq.n	800755c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007550:	f043 0220 	orr.w	r2, r3, #32
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e023      	b.n	80075a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007564:	d11d      	bne.n	80075a2 <SPI_EndRxTransaction+0xa6>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800756e:	d004      	beq.n	800757a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007578:	d113      	bne.n	80075a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2200      	movs	r2, #0
 8007582:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f7ff ff22 	bl	80073d0 <SPI_WaitFifoStateUntilTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e000      	b.n	80075a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2200      	movs	r2, #0
 80075c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7ff ff03 	bl	80073d0 <SPI_WaitFifoStateUntilTimeout>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075d4:	f043 0220 	orr.w	r2, r3, #32
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e027      	b.n	8007630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2200      	movs	r2, #0
 80075e8:	2180      	movs	r1, #128	@ 0x80
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f7ff fe68 	bl	80072c0 <SPI_WaitFlagStateUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075fa:	f043 0220 	orr.w	r2, r3, #32
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e014      	b.n	8007630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2200      	movs	r2, #0
 800760e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff fedc 	bl	80073d0 <SPI_WaitFifoStateUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007622:	f043 0220 	orr.w	r2, r3, #32
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e000      	b.n	8007630 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e042      	b.n	80076d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fd fbb3 	bl	8004dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2224      	movs	r2, #36	@ 0x24
 8007666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0201 	bic.w	r2, r2, #1
 8007678:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 ff08 	bl	8008498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fc39 	bl	8007f00 <UART_SetConfig>
 800768e:	4603      	mov	r3, r0
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e01b      	b.n	80076d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 ff87 	bl	80085dc <UART_CheckIdleState>
 80076ce:	4603      	mov	r3, r0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08a      	sub	sp, #40	@ 0x28
 80076dc:	af02      	add	r7, sp, #8
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	d17b      	bne.n	80077ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_UART_Transmit+0x26>
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e074      	b.n	80077ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2221      	movs	r2, #33	@ 0x21
 800770e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007712:	f7fd fccf 	bl	80050b4 <HAL_GetTick>
 8007716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007730:	d108      	bne.n	8007744 <HAL_UART_Transmit+0x6c>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	e003      	b.n	800774c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007748:	2300      	movs	r3, #0
 800774a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800774c:	e030      	b.n	80077b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2200      	movs	r2, #0
 8007756:	2180      	movs	r1, #128	@ 0x80
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 ffe9 	bl	8008730 <UART_WaitOnFlagUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d005      	beq.n	8007770 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2220      	movs	r2, #32
 8007768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e03d      	b.n	80077ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10b      	bne.n	800778e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007784:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	3302      	adds	r3, #2
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	e007      	b.n	800779e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	3301      	adds	r3, #1
 800779c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1c8      	bne.n	800774e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2200      	movs	r2, #0
 80077c4:	2140      	movs	r1, #64	@ 0x40
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 ffb2 	bl	8008730 <UART_WaitOnFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e006      	b.n	80077ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e000      	b.n	80077ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077ea:	2302      	movs	r3, #2
  }
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3720      	adds	r7, #32
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	@ 0x28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007808:	2b20      	cmp	r3, #32
 800780a:	d137      	bne.n	800787c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <HAL_UART_Receive_IT+0x24>
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e030      	b.n	800787e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a18      	ldr	r2, [pc, #96]	@ (8007888 <HAL_UART_Receive_IT+0x94>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d01f      	beq.n	800786c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d018      	beq.n	800786c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	613b      	str	r3, [r7, #16]
   return(result);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	623b      	str	r3, [r7, #32]
 800785a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	69f9      	ldr	r1, [r7, #28]
 800785e:	6a3a      	ldr	r2, [r7, #32]
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	61bb      	str	r3, [r7, #24]
   return(result);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e6      	bne.n	800783a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800786c:	88fb      	ldrh	r3, [r7, #6]
 800786e:	461a      	mov	r2, r3
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 ffca 	bl	800880c <UART_Start_Receive_IT>
 8007878:	4603      	mov	r3, r0
 800787a:	e000      	b.n	800787e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800787c:	2302      	movs	r3, #2
  }
}
 800787e:	4618      	mov	r0, r3
 8007880:	3728      	adds	r7, #40	@ 0x28
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	40008000 	.word	0x40008000

0800788c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b0ba      	sub	sp, #232	@ 0xe8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80078b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80078ba:	4013      	ands	r3, r2
 80078bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80078c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d11b      	bne.n	8007900 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d015      	beq.n	8007900 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d105      	bne.n	80078ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d009      	beq.n	8007900 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 82e3 	beq.w	8007ebc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
      }
      return;
 80078fe:	e2dd      	b.n	8007ebc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8123 	beq.w	8007b50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800790a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800790e:	4b8d      	ldr	r3, [pc, #564]	@ (8007b44 <HAL_UART_IRQHandler+0x2b8>)
 8007910:	4013      	ands	r3, r2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007916:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800791a:	4b8b      	ldr	r3, [pc, #556]	@ (8007b48 <HAL_UART_IRQHandler+0x2bc>)
 800791c:	4013      	ands	r3, r2
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8116 	beq.w	8007b50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d011      	beq.n	8007954 <HAL_UART_IRQHandler+0xc8>
 8007930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2201      	movs	r2, #1
 8007942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794a:	f043 0201 	orr.w	r2, r3, #1
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d011      	beq.n	8007984 <HAL_UART_IRQHandler+0xf8>
 8007960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2202      	movs	r2, #2
 8007972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800797a:	f043 0204 	orr.w	r2, r3, #4
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d011      	beq.n	80079b4 <HAL_UART_IRQHandler+0x128>
 8007990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2204      	movs	r2, #4
 80079a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079aa:	f043 0202 	orr.w	r2, r3, #2
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b8:	f003 0308 	and.w	r3, r3, #8
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d017      	beq.n	80079f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d105      	bne.n	80079d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80079cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80079d0:	4b5c      	ldr	r3, [pc, #368]	@ (8007b44 <HAL_UART_IRQHandler+0x2b8>)
 80079d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00b      	beq.n	80079f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2208      	movs	r2, #8
 80079de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e6:	f043 0208 	orr.w	r2, r3, #8
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d012      	beq.n	8007a22 <HAL_UART_IRQHandler+0x196>
 80079fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00c      	beq.n	8007a22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8249 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d013      	beq.n	8007a62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d105      	bne.n	8007a52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a76:	2b40      	cmp	r3, #64	@ 0x40
 8007a78:	d005      	beq.n	8007a86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d054      	beq.n	8007b30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 ffe2 	bl	8008a50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d146      	bne.n	8007b28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1d9      	bne.n	8007a9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d017      	beq.n	8007b20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007af6:	4a15      	ldr	r2, [pc, #84]	@ (8007b4c <HAL_UART_IRQHandler+0x2c0>)
 8007af8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fd fc6d 	bl	80053e0 <HAL_DMA_Abort_IT>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d019      	beq.n	8007b40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1e:	e00f      	b.n	8007b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fd f9e7 	bl	8004ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b26:	e00b      	b.n	8007b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7fd f9e3 	bl	8004ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2e:	e007      	b.n	8007b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fd f9df 	bl	8004ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007b3e:	e1bf      	b.n	8007ec0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b40:	bf00      	nop
    return;
 8007b42:	e1bd      	b.n	8007ec0 <HAL_UART_IRQHandler+0x634>
 8007b44:	10000001 	.word	0x10000001
 8007b48:	04000120 	.word	0x04000120
 8007b4c:	08008b1d 	.word	0x08008b1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	f040 8153 	bne.w	8007e00 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 814c 	beq.w	8007e00 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8145 	beq.w	8007e00 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2210      	movs	r2, #16
 8007b7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b88:	2b40      	cmp	r3, #64	@ 0x40
 8007b8a:	f040 80bb 	bne.w	8007d04 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 818f 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	f080 8187 	bcs.w	8007ec4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 8087 	bne.w	8007ce2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1da      	bne.n	8007bd4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e1      	bne.n	8007c1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e3      	bne.n	8007c5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cb0:	f023 0310 	bic.w	r3, r3, #16
 8007cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e4      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fd fb26 	bl	800532e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f8f3 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d02:	e0df      	b.n	8007ec4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 80d1 	beq.w	8007ec8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007d26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80cc 	beq.w	8007ec8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e4      	bne.n	8007d30 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	623b      	str	r3, [r7, #32]
   return(result);
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3308      	adds	r3, #8
 8007d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e1      	bne.n	8007d66 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	e853 3f00 	ldrex	r3, [r3]
 8007dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0310 	bic.w	r3, r3, #16
 8007dca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007dd8:	61fb      	str	r3, [r7, #28]
 8007dda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	69b9      	ldr	r1, [r7, #24]
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	617b      	str	r3, [r7, #20]
   return(result);
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e4      	bne.n	8007db6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f875 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dfe:	e063      	b.n	8007ec8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00e      	beq.n	8007e2a <HAL_UART_IRQHandler+0x59e>
 8007e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 fbd8 	bl	80095d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e28:	e051      	b.n	8007ece <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d014      	beq.n	8007e60 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d105      	bne.n	8007e4e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d008      	beq.n	8007e60 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d03a      	beq.n	8007ecc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	4798      	blx	r3
    }
    return;
 8007e5e:	e035      	b.n	8007ecc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <HAL_UART_IRQHandler+0x5f4>
 8007e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fe65 	bl	8008b48 <UART_EndTransmit_IT>
    return;
 8007e7e:	e026      	b.n	8007ece <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d009      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x614>
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fbb1 	bl	8009600 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e9e:	e016      	b.n	8007ece <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d010      	beq.n	8007ece <HAL_UART_IRQHandler+0x642>
 8007eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	da0c      	bge.n	8007ece <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 fb99 	bl	80095ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eba:	e008      	b.n	8007ece <HAL_UART_IRQHandler+0x642>
      return;
 8007ebc:	bf00      	nop
 8007ebe:	e006      	b.n	8007ece <HAL_UART_IRQHandler+0x642>
    return;
 8007ec0:	bf00      	nop
 8007ec2:	e004      	b.n	8007ece <HAL_UART_IRQHandler+0x642>
      return;
 8007ec4:	bf00      	nop
 8007ec6:	e002      	b.n	8007ece <HAL_UART_IRQHandler+0x642>
      return;
 8007ec8:	bf00      	nop
 8007eca:	e000      	b.n	8007ece <HAL_UART_IRQHandler+0x642>
    return;
 8007ecc:	bf00      	nop
  }
}
 8007ece:	37e8      	adds	r7, #232	@ 0xe8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f04:	b08c      	sub	sp, #48	@ 0x30
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	4bab      	ldr	r3, [pc, #684]	@ (80081dc <UART_SetConfig+0x2dc>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4aa0      	ldr	r2, [pc, #640]	@ (80081e0 <UART_SetConfig+0x2e0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f80:	430b      	orrs	r3, r1
 8007f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8a:	f023 010f 	bic.w	r1, r3, #15
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a91      	ldr	r2, [pc, #580]	@ (80081e4 <UART_SetConfig+0x2e4>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d125      	bne.n	8007ff0 <UART_SetConfig+0xf0>
 8007fa4:	4b90      	ldr	r3, [pc, #576]	@ (80081e8 <UART_SetConfig+0x2e8>)
 8007fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d81a      	bhi.n	8007fe8 <UART_SetConfig+0xe8>
 8007fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb8 <UART_SetConfig+0xb8>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	08007fc9 	.word	0x08007fc9
 8007fbc:	08007fd9 	.word	0x08007fd9
 8007fc0:	08007fd1 	.word	0x08007fd1
 8007fc4:	08007fe1 	.word	0x08007fe1
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fce:	e0d6      	b.n	800817e <UART_SetConfig+0x27e>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd6:	e0d2      	b.n	800817e <UART_SetConfig+0x27e>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fde:	e0ce      	b.n	800817e <UART_SetConfig+0x27e>
 8007fe0:	2308      	movs	r3, #8
 8007fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe6:	e0ca      	b.n	800817e <UART_SetConfig+0x27e>
 8007fe8:	2310      	movs	r3, #16
 8007fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fee:	e0c6      	b.n	800817e <UART_SetConfig+0x27e>
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a7d      	ldr	r2, [pc, #500]	@ (80081ec <UART_SetConfig+0x2ec>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d138      	bne.n	800806c <UART_SetConfig+0x16c>
 8007ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80081e8 <UART_SetConfig+0x2e8>)
 8007ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008000:	f003 030c 	and.w	r3, r3, #12
 8008004:	2b0c      	cmp	r3, #12
 8008006:	d82d      	bhi.n	8008064 <UART_SetConfig+0x164>
 8008008:	a201      	add	r2, pc, #4	@ (adr r2, 8008010 <UART_SetConfig+0x110>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008045 	.word	0x08008045
 8008014:	08008065 	.word	0x08008065
 8008018:	08008065 	.word	0x08008065
 800801c:	08008065 	.word	0x08008065
 8008020:	08008055 	.word	0x08008055
 8008024:	08008065 	.word	0x08008065
 8008028:	08008065 	.word	0x08008065
 800802c:	08008065 	.word	0x08008065
 8008030:	0800804d 	.word	0x0800804d
 8008034:	08008065 	.word	0x08008065
 8008038:	08008065 	.word	0x08008065
 800803c:	08008065 	.word	0x08008065
 8008040:	0800805d 	.word	0x0800805d
 8008044:	2300      	movs	r3, #0
 8008046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804a:	e098      	b.n	800817e <UART_SetConfig+0x27e>
 800804c:	2302      	movs	r3, #2
 800804e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008052:	e094      	b.n	800817e <UART_SetConfig+0x27e>
 8008054:	2304      	movs	r3, #4
 8008056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805a:	e090      	b.n	800817e <UART_SetConfig+0x27e>
 800805c:	2308      	movs	r3, #8
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008062:	e08c      	b.n	800817e <UART_SetConfig+0x27e>
 8008064:	2310      	movs	r3, #16
 8008066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806a:	e088      	b.n	800817e <UART_SetConfig+0x27e>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a5f      	ldr	r2, [pc, #380]	@ (80081f0 <UART_SetConfig+0x2f0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d125      	bne.n	80080c2 <UART_SetConfig+0x1c2>
 8008076:	4b5c      	ldr	r3, [pc, #368]	@ (80081e8 <UART_SetConfig+0x2e8>)
 8008078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008080:	2b30      	cmp	r3, #48	@ 0x30
 8008082:	d016      	beq.n	80080b2 <UART_SetConfig+0x1b2>
 8008084:	2b30      	cmp	r3, #48	@ 0x30
 8008086:	d818      	bhi.n	80080ba <UART_SetConfig+0x1ba>
 8008088:	2b20      	cmp	r3, #32
 800808a:	d00a      	beq.n	80080a2 <UART_SetConfig+0x1a2>
 800808c:	2b20      	cmp	r3, #32
 800808e:	d814      	bhi.n	80080ba <UART_SetConfig+0x1ba>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <UART_SetConfig+0x19a>
 8008094:	2b10      	cmp	r3, #16
 8008096:	d008      	beq.n	80080aa <UART_SetConfig+0x1aa>
 8008098:	e00f      	b.n	80080ba <UART_SetConfig+0x1ba>
 800809a:	2300      	movs	r3, #0
 800809c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a0:	e06d      	b.n	800817e <UART_SetConfig+0x27e>
 80080a2:	2302      	movs	r3, #2
 80080a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a8:	e069      	b.n	800817e <UART_SetConfig+0x27e>
 80080aa:	2304      	movs	r3, #4
 80080ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b0:	e065      	b.n	800817e <UART_SetConfig+0x27e>
 80080b2:	2308      	movs	r3, #8
 80080b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b8:	e061      	b.n	800817e <UART_SetConfig+0x27e>
 80080ba:	2310      	movs	r3, #16
 80080bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c0:	e05d      	b.n	800817e <UART_SetConfig+0x27e>
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a4b      	ldr	r2, [pc, #300]	@ (80081f4 <UART_SetConfig+0x2f4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d125      	bne.n	8008118 <UART_SetConfig+0x218>
 80080cc:	4b46      	ldr	r3, [pc, #280]	@ (80081e8 <UART_SetConfig+0x2e8>)
 80080ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80080d8:	d016      	beq.n	8008108 <UART_SetConfig+0x208>
 80080da:	2bc0      	cmp	r3, #192	@ 0xc0
 80080dc:	d818      	bhi.n	8008110 <UART_SetConfig+0x210>
 80080de:	2b80      	cmp	r3, #128	@ 0x80
 80080e0:	d00a      	beq.n	80080f8 <UART_SetConfig+0x1f8>
 80080e2:	2b80      	cmp	r3, #128	@ 0x80
 80080e4:	d814      	bhi.n	8008110 <UART_SetConfig+0x210>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <UART_SetConfig+0x1f0>
 80080ea:	2b40      	cmp	r3, #64	@ 0x40
 80080ec:	d008      	beq.n	8008100 <UART_SetConfig+0x200>
 80080ee:	e00f      	b.n	8008110 <UART_SetConfig+0x210>
 80080f0:	2300      	movs	r3, #0
 80080f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f6:	e042      	b.n	800817e <UART_SetConfig+0x27e>
 80080f8:	2302      	movs	r3, #2
 80080fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fe:	e03e      	b.n	800817e <UART_SetConfig+0x27e>
 8008100:	2304      	movs	r3, #4
 8008102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008106:	e03a      	b.n	800817e <UART_SetConfig+0x27e>
 8008108:	2308      	movs	r3, #8
 800810a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810e:	e036      	b.n	800817e <UART_SetConfig+0x27e>
 8008110:	2310      	movs	r3, #16
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008116:	e032      	b.n	800817e <UART_SetConfig+0x27e>
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a30      	ldr	r2, [pc, #192]	@ (80081e0 <UART_SetConfig+0x2e0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d12a      	bne.n	8008178 <UART_SetConfig+0x278>
 8008122:	4b31      	ldr	r3, [pc, #196]	@ (80081e8 <UART_SetConfig+0x2e8>)
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008128:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800812c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008130:	d01a      	beq.n	8008168 <UART_SetConfig+0x268>
 8008132:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008136:	d81b      	bhi.n	8008170 <UART_SetConfig+0x270>
 8008138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800813c:	d00c      	beq.n	8008158 <UART_SetConfig+0x258>
 800813e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008142:	d815      	bhi.n	8008170 <UART_SetConfig+0x270>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <UART_SetConfig+0x250>
 8008148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800814c:	d008      	beq.n	8008160 <UART_SetConfig+0x260>
 800814e:	e00f      	b.n	8008170 <UART_SetConfig+0x270>
 8008150:	2300      	movs	r3, #0
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008156:	e012      	b.n	800817e <UART_SetConfig+0x27e>
 8008158:	2302      	movs	r3, #2
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800815e:	e00e      	b.n	800817e <UART_SetConfig+0x27e>
 8008160:	2304      	movs	r3, #4
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008166:	e00a      	b.n	800817e <UART_SetConfig+0x27e>
 8008168:	2308      	movs	r3, #8
 800816a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800816e:	e006      	b.n	800817e <UART_SetConfig+0x27e>
 8008170:	2310      	movs	r3, #16
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008176:	e002      	b.n	800817e <UART_SetConfig+0x27e>
 8008178:	2310      	movs	r3, #16
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a17      	ldr	r2, [pc, #92]	@ (80081e0 <UART_SetConfig+0x2e0>)
 8008184:	4293      	cmp	r3, r2
 8008186:	f040 80a8 	bne.w	80082da <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800818a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800818e:	2b08      	cmp	r3, #8
 8008190:	d834      	bhi.n	80081fc <UART_SetConfig+0x2fc>
 8008192:	a201      	add	r2, pc, #4	@ (adr r2, 8008198 <UART_SetConfig+0x298>)
 8008194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008198:	080081bd 	.word	0x080081bd
 800819c:	080081fd 	.word	0x080081fd
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081fd 	.word	0x080081fd
 80081a8:	080081cb 	.word	0x080081cb
 80081ac:	080081fd 	.word	0x080081fd
 80081b0:	080081fd 	.word	0x080081fd
 80081b4:	080081fd 	.word	0x080081fd
 80081b8:	080081d3 	.word	0x080081d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081bc:	f7fe f89a 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 80081c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081c2:	e021      	b.n	8008208 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <UART_SetConfig+0x2f8>)
 80081c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081c8:	e01e      	b.n	8008208 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ca:	f7fe f825 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80081ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081d0:	e01a      	b.n	8008208 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081d8:	e016      	b.n	8008208 <UART_SetConfig+0x308>
 80081da:	bf00      	nop
 80081dc:	cfff69f3 	.word	0xcfff69f3
 80081e0:	40008000 	.word	0x40008000
 80081e4:	40013800 	.word	0x40013800
 80081e8:	40021000 	.word	0x40021000
 80081ec:	40004400 	.word	0x40004400
 80081f0:	40004800 	.word	0x40004800
 80081f4:	40004c00 	.word	0x40004c00
 80081f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008206:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 812a 	beq.w	8008464 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008214:	4a9e      	ldr	r2, [pc, #632]	@ (8008490 <UART_SetConfig+0x590>)
 8008216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800821a:	461a      	mov	r2, r3
 800821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008222:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	4413      	add	r3, r2
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	429a      	cmp	r2, r3
 8008232:	d305      	bcc.n	8008240 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	429a      	cmp	r2, r3
 800823e:	d903      	bls.n	8008248 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008246:	e10d      	b.n	8008464 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824a:	2200      	movs	r2, #0
 800824c:	60bb      	str	r3, [r7, #8]
 800824e:	60fa      	str	r2, [r7, #12]
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008254:	4a8e      	ldr	r2, [pc, #568]	@ (8008490 <UART_SetConfig+0x590>)
 8008256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800825a:	b29b      	uxth	r3, r3
 800825c:	2200      	movs	r2, #0
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	607a      	str	r2, [r7, #4]
 8008262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008266:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800826a:	f7f9 fbd5 	bl	8001a18 <__aeabi_uldivmod>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4610      	mov	r0, r2
 8008274:	4619      	mov	r1, r3
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	020b      	lsls	r3, r1, #8
 8008280:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008284:	0202      	lsls	r2, r0, #8
 8008286:	6979      	ldr	r1, [r7, #20]
 8008288:	6849      	ldr	r1, [r1, #4]
 800828a:	0849      	lsrs	r1, r1, #1
 800828c:	2000      	movs	r0, #0
 800828e:	460c      	mov	r4, r1
 8008290:	4605      	mov	r5, r0
 8008292:	eb12 0804 	adds.w	r8, r2, r4
 8008296:	eb43 0905 	adc.w	r9, r3, r5
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	469a      	mov	sl, r3
 80082a2:	4693      	mov	fp, r2
 80082a4:	4652      	mov	r2, sl
 80082a6:	465b      	mov	r3, fp
 80082a8:	4640      	mov	r0, r8
 80082aa:	4649      	mov	r1, r9
 80082ac:	f7f9 fbb4 	bl	8001a18 <__aeabi_uldivmod>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4613      	mov	r3, r2
 80082b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082be:	d308      	bcc.n	80082d2 <UART_SetConfig+0x3d2>
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082c6:	d204      	bcs.n	80082d2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6a3a      	ldr	r2, [r7, #32]
 80082ce:	60da      	str	r2, [r3, #12]
 80082d0:	e0c8      	b.n	8008464 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082d8:	e0c4      	b.n	8008464 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082e2:	d167      	bne.n	80083b4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80082e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d828      	bhi.n	800833e <UART_SetConfig+0x43e>
 80082ec:	a201      	add	r2, pc, #4	@ (adr r2, 80082f4 <UART_SetConfig+0x3f4>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	08008319 	.word	0x08008319
 80082f8:	08008321 	.word	0x08008321
 80082fc:	08008329 	.word	0x08008329
 8008300:	0800833f 	.word	0x0800833f
 8008304:	0800832f 	.word	0x0800832f
 8008308:	0800833f 	.word	0x0800833f
 800830c:	0800833f 	.word	0x0800833f
 8008310:	0800833f 	.word	0x0800833f
 8008314:	08008337 	.word	0x08008337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008318:	f7fd ffec 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 800831c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800831e:	e014      	b.n	800834a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008320:	f7fd fffe 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8008324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008326:	e010      	b.n	800834a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008328:	4b5a      	ldr	r3, [pc, #360]	@ (8008494 <UART_SetConfig+0x594>)
 800832a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800832c:	e00d      	b.n	800834a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800832e:	f7fd ff73 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 8008332:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008334:	e009      	b.n	800834a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800833a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800833c:	e005      	b.n	800834a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008348:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8089 	beq.w	8008464 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008356:	4a4e      	ldr	r2, [pc, #312]	@ (8008490 <UART_SetConfig+0x590>)
 8008358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800835c:	461a      	mov	r2, r3
 800835e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008360:	fbb3 f3f2 	udiv	r3, r3, r2
 8008364:	005a      	lsls	r2, r3, #1
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	085b      	lsrs	r3, r3, #1
 800836c:	441a      	add	r2, r3
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	fbb2 f3f3 	udiv	r3, r2, r3
 8008376:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	2b0f      	cmp	r3, #15
 800837c:	d916      	bls.n	80083ac <UART_SetConfig+0x4ac>
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008384:	d212      	bcs.n	80083ac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	b29b      	uxth	r3, r3
 800838a:	f023 030f 	bic.w	r3, r3, #15
 800838e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	b29b      	uxth	r3, r3
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	b29a      	uxth	r2, r3
 800839c:	8bfb      	ldrh	r3, [r7, #30]
 800839e:	4313      	orrs	r3, r2
 80083a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	8bfa      	ldrh	r2, [r7, #30]
 80083a8:	60da      	str	r2, [r3, #12]
 80083aa:	e05b      	b.n	8008464 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083b2:	e057      	b.n	8008464 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d828      	bhi.n	800840e <UART_SetConfig+0x50e>
 80083bc:	a201      	add	r2, pc, #4	@ (adr r2, 80083c4 <UART_SetConfig+0x4c4>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083e9 	.word	0x080083e9
 80083c8:	080083f1 	.word	0x080083f1
 80083cc:	080083f9 	.word	0x080083f9
 80083d0:	0800840f 	.word	0x0800840f
 80083d4:	080083ff 	.word	0x080083ff
 80083d8:	0800840f 	.word	0x0800840f
 80083dc:	0800840f 	.word	0x0800840f
 80083e0:	0800840f 	.word	0x0800840f
 80083e4:	08008407 	.word	0x08008407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e8:	f7fd ff84 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 80083ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ee:	e014      	b.n	800841a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f0:	f7fd ff96 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 80083f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083f6:	e010      	b.n	800841a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f8:	4b26      	ldr	r3, [pc, #152]	@ (8008494 <UART_SetConfig+0x594>)
 80083fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083fc:	e00d      	b.n	800841a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083fe:	f7fd ff0b 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 8008402:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008404:	e009      	b.n	800841a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800840a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800840c:	e005      	b.n	800841a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008418:	bf00      	nop
    }

    if (pclk != 0U)
 800841a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	d021      	beq.n	8008464 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008424:	4a1a      	ldr	r2, [pc, #104]	@ (8008490 <UART_SetConfig+0x590>)
 8008426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800842a:	461a      	mov	r2, r3
 800842c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	441a      	add	r2, r3
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008442:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	2b0f      	cmp	r3, #15
 8008448:	d909      	bls.n	800845e <UART_SetConfig+0x55e>
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008450:	d205      	bcs.n	800845e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	b29a      	uxth	r2, r3
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60da      	str	r2, [r3, #12]
 800845c:	e002      	b.n	8008464 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2201      	movs	r2, #1
 8008468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2201      	movs	r2, #1
 8008470:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2200      	movs	r2, #0
 8008478:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2200      	movs	r2, #0
 800847e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008480:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008484:	4618      	mov	r0, r3
 8008486:	3730      	adds	r7, #48	@ 0x30
 8008488:	46bd      	mov	sp, r7
 800848a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800848e:	bf00      	nop
 8008490:	0800d404 	.word	0x0800d404
 8008494:	00f42400 	.word	0x00f42400

08008498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852c:	f003 0310 	and.w	r3, r3, #16
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d01a      	beq.n	80085ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008596:	d10a      	bne.n	80085ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00a      	beq.n	80085d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	430a      	orrs	r2, r1
 80085ce:	605a      	str	r2, [r3, #4]
  }
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b098      	sub	sp, #96	@ 0x60
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085ec:	f7fc fd62 	bl	80050b4 <HAL_GetTick>
 80085f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d12f      	bne.n	8008660 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008608:	2200      	movs	r2, #0
 800860a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f88e 	bl	8008730 <UART_WaitOnFlagUntilTimeout>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d022      	beq.n	8008660 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008622:	e853 3f00 	ldrex	r3, [r3]
 8008626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800862e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	461a      	mov	r2, r3
 8008636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008638:	647b      	str	r3, [r7, #68]	@ 0x44
 800863a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800863e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e6      	bne.n	800861a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e063      	b.n	8008728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0304 	and.w	r3, r3, #4
 800866a:	2b04      	cmp	r3, #4
 800866c:	d149      	bne.n	8008702 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800866e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008676:	2200      	movs	r2, #0
 8008678:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f857 	bl	8008730 <UART_WaitOnFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d03c      	beq.n	8008702 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	623b      	str	r3, [r7, #32]
   return(result);
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800869c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80086a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e6      	bne.n	8008688 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f023 0301 	bic.w	r3, r3, #1
 80086d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086da:	61fa      	str	r2, [r7, #28]
 80086dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	69b9      	ldr	r1, [r7, #24]
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	617b      	str	r3, [r7, #20]
   return(result);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e5      	bne.n	80086ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e012      	b.n	8008728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2220      	movs	r2, #32
 8008706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2220      	movs	r2, #32
 800870e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3758      	adds	r7, #88	@ 0x58
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	4613      	mov	r3, r2
 800873e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008740:	e04f      	b.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008748:	d04b      	beq.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800874a:	f7fc fcb3 	bl	80050b4 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	429a      	cmp	r2, r3
 8008758:	d302      	bcc.n	8008760 <UART_WaitOnFlagUntilTimeout+0x30>
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e04e      	b.n	8008802 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0304 	and.w	r3, r3, #4
 800876e:	2b00      	cmp	r3, #0
 8008770:	d037      	beq.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b80      	cmp	r3, #128	@ 0x80
 8008776:	d034      	beq.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b40      	cmp	r3, #64	@ 0x40
 800877c:	d031      	beq.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	f003 0308 	and.w	r3, r3, #8
 8008788:	2b08      	cmp	r3, #8
 800878a:	d110      	bne.n	80087ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2208      	movs	r2, #8
 8008792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f95b 	bl	8008a50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2208      	movs	r2, #8
 800879e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e029      	b.n	8008802 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087bc:	d111      	bne.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 f941 	bl	8008a50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e00f      	b.n	8008802 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	69da      	ldr	r2, [r3, #28]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	4013      	ands	r3, r2
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	bf0c      	ite	eq
 80087f2:	2301      	moveq	r3, #1
 80087f4:	2300      	movne	r3, #0
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	461a      	mov	r2, r3
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d0a0      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800880c:	b480      	push	{r7}
 800880e:	b0a3      	sub	sp, #140	@ 0x8c
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	88fa      	ldrh	r2, [r7, #6]
 8008824:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800883e:	d10e      	bne.n	800885e <UART_Start_Receive_IT+0x52>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d105      	bne.n	8008854 <UART_Start_Receive_IT+0x48>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800884e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008852:	e02d      	b.n	80088b0 <UART_Start_Receive_IT+0xa4>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	22ff      	movs	r2, #255	@ 0xff
 8008858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800885c:	e028      	b.n	80088b0 <UART_Start_Receive_IT+0xa4>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10d      	bne.n	8008882 <UART_Start_Receive_IT+0x76>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d104      	bne.n	8008878 <UART_Start_Receive_IT+0x6c>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	22ff      	movs	r2, #255	@ 0xff
 8008872:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008876:	e01b      	b.n	80088b0 <UART_Start_Receive_IT+0xa4>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	227f      	movs	r2, #127	@ 0x7f
 800887c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008880:	e016      	b.n	80088b0 <UART_Start_Receive_IT+0xa4>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800888a:	d10d      	bne.n	80088a8 <UART_Start_Receive_IT+0x9c>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d104      	bne.n	800889e <UART_Start_Receive_IT+0x92>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	227f      	movs	r2, #127	@ 0x7f
 8008898:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800889c:	e008      	b.n	80088b0 <UART_Start_Receive_IT+0xa4>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	223f      	movs	r2, #63	@ 0x3f
 80088a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088a6:	e003      	b.n	80088b0 <UART_Start_Receive_IT+0xa4>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2222      	movs	r2, #34	@ 0x22
 80088bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3308      	adds	r3, #8
 80088c6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80088d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088d2:	f043 0301 	orr.w	r3, r3, #1
 80088d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80088e4:	673a      	str	r2, [r7, #112]	@ 0x70
 80088e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80088ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80088ec:	e841 2300 	strex	r3, r2, [r1]
 80088f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80088f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e3      	bne.n	80088c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008900:	d14f      	bne.n	80089a2 <UART_Start_Receive_IT+0x196>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008908:	88fa      	ldrh	r2, [r7, #6]
 800890a:	429a      	cmp	r2, r3
 800890c:	d349      	bcc.n	80089a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008916:	d107      	bne.n	8008928 <UART_Start_Receive_IT+0x11c>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d103      	bne.n	8008928 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4a47      	ldr	r2, [pc, #284]	@ (8008a40 <UART_Start_Receive_IT+0x234>)
 8008924:	675a      	str	r2, [r3, #116]	@ 0x74
 8008926:	e002      	b.n	800892e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4a46      	ldr	r2, [pc, #280]	@ (8008a44 <UART_Start_Receive_IT+0x238>)
 800892c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01a      	beq.n	800896c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800894a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800895a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800895e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e4      	bne.n	8008936 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3308      	adds	r3, #8
 8008972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008976:	e853 3f00 	ldrex	r3, [r3]
 800897a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800897c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008982:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800898c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800898e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008992:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800899a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e5      	bne.n	800896c <UART_Start_Receive_IT+0x160>
 80089a0:	e046      	b.n	8008a30 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089aa:	d107      	bne.n	80089bc <UART_Start_Receive_IT+0x1b0>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4a24      	ldr	r2, [pc, #144]	@ (8008a48 <UART_Start_Receive_IT+0x23c>)
 80089b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80089ba:	e002      	b.n	80089c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4a23      	ldr	r2, [pc, #140]	@ (8008a4c <UART_Start_Receive_IT+0x240>)
 80089c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d019      	beq.n	80089fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089da:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80089de:	677b      	str	r3, [r7, #116]	@ 0x74
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80089f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e6      	bne.n	80089ca <UART_Start_Receive_IT+0x1be>
 80089fc:	e018      	b.n	8008a30 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f043 0320 	orr.w	r3, r3, #32
 8008a12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a1c:	623b      	str	r3, [r7, #32]
 8008a1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	69f9      	ldr	r1, [r7, #28]
 8008a22:	6a3a      	ldr	r2, [r7, #32]
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e6      	bne.n	80089fe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	378c      	adds	r7, #140	@ 0x8c
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	08009271 	.word	0x08009271
 8008a44:	08008f11 	.word	0x08008f11
 8008a48:	08008d59 	.word	0x08008d59
 8008a4c:	08008ba1 	.word	0x08008ba1

08008a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b095      	sub	sp, #84	@ 0x54
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a76:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e6      	bne.n	8008a58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	e853 3f00 	ldrex	r3, [r3]
 8008a98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008aa0:	f023 0301 	bic.w	r3, r3, #1
 8008aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e3      	bne.n	8008a8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d118      	bne.n	8008afc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	e853 3f00 	ldrex	r3, [r3]
 8008ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f023 0310 	bic.w	r3, r3, #16
 8008ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	6979      	ldr	r1, [r7, #20]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	e841 2300 	strex	r3, r2, [r1]
 8008af4:	613b      	str	r3, [r7, #16]
   return(result);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e6      	bne.n	8008aca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b10:	bf00      	nop
 8008b12:	3754      	adds	r7, #84	@ 0x54
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f7fc f9da 	bl	8004ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b40:	bf00      	nop
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b64:	61fb      	str	r3, [r7, #28]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	61bb      	str	r3, [r7, #24]
 8008b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6979      	ldr	r1, [r7, #20]
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e6      	bne.n	8008b50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2220      	movs	r2, #32
 8008b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff f99f 	bl	8007ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b96:	bf00      	nop
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b09c      	sub	sp, #112	@ 0x70
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bb8:	2b22      	cmp	r3, #34	@ 0x22
 8008bba:	f040 80be 	bne.w	8008d3a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bcc:	b2d9      	uxtb	r1, r3
 8008bce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bd8:	400a      	ands	r2, r1
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f040 80a1 	bne.w	8008d4a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e6      	bne.n	8008c08 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4c:	f023 0301 	bic.w	r3, r3, #1
 8008c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e5      	bne.n	8008c3a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a33      	ldr	r2, [pc, #204]	@ (8008d54 <UART_RxISR_8BIT+0x1b4>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d01f      	beq.n	8008ccc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d018      	beq.n	8008ccc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cae:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e6      	bne.n	8008c9a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d12e      	bne.n	8008d32 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0310 	bic.w	r3, r3, #16
 8008cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	69b9      	ldr	r1, [r7, #24]
 8008cfe:	69fa      	ldr	r2, [r7, #28]
 8008d00:	e841 2300 	strex	r3, r2, [r1]
 8008d04:	617b      	str	r3, [r7, #20]
   return(result);
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e6      	bne.n	8008cda <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	f003 0310 	and.w	r3, r3, #16
 8008d16:	2b10      	cmp	r3, #16
 8008d18:	d103      	bne.n	8008d22 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff f8dc 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d30:	e00b      	b.n	8008d4a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7fc f904 	bl	8004f40 <HAL_UART_RxCpltCallback>
}
 8008d38:	e007      	b.n	8008d4a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	699a      	ldr	r2, [r3, #24]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f042 0208 	orr.w	r2, r2, #8
 8008d48:	619a      	str	r2, [r3, #24]
}
 8008d4a:	bf00      	nop
 8008d4c:	3770      	adds	r7, #112	@ 0x70
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	40008000 	.word	0x40008000

08008d58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b09c      	sub	sp, #112	@ 0x70
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d70:	2b22      	cmp	r3, #34	@ 0x22
 8008d72:	f040 80be 	bne.w	8008ef2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d84:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d86:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008d8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008d8e:	4013      	ands	r3, r2
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d9a:	1c9a      	adds	r2, r3, #2
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	3b01      	subs	r3, #1
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f040 80a1 	bne.w	8008f02 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dde:	657b      	str	r3, [r7, #84]	@ 0x54
 8008de0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008de4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e6      	bne.n	8008dc0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3308      	adds	r3, #8
 8008df8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e12:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e5      	bne.n	8008df2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a33      	ldr	r2, [pc, #204]	@ (8008f0c <UART_RxISR_16BIT+0x1b4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d01f      	beq.n	8008e84 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d018      	beq.n	8008e84 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e72:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e6      	bne.n	8008e52 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d12e      	bne.n	8008eea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f023 0310 	bic.w	r3, r3, #16
 8008ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008eb0:	61bb      	str	r3, [r7, #24]
 8008eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6979      	ldr	r1, [r7, #20]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e6      	bne.n	8008e92 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f003 0310 	and.w	r3, r3, #16
 8008ece:	2b10      	cmp	r3, #16
 8008ed0:	d103      	bne.n	8008eda <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2210      	movs	r2, #16
 8008ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff f800 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ee8:	e00b      	b.n	8008f02 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7fc f828 	bl	8004f40 <HAL_UART_RxCpltCallback>
}
 8008ef0:	e007      	b.n	8008f02 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	699a      	ldr	r2, [r3, #24]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0208 	orr.w	r2, r2, #8
 8008f00:	619a      	str	r2, [r3, #24]
}
 8008f02:	bf00      	nop
 8008f04:	3770      	adds	r7, #112	@ 0x70
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	40008000 	.word	0x40008000

08008f10 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b0ac      	sub	sp, #176	@ 0xb0
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f1e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f46:	2b22      	cmp	r3, #34	@ 0x22
 8008f48:	f040 8182 	bne.w	8009250 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f52:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f56:	e125      	b.n	80091a4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f62:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008f66:	b2d9      	uxtb	r1, r3
 8008f68:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f72:	400a      	ands	r2, r1
 8008f74:	b2d2      	uxtb	r2, r2
 8008f76:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d053      	beq.n	8009052 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d011      	beq.n	8008fda <UART_RxISR_8BIT_FIFOEN+0xca>
 8008fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00b      	beq.n	8008fda <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fd0:	f043 0201 	orr.w	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d011      	beq.n	800900a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009000:	f043 0204 	orr.w	r2, r3, #4
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800900a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800900e:	f003 0304 	and.w	r3, r3, #4
 8009012:	2b00      	cmp	r3, #0
 8009014:	d011      	beq.n	800903a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00b      	beq.n	800903a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2204      	movs	r2, #4
 8009028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009030:	f043 0202 	orr.w	r2, r3, #2
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009040:	2b00      	cmp	r3, #0
 8009042:	d006      	beq.n	8009052 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7fb ff55 	bl	8004ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009058:	b29b      	uxth	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	f040 80a2 	bne.w	80091a4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800906e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009082:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009084:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009088:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e4      	bne.n	8009060 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3308      	adds	r3, #8
 800909c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80090a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090ac:	f023 0301 	bic.w	r3, r3, #1
 80090b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3308      	adds	r3, #8
 80090ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090be:	66ba      	str	r2, [r7, #104]	@ 0x68
 80090c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80090c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80090cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e1      	bne.n	8009096 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a5f      	ldr	r2, [pc, #380]	@ (8009268 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d021      	beq.n	8009134 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d01a      	beq.n	8009134 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800910c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800910e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009120:	657b      	str	r3, [r7, #84]	@ 0x54
 8009122:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009126:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800912e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e4      	bne.n	80090fe <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009138:	2b01      	cmp	r3, #1
 800913a:	d130      	bne.n	800919e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	f023 0310 	bic.w	r3, r3, #16
 8009156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009164:	643b      	str	r3, [r7, #64]	@ 0x40
 8009166:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800916a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e4      	bne.n	8009142 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b10      	cmp	r3, #16
 8009184:	d103      	bne.n	800918e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2210      	movs	r2, #16
 800918c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7fe fea6 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
 800919c:	e002      	b.n	80091a4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7fb fece 	bl	8004f40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d006      	beq.n	80091ba <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80091ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091b0:	f003 0320 	and.w	r3, r3, #32
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f47f aecf 	bne.w	8008f58 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d049      	beq.n	8009260 <UART_RxISR_8BIT_FIFOEN+0x350>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091d2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d242      	bcs.n	8009260 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3308      	adds	r3, #8
 80091e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3308      	adds	r3, #8
 80091fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80091fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009206:	e841 2300 	strex	r3, r2, [r1]
 800920a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1e3      	bne.n	80091da <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a15      	ldr	r2, [pc, #84]	@ (800926c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009216:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	60bb      	str	r3, [r7, #8]
   return(result);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f043 0320 	orr.w	r3, r3, #32
 800922c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800923a:	61bb      	str	r3, [r7, #24]
 800923c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	6979      	ldr	r1, [r7, #20]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	613b      	str	r3, [r7, #16]
   return(result);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e4      	bne.n	8009218 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800924e:	e007      	b.n	8009260 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	699a      	ldr	r2, [r3, #24]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f042 0208 	orr.w	r2, r2, #8
 800925e:	619a      	str	r2, [r3, #24]
}
 8009260:	bf00      	nop
 8009262:	37b0      	adds	r7, #176	@ 0xb0
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	40008000 	.word	0x40008000
 800926c:	08008ba1 	.word	0x08008ba1

08009270 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b0ae      	sub	sp, #184	@ 0xb8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800927e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092a6:	2b22      	cmp	r3, #34	@ 0x22
 80092a8:	f040 8186 	bne.w	80095b8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092b2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092b6:	e129      	b.n	800950c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092be:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80092ca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80092ce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80092d2:	4013      	ands	r3, r2
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e0:	1c9a      	adds	r2, r3, #2
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	2b00      	cmp	r3, #0
 800930c:	d053      	beq.n	80093b6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800930e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d011      	beq.n	800933e <UART_RxISR_16BIT_FIFOEN+0xce>
 800931a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800931e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2201      	movs	r2, #1
 800932c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009334:	f043 0201 	orr.w	r2, r3, #1
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800933e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009342:	f003 0302 	and.w	r3, r3, #2
 8009346:	2b00      	cmp	r3, #0
 8009348:	d011      	beq.n	800936e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800934a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00b      	beq.n	800936e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2202      	movs	r2, #2
 800935c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009364:	f043 0204 	orr.w	r2, r3, #4
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800936e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d011      	beq.n	800939e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800937a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2204      	movs	r2, #4
 800938c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009394:	f043 0202 	orr.w	r2, r3, #2
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d006      	beq.n	80093b6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7fb fda3 	bl	8004ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f040 80a4 	bne.w	800950c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80093d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093f2:	e841 2300 	strex	r3, r2, [r1]
 80093f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1e2      	bne.n	80093c4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3308      	adds	r3, #8
 8009404:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800940e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009414:	f023 0301 	bic.w	r3, r3, #1
 8009418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3308      	adds	r3, #8
 8009422:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009426:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009428:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800942c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e1      	bne.n	80093fe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a5f      	ldr	r2, [pc, #380]	@ (80095d0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d021      	beq.n	800949c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d01a      	beq.n	800949c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800946e:	e853 3f00 	ldrex	r3, [r3]
 8009472:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009476:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800947a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009488:	65bb      	str	r3, [r7, #88]	@ 0x58
 800948a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800948e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e4      	bne.n	8009466 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d130      	bne.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b2:	e853 3f00 	ldrex	r3, [r3]
 80094b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ba:	f023 0310 	bic.w	r3, r3, #16
 80094be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80094ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094d4:	e841 2300 	strex	r3, r2, [r1]
 80094d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e4      	bne.n	80094aa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	f003 0310 	and.w	r3, r3, #16
 80094ea:	2b10      	cmp	r3, #16
 80094ec:	d103      	bne.n	80094f6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2210      	movs	r2, #16
 80094f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7fe fcf2 	bl	8007ee8 <HAL_UARTEx_RxEventCallback>
 8009504:	e002      	b.n	800950c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7fb fd1a 	bl	8004f40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800950c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009510:	2b00      	cmp	r3, #0
 8009512:	d006      	beq.n	8009522 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009514:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	f47f aecb 	bne.w	80092b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009528:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800952c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009530:	2b00      	cmp	r3, #0
 8009532:	d049      	beq.n	80095c8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800953a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800953e:	429a      	cmp	r2, r3
 8009540:	d242      	bcs.n	80095c8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3308      	adds	r3, #8
 8009548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	623b      	str	r3, [r7, #32]
   return(result);
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3308      	adds	r3, #8
 8009562:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009566:	633a      	str	r2, [r7, #48]	@ 0x30
 8009568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800956c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956e:	e841 2300 	strex	r3, r2, [r1]
 8009572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1e3      	bne.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a15      	ldr	r2, [pc, #84]	@ (80095d4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800957e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	e853 3f00 	ldrex	r3, [r3]
 800958c:	60fb      	str	r3, [r7, #12]
   return(result);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f043 0320 	orr.w	r3, r3, #32
 8009594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095a2:	61fb      	str	r3, [r7, #28]
 80095a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	69b9      	ldr	r1, [r7, #24]
 80095a8:	69fa      	ldr	r2, [r7, #28]
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	617b      	str	r3, [r7, #20]
   return(result);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e4      	bne.n	8009580 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095b6:	e007      	b.n	80095c8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0208 	orr.w	r2, r2, #8
 80095c6:	619a      	str	r2, [r3, #24]
}
 80095c8:	bf00      	nop
 80095ca:	37b8      	adds	r7, #184	@ 0xb8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	40008000 	.word	0x40008000
 80095d4:	08008d59 	.word	0x08008d59

080095d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009622:	2b01      	cmp	r3, #1
 8009624:	d101      	bne.n	800962a <HAL_UARTEx_DisableFifoMode+0x16>
 8009626:	2302      	movs	r3, #2
 8009628:	e027      	b.n	800967a <HAL_UARTEx_DisableFifoMode+0x66>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2224      	movs	r2, #36	@ 0x24
 8009636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009658:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009696:	2b01      	cmp	r3, #1
 8009698:	d101      	bne.n	800969e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800969a:	2302      	movs	r3, #2
 800969c:	e02d      	b.n	80096fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2224      	movs	r2, #36	@ 0x24
 80096aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 0201 	bic.w	r2, r2, #1
 80096c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f850 	bl	8009780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009716:	2302      	movs	r3, #2
 8009718:	e02d      	b.n	8009776 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2224      	movs	r2, #36	@ 0x24
 8009726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0201 	bic.w	r2, r2, #1
 8009740:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f812 	bl	8009780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800978c:	2b00      	cmp	r3, #0
 800978e:	d108      	bne.n	80097a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097a0:	e031      	b.n	8009806 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097a2:	2308      	movs	r3, #8
 80097a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097a6:	2308      	movs	r3, #8
 80097a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	0e5b      	lsrs	r3, r3, #25
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f003 0307 	and.w	r3, r3, #7
 80097b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	0f5b      	lsrs	r3, r3, #29
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 0307 	and.w	r3, r3, #7
 80097c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
 80097cc:	7b3a      	ldrb	r2, [r7, #12]
 80097ce:	4911      	ldr	r1, [pc, #68]	@ (8009814 <UARTEx_SetNbDataToProcess+0x94>)
 80097d0:	5c8a      	ldrb	r2, [r1, r2]
 80097d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097d6:	7b3a      	ldrb	r2, [r7, #12]
 80097d8:	490f      	ldr	r1, [pc, #60]	@ (8009818 <UARTEx_SetNbDataToProcess+0x98>)
 80097da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	7b7a      	ldrb	r2, [r7, #13]
 80097ec:	4909      	ldr	r1, [pc, #36]	@ (8009814 <UARTEx_SetNbDataToProcess+0x94>)
 80097ee:	5c8a      	ldrb	r2, [r1, r2]
 80097f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097f4:	7b7a      	ldrb	r2, [r7, #13]
 80097f6:	4908      	ldr	r1, [pc, #32]	@ (8009818 <UARTEx_SetNbDataToProcess+0x98>)
 80097f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80097fe:	b29a      	uxth	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009806:	bf00      	nop
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	0800d41c 	.word	0x0800d41c
 8009818:	0800d424 	.word	0x0800d424

0800981c <__assert_func>:
 800981c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800981e:	4614      	mov	r4, r2
 8009820:	461a      	mov	r2, r3
 8009822:	4b09      	ldr	r3, [pc, #36]	@ (8009848 <__assert_func+0x2c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4605      	mov	r5, r0
 8009828:	68d8      	ldr	r0, [r3, #12]
 800982a:	b14c      	cbz	r4, 8009840 <__assert_func+0x24>
 800982c:	4b07      	ldr	r3, [pc, #28]	@ (800984c <__assert_func+0x30>)
 800982e:	9100      	str	r1, [sp, #0]
 8009830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009834:	4906      	ldr	r1, [pc, #24]	@ (8009850 <__assert_func+0x34>)
 8009836:	462b      	mov	r3, r5
 8009838:	f000 fd08 	bl	800a24c <fiprintf>
 800983c:	f000 fead 	bl	800a59a <abort>
 8009840:	4b04      	ldr	r3, [pc, #16]	@ (8009854 <__assert_func+0x38>)
 8009842:	461c      	mov	r4, r3
 8009844:	e7f3      	b.n	800982e <__assert_func+0x12>
 8009846:	bf00      	nop
 8009848:	20000044 	.word	0x20000044
 800984c:	0800d42c 	.word	0x0800d42c
 8009850:	0800d439 	.word	0x0800d439
 8009854:	0800d467 	.word	0x0800d467

08009858 <__cvt>:
 8009858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	ec57 6b10 	vmov	r6, r7, d0
 8009860:	2f00      	cmp	r7, #0
 8009862:	460c      	mov	r4, r1
 8009864:	4619      	mov	r1, r3
 8009866:	463b      	mov	r3, r7
 8009868:	bfbb      	ittet	lt
 800986a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800986e:	461f      	movlt	r7, r3
 8009870:	2300      	movge	r3, #0
 8009872:	232d      	movlt	r3, #45	@ 0x2d
 8009874:	700b      	strb	r3, [r1, #0]
 8009876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009878:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800987c:	4691      	mov	r9, r2
 800987e:	f023 0820 	bic.w	r8, r3, #32
 8009882:	bfbc      	itt	lt
 8009884:	4632      	movlt	r2, r6
 8009886:	4616      	movlt	r6, r2
 8009888:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800988c:	d005      	beq.n	800989a <__cvt+0x42>
 800988e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009892:	d100      	bne.n	8009896 <__cvt+0x3e>
 8009894:	3401      	adds	r4, #1
 8009896:	2102      	movs	r1, #2
 8009898:	e000      	b.n	800989c <__cvt+0x44>
 800989a:	2103      	movs	r1, #3
 800989c:	ab03      	add	r3, sp, #12
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	ab02      	add	r3, sp, #8
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	ec47 6b10 	vmov	d0, r6, r7
 80098a8:	4653      	mov	r3, sl
 80098aa:	4622      	mov	r2, r4
 80098ac:	f000 ff04 	bl	800a6b8 <_dtoa_r>
 80098b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80098b4:	4605      	mov	r5, r0
 80098b6:	d119      	bne.n	80098ec <__cvt+0x94>
 80098b8:	f019 0f01 	tst.w	r9, #1
 80098bc:	d00e      	beq.n	80098dc <__cvt+0x84>
 80098be:	eb00 0904 	add.w	r9, r0, r4
 80098c2:	2200      	movs	r2, #0
 80098c4:	2300      	movs	r3, #0
 80098c6:	4630      	mov	r0, r6
 80098c8:	4639      	mov	r1, r7
 80098ca:	f7f8 f835 	bl	8001938 <__aeabi_dcmpeq>
 80098ce:	b108      	cbz	r0, 80098d4 <__cvt+0x7c>
 80098d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80098d4:	2230      	movs	r2, #48	@ 0x30
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	454b      	cmp	r3, r9
 80098da:	d31e      	bcc.n	800991a <__cvt+0xc2>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098e0:	1b5b      	subs	r3, r3, r5
 80098e2:	4628      	mov	r0, r5
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	b004      	add	sp, #16
 80098e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098f0:	eb00 0904 	add.w	r9, r0, r4
 80098f4:	d1e5      	bne.n	80098c2 <__cvt+0x6a>
 80098f6:	7803      	ldrb	r3, [r0, #0]
 80098f8:	2b30      	cmp	r3, #48	@ 0x30
 80098fa:	d10a      	bne.n	8009912 <__cvt+0xba>
 80098fc:	2200      	movs	r2, #0
 80098fe:	2300      	movs	r3, #0
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	f7f8 f818 	bl	8001938 <__aeabi_dcmpeq>
 8009908:	b918      	cbnz	r0, 8009912 <__cvt+0xba>
 800990a:	f1c4 0401 	rsb	r4, r4, #1
 800990e:	f8ca 4000 	str.w	r4, [sl]
 8009912:	f8da 3000 	ldr.w	r3, [sl]
 8009916:	4499      	add	r9, r3
 8009918:	e7d3      	b.n	80098c2 <__cvt+0x6a>
 800991a:	1c59      	adds	r1, r3, #1
 800991c:	9103      	str	r1, [sp, #12]
 800991e:	701a      	strb	r2, [r3, #0]
 8009920:	e7d9      	b.n	80098d6 <__cvt+0x7e>

08009922 <__exponent>:
 8009922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009924:	2900      	cmp	r1, #0
 8009926:	bfba      	itte	lt
 8009928:	4249      	neglt	r1, r1
 800992a:	232d      	movlt	r3, #45	@ 0x2d
 800992c:	232b      	movge	r3, #43	@ 0x2b
 800992e:	2909      	cmp	r1, #9
 8009930:	7002      	strb	r2, [r0, #0]
 8009932:	7043      	strb	r3, [r0, #1]
 8009934:	dd29      	ble.n	800998a <__exponent+0x68>
 8009936:	f10d 0307 	add.w	r3, sp, #7
 800993a:	461d      	mov	r5, r3
 800993c:	270a      	movs	r7, #10
 800993e:	461a      	mov	r2, r3
 8009940:	fbb1 f6f7 	udiv	r6, r1, r7
 8009944:	fb07 1416 	mls	r4, r7, r6, r1
 8009948:	3430      	adds	r4, #48	@ 0x30
 800994a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800994e:	460c      	mov	r4, r1
 8009950:	2c63      	cmp	r4, #99	@ 0x63
 8009952:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009956:	4631      	mov	r1, r6
 8009958:	dcf1      	bgt.n	800993e <__exponent+0x1c>
 800995a:	3130      	adds	r1, #48	@ 0x30
 800995c:	1e94      	subs	r4, r2, #2
 800995e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009962:	1c41      	adds	r1, r0, #1
 8009964:	4623      	mov	r3, r4
 8009966:	42ab      	cmp	r3, r5
 8009968:	d30a      	bcc.n	8009980 <__exponent+0x5e>
 800996a:	f10d 0309 	add.w	r3, sp, #9
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	42ac      	cmp	r4, r5
 8009972:	bf88      	it	hi
 8009974:	2300      	movhi	r3, #0
 8009976:	3302      	adds	r3, #2
 8009978:	4403      	add	r3, r0
 800997a:	1a18      	subs	r0, r3, r0
 800997c:	b003      	add	sp, #12
 800997e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009980:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009984:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009988:	e7ed      	b.n	8009966 <__exponent+0x44>
 800998a:	2330      	movs	r3, #48	@ 0x30
 800998c:	3130      	adds	r1, #48	@ 0x30
 800998e:	7083      	strb	r3, [r0, #2]
 8009990:	70c1      	strb	r1, [r0, #3]
 8009992:	1d03      	adds	r3, r0, #4
 8009994:	e7f1      	b.n	800997a <__exponent+0x58>
	...

08009998 <_printf_float>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	b08d      	sub	sp, #52	@ 0x34
 800999e:	460c      	mov	r4, r1
 80099a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80099a4:	4616      	mov	r6, r2
 80099a6:	461f      	mov	r7, r3
 80099a8:	4605      	mov	r5, r0
 80099aa:	f000 fd7f 	bl	800a4ac <_localeconv_r>
 80099ae:	6803      	ldr	r3, [r0, #0]
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7f7 fb94 	bl	80010e0 <strlen>
 80099b8:	2300      	movs	r3, #0
 80099ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80099bc:	f8d8 3000 	ldr.w	r3, [r8]
 80099c0:	9005      	str	r0, [sp, #20]
 80099c2:	3307      	adds	r3, #7
 80099c4:	f023 0307 	bic.w	r3, r3, #7
 80099c8:	f103 0208 	add.w	r2, r3, #8
 80099cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80099d0:	f8d4 b000 	ldr.w	fp, [r4]
 80099d4:	f8c8 2000 	str.w	r2, [r8]
 80099d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80099e0:	9307      	str	r3, [sp, #28]
 80099e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80099e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80099ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ee:	4b9c      	ldr	r3, [pc, #624]	@ (8009c60 <_printf_float+0x2c8>)
 80099f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099f4:	f7f7 ffd2 	bl	800199c <__aeabi_dcmpun>
 80099f8:	bb70      	cbnz	r0, 8009a58 <_printf_float+0xc0>
 80099fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099fe:	4b98      	ldr	r3, [pc, #608]	@ (8009c60 <_printf_float+0x2c8>)
 8009a00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a04:	f7f7 ffac 	bl	8001960 <__aeabi_dcmple>
 8009a08:	bb30      	cbnz	r0, 8009a58 <_printf_float+0xc0>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	4640      	mov	r0, r8
 8009a10:	4649      	mov	r1, r9
 8009a12:	f7f7 ff9b 	bl	800194c <__aeabi_dcmplt>
 8009a16:	b110      	cbz	r0, 8009a1e <_printf_float+0x86>
 8009a18:	232d      	movs	r3, #45	@ 0x2d
 8009a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a1e:	4a91      	ldr	r2, [pc, #580]	@ (8009c64 <_printf_float+0x2cc>)
 8009a20:	4b91      	ldr	r3, [pc, #580]	@ (8009c68 <_printf_float+0x2d0>)
 8009a22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a26:	bf8c      	ite	hi
 8009a28:	4690      	movhi	r8, r2
 8009a2a:	4698      	movls	r8, r3
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	f02b 0304 	bic.w	r3, fp, #4
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	f04f 0900 	mov.w	r9, #0
 8009a3a:	9700      	str	r7, [sp, #0]
 8009a3c:	4633      	mov	r3, r6
 8009a3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 f9d2 	bl	8009dec <_printf_common>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f040 808d 	bne.w	8009b68 <_printf_float+0x1d0>
 8009a4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a52:	b00d      	add	sp, #52	@ 0x34
 8009a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a58:	4642      	mov	r2, r8
 8009a5a:	464b      	mov	r3, r9
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	4649      	mov	r1, r9
 8009a60:	f7f7 ff9c 	bl	800199c <__aeabi_dcmpun>
 8009a64:	b140      	cbz	r0, 8009a78 <_printf_float+0xe0>
 8009a66:	464b      	mov	r3, r9
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	bfbc      	itt	lt
 8009a6c:	232d      	movlt	r3, #45	@ 0x2d
 8009a6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a72:	4a7e      	ldr	r2, [pc, #504]	@ (8009c6c <_printf_float+0x2d4>)
 8009a74:	4b7e      	ldr	r3, [pc, #504]	@ (8009c70 <_printf_float+0x2d8>)
 8009a76:	e7d4      	b.n	8009a22 <_printf_float+0x8a>
 8009a78:	6863      	ldr	r3, [r4, #4]
 8009a7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a7e:	9206      	str	r2, [sp, #24]
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	d13b      	bne.n	8009afc <_printf_float+0x164>
 8009a84:	2306      	movs	r3, #6
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	6022      	str	r2, [r4, #0]
 8009a90:	9303      	str	r3, [sp, #12]
 8009a92:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a98:	ab09      	add	r3, sp, #36	@ 0x24
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	6861      	ldr	r1, [r4, #4]
 8009a9e:	ec49 8b10 	vmov	d0, r8, r9
 8009aa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f7ff fed6 	bl	8009858 <__cvt>
 8009aac:	9b06      	ldr	r3, [sp, #24]
 8009aae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ab0:	2b47      	cmp	r3, #71	@ 0x47
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	d129      	bne.n	8009b0a <_printf_float+0x172>
 8009ab6:	1cc8      	adds	r0, r1, #3
 8009ab8:	db02      	blt.n	8009ac0 <_printf_float+0x128>
 8009aba:	6863      	ldr	r3, [r4, #4]
 8009abc:	4299      	cmp	r1, r3
 8009abe:	dd41      	ble.n	8009b44 <_printf_float+0x1ac>
 8009ac0:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ac4:	fa5f fa8a 	uxtb.w	sl, sl
 8009ac8:	3901      	subs	r1, #1
 8009aca:	4652      	mov	r2, sl
 8009acc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ad0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ad2:	f7ff ff26 	bl	8009922 <__exponent>
 8009ad6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ad8:	1813      	adds	r3, r2, r0
 8009ada:	2a01      	cmp	r2, #1
 8009adc:	4681      	mov	r9, r0
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	dc02      	bgt.n	8009ae8 <_printf_float+0x150>
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	07d2      	lsls	r2, r2, #31
 8009ae6:	d501      	bpl.n	8009aec <_printf_float+0x154>
 8009ae8:	3301      	adds	r3, #1
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0a2      	beq.n	8009a3a <_printf_float+0xa2>
 8009af4:	232d      	movs	r3, #45	@ 0x2d
 8009af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009afa:	e79e      	b.n	8009a3a <_printf_float+0xa2>
 8009afc:	9a06      	ldr	r2, [sp, #24]
 8009afe:	2a47      	cmp	r2, #71	@ 0x47
 8009b00:	d1c2      	bne.n	8009a88 <_printf_float+0xf0>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1c0      	bne.n	8009a88 <_printf_float+0xf0>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e7bd      	b.n	8009a86 <_printf_float+0xee>
 8009b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b0e:	d9db      	bls.n	8009ac8 <_printf_float+0x130>
 8009b10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b14:	d118      	bne.n	8009b48 <_printf_float+0x1b0>
 8009b16:	2900      	cmp	r1, #0
 8009b18:	6863      	ldr	r3, [r4, #4]
 8009b1a:	dd0b      	ble.n	8009b34 <_printf_float+0x19c>
 8009b1c:	6121      	str	r1, [r4, #16]
 8009b1e:	b913      	cbnz	r3, 8009b26 <_printf_float+0x18e>
 8009b20:	6822      	ldr	r2, [r4, #0]
 8009b22:	07d0      	lsls	r0, r2, #31
 8009b24:	d502      	bpl.n	8009b2c <_printf_float+0x194>
 8009b26:	3301      	adds	r3, #1
 8009b28:	440b      	add	r3, r1
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b2e:	f04f 0900 	mov.w	r9, #0
 8009b32:	e7db      	b.n	8009aec <_printf_float+0x154>
 8009b34:	b913      	cbnz	r3, 8009b3c <_printf_float+0x1a4>
 8009b36:	6822      	ldr	r2, [r4, #0]
 8009b38:	07d2      	lsls	r2, r2, #31
 8009b3a:	d501      	bpl.n	8009b40 <_printf_float+0x1a8>
 8009b3c:	3302      	adds	r3, #2
 8009b3e:	e7f4      	b.n	8009b2a <_printf_float+0x192>
 8009b40:	2301      	movs	r3, #1
 8009b42:	e7f2      	b.n	8009b2a <_printf_float+0x192>
 8009b44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	db05      	blt.n	8009b5a <_printf_float+0x1c2>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	6121      	str	r1, [r4, #16]
 8009b52:	07d8      	lsls	r0, r3, #31
 8009b54:	d5ea      	bpl.n	8009b2c <_printf_float+0x194>
 8009b56:	1c4b      	adds	r3, r1, #1
 8009b58:	e7e7      	b.n	8009b2a <_printf_float+0x192>
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	bfd4      	ite	le
 8009b5e:	f1c1 0202 	rsble	r2, r1, #2
 8009b62:	2201      	movgt	r2, #1
 8009b64:	4413      	add	r3, r2
 8009b66:	e7e0      	b.n	8009b2a <_printf_float+0x192>
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	055a      	lsls	r2, r3, #21
 8009b6c:	d407      	bmi.n	8009b7e <_printf_float+0x1e6>
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	4642      	mov	r2, r8
 8009b72:	4631      	mov	r1, r6
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b8      	blx	r7
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d12b      	bne.n	8009bd4 <_printf_float+0x23c>
 8009b7c:	e767      	b.n	8009a4e <_printf_float+0xb6>
 8009b7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b82:	f240 80dd 	bls.w	8009d40 <_printf_float+0x3a8>
 8009b86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	f7f7 fed3 	bl	8001938 <__aeabi_dcmpeq>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d033      	beq.n	8009bfe <_printf_float+0x266>
 8009b96:	4a37      	ldr	r2, [pc, #220]	@ (8009c74 <_printf_float+0x2dc>)
 8009b98:	2301      	movs	r3, #1
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f43f af54 	beq.w	8009a4e <_printf_float+0xb6>
 8009ba6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009baa:	4543      	cmp	r3, r8
 8009bac:	db02      	blt.n	8009bb4 <_printf_float+0x21c>
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	07d8      	lsls	r0, r3, #31
 8009bb2:	d50f      	bpl.n	8009bd4 <_printf_float+0x23c>
 8009bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4628      	mov	r0, r5
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f43f af45 	beq.w	8009a4e <_printf_float+0xb6>
 8009bc4:	f04f 0900 	mov.w	r9, #0
 8009bc8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009bcc:	f104 0a1a 	add.w	sl, r4, #26
 8009bd0:	45c8      	cmp	r8, r9
 8009bd2:	dc09      	bgt.n	8009be8 <_printf_float+0x250>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	079b      	lsls	r3, r3, #30
 8009bd8:	f100 8103 	bmi.w	8009de2 <_printf_float+0x44a>
 8009bdc:	68e0      	ldr	r0, [r4, #12]
 8009bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be0:	4298      	cmp	r0, r3
 8009be2:	bfb8      	it	lt
 8009be4:	4618      	movlt	r0, r3
 8009be6:	e734      	b.n	8009a52 <_printf_float+0xba>
 8009be8:	2301      	movs	r3, #1
 8009bea:	4652      	mov	r2, sl
 8009bec:	4631      	mov	r1, r6
 8009bee:	4628      	mov	r0, r5
 8009bf0:	47b8      	blx	r7
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	f43f af2b 	beq.w	8009a4e <_printf_float+0xb6>
 8009bf8:	f109 0901 	add.w	r9, r9, #1
 8009bfc:	e7e8      	b.n	8009bd0 <_printf_float+0x238>
 8009bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dc39      	bgt.n	8009c78 <_printf_float+0x2e0>
 8009c04:	4a1b      	ldr	r2, [pc, #108]	@ (8009c74 <_printf_float+0x2dc>)
 8009c06:	2301      	movs	r3, #1
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	47b8      	blx	r7
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f43f af1d 	beq.w	8009a4e <_printf_float+0xb6>
 8009c14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c18:	ea59 0303 	orrs.w	r3, r9, r3
 8009c1c:	d102      	bne.n	8009c24 <_printf_float+0x28c>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	07d9      	lsls	r1, r3, #31
 8009c22:	d5d7      	bpl.n	8009bd4 <_printf_float+0x23c>
 8009c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	47b8      	blx	r7
 8009c2e:	3001      	adds	r0, #1
 8009c30:	f43f af0d 	beq.w	8009a4e <_printf_float+0xb6>
 8009c34:	f04f 0a00 	mov.w	sl, #0
 8009c38:	f104 0b1a 	add.w	fp, r4, #26
 8009c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3e:	425b      	negs	r3, r3
 8009c40:	4553      	cmp	r3, sl
 8009c42:	dc01      	bgt.n	8009c48 <_printf_float+0x2b0>
 8009c44:	464b      	mov	r3, r9
 8009c46:	e793      	b.n	8009b70 <_printf_float+0x1d8>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	465a      	mov	r2, fp
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f aefb 	beq.w	8009a4e <_printf_float+0xb6>
 8009c58:	f10a 0a01 	add.w	sl, sl, #1
 8009c5c:	e7ee      	b.n	8009c3c <_printf_float+0x2a4>
 8009c5e:	bf00      	nop
 8009c60:	7fefffff 	.word	0x7fefffff
 8009c64:	0800d46c 	.word	0x0800d46c
 8009c68:	0800d468 	.word	0x0800d468
 8009c6c:	0800d474 	.word	0x0800d474
 8009c70:	0800d470 	.word	0x0800d470
 8009c74:	0800d478 	.word	0x0800d478
 8009c78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c7e:	4553      	cmp	r3, sl
 8009c80:	bfa8      	it	ge
 8009c82:	4653      	movge	r3, sl
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	4699      	mov	r9, r3
 8009c88:	dc36      	bgt.n	8009cf8 <_printf_float+0x360>
 8009c8a:	f04f 0b00 	mov.w	fp, #0
 8009c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c92:	f104 021a 	add.w	r2, r4, #26
 8009c96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c98:	9306      	str	r3, [sp, #24]
 8009c9a:	eba3 0309 	sub.w	r3, r3, r9
 8009c9e:	455b      	cmp	r3, fp
 8009ca0:	dc31      	bgt.n	8009d06 <_printf_float+0x36e>
 8009ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca4:	459a      	cmp	sl, r3
 8009ca6:	dc3a      	bgt.n	8009d1e <_printf_float+0x386>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	07da      	lsls	r2, r3, #31
 8009cac:	d437      	bmi.n	8009d1e <_printf_float+0x386>
 8009cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb0:	ebaa 0903 	sub.w	r9, sl, r3
 8009cb4:	9b06      	ldr	r3, [sp, #24]
 8009cb6:	ebaa 0303 	sub.w	r3, sl, r3
 8009cba:	4599      	cmp	r9, r3
 8009cbc:	bfa8      	it	ge
 8009cbe:	4699      	movge	r9, r3
 8009cc0:	f1b9 0f00 	cmp.w	r9, #0
 8009cc4:	dc33      	bgt.n	8009d2e <_printf_float+0x396>
 8009cc6:	f04f 0800 	mov.w	r8, #0
 8009cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cce:	f104 0b1a 	add.w	fp, r4, #26
 8009cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd4:	ebaa 0303 	sub.w	r3, sl, r3
 8009cd8:	eba3 0309 	sub.w	r3, r3, r9
 8009cdc:	4543      	cmp	r3, r8
 8009cde:	f77f af79 	ble.w	8009bd4 <_printf_float+0x23c>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	465a      	mov	r2, fp
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	f43f aeae 	beq.w	8009a4e <_printf_float+0xb6>
 8009cf2:	f108 0801 	add.w	r8, r8, #1
 8009cf6:	e7ec      	b.n	8009cd2 <_printf_float+0x33a>
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	d1c2      	bne.n	8009c8a <_printf_float+0x2f2>
 8009d04:	e6a3      	b.n	8009a4e <_printf_float+0xb6>
 8009d06:	2301      	movs	r3, #1
 8009d08:	4631      	mov	r1, r6
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	9206      	str	r2, [sp, #24]
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	f43f ae9c 	beq.w	8009a4e <_printf_float+0xb6>
 8009d16:	9a06      	ldr	r2, [sp, #24]
 8009d18:	f10b 0b01 	add.w	fp, fp, #1
 8009d1c:	e7bb      	b.n	8009c96 <_printf_float+0x2fe>
 8009d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d1c0      	bne.n	8009cae <_printf_float+0x316>
 8009d2c:	e68f      	b.n	8009a4e <_printf_float+0xb6>
 8009d2e:	9a06      	ldr	r2, [sp, #24]
 8009d30:	464b      	mov	r3, r9
 8009d32:	4442      	add	r2, r8
 8009d34:	4631      	mov	r1, r6
 8009d36:	4628      	mov	r0, r5
 8009d38:	47b8      	blx	r7
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	d1c3      	bne.n	8009cc6 <_printf_float+0x32e>
 8009d3e:	e686      	b.n	8009a4e <_printf_float+0xb6>
 8009d40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d44:	f1ba 0f01 	cmp.w	sl, #1
 8009d48:	dc01      	bgt.n	8009d4e <_printf_float+0x3b6>
 8009d4a:	07db      	lsls	r3, r3, #31
 8009d4c:	d536      	bpl.n	8009dbc <_printf_float+0x424>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4642      	mov	r2, r8
 8009d52:	4631      	mov	r1, r6
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b8      	blx	r7
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f43f ae78 	beq.w	8009a4e <_printf_float+0xb6>
 8009d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d62:	4631      	mov	r1, r6
 8009d64:	4628      	mov	r0, r5
 8009d66:	47b8      	blx	r7
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f43f ae70 	beq.w	8009a4e <_printf_float+0xb6>
 8009d6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d72:	2200      	movs	r2, #0
 8009d74:	2300      	movs	r3, #0
 8009d76:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009d7a:	f7f7 fddd 	bl	8001938 <__aeabi_dcmpeq>
 8009d7e:	b9c0      	cbnz	r0, 8009db2 <_printf_float+0x41a>
 8009d80:	4653      	mov	r3, sl
 8009d82:	f108 0201 	add.w	r2, r8, #1
 8009d86:	4631      	mov	r1, r6
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b8      	blx	r7
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d10c      	bne.n	8009daa <_printf_float+0x412>
 8009d90:	e65d      	b.n	8009a4e <_printf_float+0xb6>
 8009d92:	2301      	movs	r3, #1
 8009d94:	465a      	mov	r2, fp
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f ae56 	beq.w	8009a4e <_printf_float+0xb6>
 8009da2:	f108 0801 	add.w	r8, r8, #1
 8009da6:	45d0      	cmp	r8, sl
 8009da8:	dbf3      	blt.n	8009d92 <_printf_float+0x3fa>
 8009daa:	464b      	mov	r3, r9
 8009dac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009db0:	e6df      	b.n	8009b72 <_printf_float+0x1da>
 8009db2:	f04f 0800 	mov.w	r8, #0
 8009db6:	f104 0b1a 	add.w	fp, r4, #26
 8009dba:	e7f4      	b.n	8009da6 <_printf_float+0x40e>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4642      	mov	r2, r8
 8009dc0:	e7e1      	b.n	8009d86 <_printf_float+0x3ee>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	464a      	mov	r2, r9
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	4628      	mov	r0, r5
 8009dca:	47b8      	blx	r7
 8009dcc:	3001      	adds	r0, #1
 8009dce:	f43f ae3e 	beq.w	8009a4e <_printf_float+0xb6>
 8009dd2:	f108 0801 	add.w	r8, r8, #1
 8009dd6:	68e3      	ldr	r3, [r4, #12]
 8009dd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009dda:	1a5b      	subs	r3, r3, r1
 8009ddc:	4543      	cmp	r3, r8
 8009dde:	dcf0      	bgt.n	8009dc2 <_printf_float+0x42a>
 8009de0:	e6fc      	b.n	8009bdc <_printf_float+0x244>
 8009de2:	f04f 0800 	mov.w	r8, #0
 8009de6:	f104 0919 	add.w	r9, r4, #25
 8009dea:	e7f4      	b.n	8009dd6 <_printf_float+0x43e>

08009dec <_printf_common>:
 8009dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df0:	4616      	mov	r6, r2
 8009df2:	4698      	mov	r8, r3
 8009df4:	688a      	ldr	r2, [r1, #8]
 8009df6:	690b      	ldr	r3, [r1, #16]
 8009df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	bfb8      	it	lt
 8009e00:	4613      	movlt	r3, r2
 8009e02:	6033      	str	r3, [r6, #0]
 8009e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e08:	4607      	mov	r7, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	b10a      	cbz	r2, 8009e12 <_printf_common+0x26>
 8009e0e:	3301      	adds	r3, #1
 8009e10:	6033      	str	r3, [r6, #0]
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	0699      	lsls	r1, r3, #26
 8009e16:	bf42      	ittt	mi
 8009e18:	6833      	ldrmi	r3, [r6, #0]
 8009e1a:	3302      	addmi	r3, #2
 8009e1c:	6033      	strmi	r3, [r6, #0]
 8009e1e:	6825      	ldr	r5, [r4, #0]
 8009e20:	f015 0506 	ands.w	r5, r5, #6
 8009e24:	d106      	bne.n	8009e34 <_printf_common+0x48>
 8009e26:	f104 0a19 	add.w	sl, r4, #25
 8009e2a:	68e3      	ldr	r3, [r4, #12]
 8009e2c:	6832      	ldr	r2, [r6, #0]
 8009e2e:	1a9b      	subs	r3, r3, r2
 8009e30:	42ab      	cmp	r3, r5
 8009e32:	dc26      	bgt.n	8009e82 <_printf_common+0x96>
 8009e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e38:	6822      	ldr	r2, [r4, #0]
 8009e3a:	3b00      	subs	r3, #0
 8009e3c:	bf18      	it	ne
 8009e3e:	2301      	movne	r3, #1
 8009e40:	0692      	lsls	r2, r2, #26
 8009e42:	d42b      	bmi.n	8009e9c <_printf_common+0xb0>
 8009e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e48:	4641      	mov	r1, r8
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	47c8      	blx	r9
 8009e4e:	3001      	adds	r0, #1
 8009e50:	d01e      	beq.n	8009e90 <_printf_common+0xa4>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	6922      	ldr	r2, [r4, #16]
 8009e56:	f003 0306 	and.w	r3, r3, #6
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	bf02      	ittt	eq
 8009e5e:	68e5      	ldreq	r5, [r4, #12]
 8009e60:	6833      	ldreq	r3, [r6, #0]
 8009e62:	1aed      	subeq	r5, r5, r3
 8009e64:	68a3      	ldr	r3, [r4, #8]
 8009e66:	bf0c      	ite	eq
 8009e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e6c:	2500      	movne	r5, #0
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	bfc4      	itt	gt
 8009e72:	1a9b      	subgt	r3, r3, r2
 8009e74:	18ed      	addgt	r5, r5, r3
 8009e76:	2600      	movs	r6, #0
 8009e78:	341a      	adds	r4, #26
 8009e7a:	42b5      	cmp	r5, r6
 8009e7c:	d11a      	bne.n	8009eb4 <_printf_common+0xc8>
 8009e7e:	2000      	movs	r0, #0
 8009e80:	e008      	b.n	8009e94 <_printf_common+0xa8>
 8009e82:	2301      	movs	r3, #1
 8009e84:	4652      	mov	r2, sl
 8009e86:	4641      	mov	r1, r8
 8009e88:	4638      	mov	r0, r7
 8009e8a:	47c8      	blx	r9
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d103      	bne.n	8009e98 <_printf_common+0xac>
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e98:	3501      	adds	r5, #1
 8009e9a:	e7c6      	b.n	8009e2a <_printf_common+0x3e>
 8009e9c:	18e1      	adds	r1, r4, r3
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	2030      	movs	r0, #48	@ 0x30
 8009ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ea6:	4422      	add	r2, r4
 8009ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	e7c7      	b.n	8009e44 <_printf_common+0x58>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	4622      	mov	r2, r4
 8009eb8:	4641      	mov	r1, r8
 8009eba:	4638      	mov	r0, r7
 8009ebc:	47c8      	blx	r9
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	d0e6      	beq.n	8009e90 <_printf_common+0xa4>
 8009ec2:	3601      	adds	r6, #1
 8009ec4:	e7d9      	b.n	8009e7a <_printf_common+0x8e>
	...

08009ec8 <_printf_i>:
 8009ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ecc:	7e0f      	ldrb	r7, [r1, #24]
 8009ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ed0:	2f78      	cmp	r7, #120	@ 0x78
 8009ed2:	4691      	mov	r9, r2
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	469a      	mov	sl, r3
 8009eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ede:	d807      	bhi.n	8009ef0 <_printf_i+0x28>
 8009ee0:	2f62      	cmp	r7, #98	@ 0x62
 8009ee2:	d80a      	bhi.n	8009efa <_printf_i+0x32>
 8009ee4:	2f00      	cmp	r7, #0
 8009ee6:	f000 80d1 	beq.w	800a08c <_printf_i+0x1c4>
 8009eea:	2f58      	cmp	r7, #88	@ 0x58
 8009eec:	f000 80b8 	beq.w	800a060 <_printf_i+0x198>
 8009ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ef8:	e03a      	b.n	8009f70 <_printf_i+0xa8>
 8009efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009efe:	2b15      	cmp	r3, #21
 8009f00:	d8f6      	bhi.n	8009ef0 <_printf_i+0x28>
 8009f02:	a101      	add	r1, pc, #4	@ (adr r1, 8009f08 <_printf_i+0x40>)
 8009f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f08:	08009f61 	.word	0x08009f61
 8009f0c:	08009f75 	.word	0x08009f75
 8009f10:	08009ef1 	.word	0x08009ef1
 8009f14:	08009ef1 	.word	0x08009ef1
 8009f18:	08009ef1 	.word	0x08009ef1
 8009f1c:	08009ef1 	.word	0x08009ef1
 8009f20:	08009f75 	.word	0x08009f75
 8009f24:	08009ef1 	.word	0x08009ef1
 8009f28:	08009ef1 	.word	0x08009ef1
 8009f2c:	08009ef1 	.word	0x08009ef1
 8009f30:	08009ef1 	.word	0x08009ef1
 8009f34:	0800a073 	.word	0x0800a073
 8009f38:	08009f9f 	.word	0x08009f9f
 8009f3c:	0800a02d 	.word	0x0800a02d
 8009f40:	08009ef1 	.word	0x08009ef1
 8009f44:	08009ef1 	.word	0x08009ef1
 8009f48:	0800a095 	.word	0x0800a095
 8009f4c:	08009ef1 	.word	0x08009ef1
 8009f50:	08009f9f 	.word	0x08009f9f
 8009f54:	08009ef1 	.word	0x08009ef1
 8009f58:	08009ef1 	.word	0x08009ef1
 8009f5c:	0800a035 	.word	0x0800a035
 8009f60:	6833      	ldr	r3, [r6, #0]
 8009f62:	1d1a      	adds	r2, r3, #4
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6032      	str	r2, [r6, #0]
 8009f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f70:	2301      	movs	r3, #1
 8009f72:	e09c      	b.n	800a0ae <_printf_i+0x1e6>
 8009f74:	6833      	ldr	r3, [r6, #0]
 8009f76:	6820      	ldr	r0, [r4, #0]
 8009f78:	1d19      	adds	r1, r3, #4
 8009f7a:	6031      	str	r1, [r6, #0]
 8009f7c:	0606      	lsls	r6, r0, #24
 8009f7e:	d501      	bpl.n	8009f84 <_printf_i+0xbc>
 8009f80:	681d      	ldr	r5, [r3, #0]
 8009f82:	e003      	b.n	8009f8c <_printf_i+0xc4>
 8009f84:	0645      	lsls	r5, r0, #25
 8009f86:	d5fb      	bpl.n	8009f80 <_printf_i+0xb8>
 8009f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f8c:	2d00      	cmp	r5, #0
 8009f8e:	da03      	bge.n	8009f98 <_printf_i+0xd0>
 8009f90:	232d      	movs	r3, #45	@ 0x2d
 8009f92:	426d      	negs	r5, r5
 8009f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f98:	4858      	ldr	r0, [pc, #352]	@ (800a0fc <_printf_i+0x234>)
 8009f9a:	230a      	movs	r3, #10
 8009f9c:	e011      	b.n	8009fc2 <_printf_i+0xfa>
 8009f9e:	6821      	ldr	r1, [r4, #0]
 8009fa0:	6833      	ldr	r3, [r6, #0]
 8009fa2:	0608      	lsls	r0, r1, #24
 8009fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fa8:	d402      	bmi.n	8009fb0 <_printf_i+0xe8>
 8009faa:	0649      	lsls	r1, r1, #25
 8009fac:	bf48      	it	mi
 8009fae:	b2ad      	uxthmi	r5, r5
 8009fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fb2:	4852      	ldr	r0, [pc, #328]	@ (800a0fc <_printf_i+0x234>)
 8009fb4:	6033      	str	r3, [r6, #0]
 8009fb6:	bf14      	ite	ne
 8009fb8:	230a      	movne	r3, #10
 8009fba:	2308      	moveq	r3, #8
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fc2:	6866      	ldr	r6, [r4, #4]
 8009fc4:	60a6      	str	r6, [r4, #8]
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	db05      	blt.n	8009fd6 <_printf_i+0x10e>
 8009fca:	6821      	ldr	r1, [r4, #0]
 8009fcc:	432e      	orrs	r6, r5
 8009fce:	f021 0104 	bic.w	r1, r1, #4
 8009fd2:	6021      	str	r1, [r4, #0]
 8009fd4:	d04b      	beq.n	800a06e <_printf_i+0x1a6>
 8009fd6:	4616      	mov	r6, r2
 8009fd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fdc:	fb03 5711 	mls	r7, r3, r1, r5
 8009fe0:	5dc7      	ldrb	r7, [r0, r7]
 8009fe2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fe6:	462f      	mov	r7, r5
 8009fe8:	42bb      	cmp	r3, r7
 8009fea:	460d      	mov	r5, r1
 8009fec:	d9f4      	bls.n	8009fd8 <_printf_i+0x110>
 8009fee:	2b08      	cmp	r3, #8
 8009ff0:	d10b      	bne.n	800a00a <_printf_i+0x142>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	07df      	lsls	r7, r3, #31
 8009ff6:	d508      	bpl.n	800a00a <_printf_i+0x142>
 8009ff8:	6923      	ldr	r3, [r4, #16]
 8009ffa:	6861      	ldr	r1, [r4, #4]
 8009ffc:	4299      	cmp	r1, r3
 8009ffe:	bfde      	ittt	le
 800a000:	2330      	movle	r3, #48	@ 0x30
 800a002:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a006:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a00a:	1b92      	subs	r2, r2, r6
 800a00c:	6122      	str	r2, [r4, #16]
 800a00e:	f8cd a000 	str.w	sl, [sp]
 800a012:	464b      	mov	r3, r9
 800a014:	aa03      	add	r2, sp, #12
 800a016:	4621      	mov	r1, r4
 800a018:	4640      	mov	r0, r8
 800a01a:	f7ff fee7 	bl	8009dec <_printf_common>
 800a01e:	3001      	adds	r0, #1
 800a020:	d14a      	bne.n	800a0b8 <_printf_i+0x1f0>
 800a022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a026:	b004      	add	sp, #16
 800a028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	f043 0320 	orr.w	r3, r3, #32
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	4832      	ldr	r0, [pc, #200]	@ (800a100 <_printf_i+0x238>)
 800a036:	2778      	movs	r7, #120	@ 0x78
 800a038:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a03c:	6823      	ldr	r3, [r4, #0]
 800a03e:	6831      	ldr	r1, [r6, #0]
 800a040:	061f      	lsls	r7, r3, #24
 800a042:	f851 5b04 	ldr.w	r5, [r1], #4
 800a046:	d402      	bmi.n	800a04e <_printf_i+0x186>
 800a048:	065f      	lsls	r7, r3, #25
 800a04a:	bf48      	it	mi
 800a04c:	b2ad      	uxthmi	r5, r5
 800a04e:	6031      	str	r1, [r6, #0]
 800a050:	07d9      	lsls	r1, r3, #31
 800a052:	bf44      	itt	mi
 800a054:	f043 0320 	orrmi.w	r3, r3, #32
 800a058:	6023      	strmi	r3, [r4, #0]
 800a05a:	b11d      	cbz	r5, 800a064 <_printf_i+0x19c>
 800a05c:	2310      	movs	r3, #16
 800a05e:	e7ad      	b.n	8009fbc <_printf_i+0xf4>
 800a060:	4826      	ldr	r0, [pc, #152]	@ (800a0fc <_printf_i+0x234>)
 800a062:	e7e9      	b.n	800a038 <_printf_i+0x170>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	f023 0320 	bic.w	r3, r3, #32
 800a06a:	6023      	str	r3, [r4, #0]
 800a06c:	e7f6      	b.n	800a05c <_printf_i+0x194>
 800a06e:	4616      	mov	r6, r2
 800a070:	e7bd      	b.n	8009fee <_printf_i+0x126>
 800a072:	6833      	ldr	r3, [r6, #0]
 800a074:	6825      	ldr	r5, [r4, #0]
 800a076:	6961      	ldr	r1, [r4, #20]
 800a078:	1d18      	adds	r0, r3, #4
 800a07a:	6030      	str	r0, [r6, #0]
 800a07c:	062e      	lsls	r6, r5, #24
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	d501      	bpl.n	800a086 <_printf_i+0x1be>
 800a082:	6019      	str	r1, [r3, #0]
 800a084:	e002      	b.n	800a08c <_printf_i+0x1c4>
 800a086:	0668      	lsls	r0, r5, #25
 800a088:	d5fb      	bpl.n	800a082 <_printf_i+0x1ba>
 800a08a:	8019      	strh	r1, [r3, #0]
 800a08c:	2300      	movs	r3, #0
 800a08e:	6123      	str	r3, [r4, #16]
 800a090:	4616      	mov	r6, r2
 800a092:	e7bc      	b.n	800a00e <_printf_i+0x146>
 800a094:	6833      	ldr	r3, [r6, #0]
 800a096:	1d1a      	adds	r2, r3, #4
 800a098:	6032      	str	r2, [r6, #0]
 800a09a:	681e      	ldr	r6, [r3, #0]
 800a09c:	6862      	ldr	r2, [r4, #4]
 800a09e:	2100      	movs	r1, #0
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f7f6 ffcd 	bl	8001040 <memchr>
 800a0a6:	b108      	cbz	r0, 800a0ac <_printf_i+0x1e4>
 800a0a8:	1b80      	subs	r0, r0, r6
 800a0aa:	6060      	str	r0, [r4, #4]
 800a0ac:	6863      	ldr	r3, [r4, #4]
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0b6:	e7aa      	b.n	800a00e <_printf_i+0x146>
 800a0b8:	6923      	ldr	r3, [r4, #16]
 800a0ba:	4632      	mov	r2, r6
 800a0bc:	4649      	mov	r1, r9
 800a0be:	4640      	mov	r0, r8
 800a0c0:	47d0      	blx	sl
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d0ad      	beq.n	800a022 <_printf_i+0x15a>
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	079b      	lsls	r3, r3, #30
 800a0ca:	d413      	bmi.n	800a0f4 <_printf_i+0x22c>
 800a0cc:	68e0      	ldr	r0, [r4, #12]
 800a0ce:	9b03      	ldr	r3, [sp, #12]
 800a0d0:	4298      	cmp	r0, r3
 800a0d2:	bfb8      	it	lt
 800a0d4:	4618      	movlt	r0, r3
 800a0d6:	e7a6      	b.n	800a026 <_printf_i+0x15e>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	4632      	mov	r2, r6
 800a0dc:	4649      	mov	r1, r9
 800a0de:	4640      	mov	r0, r8
 800a0e0:	47d0      	blx	sl
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	d09d      	beq.n	800a022 <_printf_i+0x15a>
 800a0e6:	3501      	adds	r5, #1
 800a0e8:	68e3      	ldr	r3, [r4, #12]
 800a0ea:	9903      	ldr	r1, [sp, #12]
 800a0ec:	1a5b      	subs	r3, r3, r1
 800a0ee:	42ab      	cmp	r3, r5
 800a0f0:	dcf2      	bgt.n	800a0d8 <_printf_i+0x210>
 800a0f2:	e7eb      	b.n	800a0cc <_printf_i+0x204>
 800a0f4:	2500      	movs	r5, #0
 800a0f6:	f104 0619 	add.w	r6, r4, #25
 800a0fa:	e7f5      	b.n	800a0e8 <_printf_i+0x220>
 800a0fc:	0800d47a 	.word	0x0800d47a
 800a100:	0800d48b 	.word	0x0800d48b

0800a104 <std>:
 800a104:	2300      	movs	r3, #0
 800a106:	b510      	push	{r4, lr}
 800a108:	4604      	mov	r4, r0
 800a10a:	e9c0 3300 	strd	r3, r3, [r0]
 800a10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a112:	6083      	str	r3, [r0, #8]
 800a114:	8181      	strh	r1, [r0, #12]
 800a116:	6643      	str	r3, [r0, #100]	@ 0x64
 800a118:	81c2      	strh	r2, [r0, #14]
 800a11a:	6183      	str	r3, [r0, #24]
 800a11c:	4619      	mov	r1, r3
 800a11e:	2208      	movs	r2, #8
 800a120:	305c      	adds	r0, #92	@ 0x5c
 800a122:	f000 f9ba 	bl	800a49a <memset>
 800a126:	4b0d      	ldr	r3, [pc, #52]	@ (800a15c <std+0x58>)
 800a128:	6263      	str	r3, [r4, #36]	@ 0x24
 800a12a:	4b0d      	ldr	r3, [pc, #52]	@ (800a160 <std+0x5c>)
 800a12c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a12e:	4b0d      	ldr	r3, [pc, #52]	@ (800a164 <std+0x60>)
 800a130:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a132:	4b0d      	ldr	r3, [pc, #52]	@ (800a168 <std+0x64>)
 800a134:	6323      	str	r3, [r4, #48]	@ 0x30
 800a136:	4b0d      	ldr	r3, [pc, #52]	@ (800a16c <std+0x68>)
 800a138:	6224      	str	r4, [r4, #32]
 800a13a:	429c      	cmp	r4, r3
 800a13c:	d006      	beq.n	800a14c <std+0x48>
 800a13e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a142:	4294      	cmp	r4, r2
 800a144:	d002      	beq.n	800a14c <std+0x48>
 800a146:	33d0      	adds	r3, #208	@ 0xd0
 800a148:	429c      	cmp	r4, r3
 800a14a:	d105      	bne.n	800a158 <std+0x54>
 800a14c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a154:	f000 ba1e 	b.w	800a594 <__retarget_lock_init_recursive>
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	bf00      	nop
 800a15c:	0800a415 	.word	0x0800a415
 800a160:	0800a437 	.word	0x0800a437
 800a164:	0800a46f 	.word	0x0800a46f
 800a168:	0800a493 	.word	0x0800a493
 800a16c:	20004008 	.word	0x20004008

0800a170 <stdio_exit_handler>:
 800a170:	4a02      	ldr	r2, [pc, #8]	@ (800a17c <stdio_exit_handler+0xc>)
 800a172:	4903      	ldr	r1, [pc, #12]	@ (800a180 <stdio_exit_handler+0x10>)
 800a174:	4803      	ldr	r0, [pc, #12]	@ (800a184 <stdio_exit_handler+0x14>)
 800a176:	f000 b87b 	b.w	800a270 <_fwalk_sglue>
 800a17a:	bf00      	nop
 800a17c:	20000038 	.word	0x20000038
 800a180:	0800bed9 	.word	0x0800bed9
 800a184:	20000048 	.word	0x20000048

0800a188 <cleanup_stdio>:
 800a188:	6841      	ldr	r1, [r0, #4]
 800a18a:	4b0c      	ldr	r3, [pc, #48]	@ (800a1bc <cleanup_stdio+0x34>)
 800a18c:	4299      	cmp	r1, r3
 800a18e:	b510      	push	{r4, lr}
 800a190:	4604      	mov	r4, r0
 800a192:	d001      	beq.n	800a198 <cleanup_stdio+0x10>
 800a194:	f001 fea0 	bl	800bed8 <_fflush_r>
 800a198:	68a1      	ldr	r1, [r4, #8]
 800a19a:	4b09      	ldr	r3, [pc, #36]	@ (800a1c0 <cleanup_stdio+0x38>)
 800a19c:	4299      	cmp	r1, r3
 800a19e:	d002      	beq.n	800a1a6 <cleanup_stdio+0x1e>
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f001 fe99 	bl	800bed8 <_fflush_r>
 800a1a6:	68e1      	ldr	r1, [r4, #12]
 800a1a8:	4b06      	ldr	r3, [pc, #24]	@ (800a1c4 <cleanup_stdio+0x3c>)
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	d004      	beq.n	800a1b8 <cleanup_stdio+0x30>
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b4:	f001 be90 	b.w	800bed8 <_fflush_r>
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20004008 	.word	0x20004008
 800a1c0:	20004070 	.word	0x20004070
 800a1c4:	200040d8 	.word	0x200040d8

0800a1c8 <global_stdio_init.part.0>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f8 <global_stdio_init.part.0+0x30>)
 800a1cc:	4c0b      	ldr	r4, [pc, #44]	@ (800a1fc <global_stdio_init.part.0+0x34>)
 800a1ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a200 <global_stdio_init.part.0+0x38>)
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2104      	movs	r1, #4
 800a1d8:	f7ff ff94 	bl	800a104 <std>
 800a1dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	2109      	movs	r1, #9
 800a1e4:	f7ff ff8e 	bl	800a104 <std>
 800a1e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f2:	2112      	movs	r1, #18
 800a1f4:	f7ff bf86 	b.w	800a104 <std>
 800a1f8:	20004140 	.word	0x20004140
 800a1fc:	20004008 	.word	0x20004008
 800a200:	0800a171 	.word	0x0800a171

0800a204 <__sfp_lock_acquire>:
 800a204:	4801      	ldr	r0, [pc, #4]	@ (800a20c <__sfp_lock_acquire+0x8>)
 800a206:	f000 b9c6 	b.w	800a596 <__retarget_lock_acquire_recursive>
 800a20a:	bf00      	nop
 800a20c:	20004149 	.word	0x20004149

0800a210 <__sfp_lock_release>:
 800a210:	4801      	ldr	r0, [pc, #4]	@ (800a218 <__sfp_lock_release+0x8>)
 800a212:	f000 b9c1 	b.w	800a598 <__retarget_lock_release_recursive>
 800a216:	bf00      	nop
 800a218:	20004149 	.word	0x20004149

0800a21c <__sinit>:
 800a21c:	b510      	push	{r4, lr}
 800a21e:	4604      	mov	r4, r0
 800a220:	f7ff fff0 	bl	800a204 <__sfp_lock_acquire>
 800a224:	6a23      	ldr	r3, [r4, #32]
 800a226:	b11b      	cbz	r3, 800a230 <__sinit+0x14>
 800a228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a22c:	f7ff bff0 	b.w	800a210 <__sfp_lock_release>
 800a230:	4b04      	ldr	r3, [pc, #16]	@ (800a244 <__sinit+0x28>)
 800a232:	6223      	str	r3, [r4, #32]
 800a234:	4b04      	ldr	r3, [pc, #16]	@ (800a248 <__sinit+0x2c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1f5      	bne.n	800a228 <__sinit+0xc>
 800a23c:	f7ff ffc4 	bl	800a1c8 <global_stdio_init.part.0>
 800a240:	e7f2      	b.n	800a228 <__sinit+0xc>
 800a242:	bf00      	nop
 800a244:	0800a189 	.word	0x0800a189
 800a248:	20004140 	.word	0x20004140

0800a24c <fiprintf>:
 800a24c:	b40e      	push	{r1, r2, r3}
 800a24e:	b503      	push	{r0, r1, lr}
 800a250:	4601      	mov	r1, r0
 800a252:	ab03      	add	r3, sp, #12
 800a254:	4805      	ldr	r0, [pc, #20]	@ (800a26c <fiprintf+0x20>)
 800a256:	f853 2b04 	ldr.w	r2, [r3], #4
 800a25a:	6800      	ldr	r0, [r0, #0]
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	f001 fc9f 	bl	800bba0 <_vfiprintf_r>
 800a262:	b002      	add	sp, #8
 800a264:	f85d eb04 	ldr.w	lr, [sp], #4
 800a268:	b003      	add	sp, #12
 800a26a:	4770      	bx	lr
 800a26c:	20000044 	.word	0x20000044

0800a270 <_fwalk_sglue>:
 800a270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a274:	4607      	mov	r7, r0
 800a276:	4688      	mov	r8, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	2600      	movs	r6, #0
 800a27c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a280:	f1b9 0901 	subs.w	r9, r9, #1
 800a284:	d505      	bpl.n	800a292 <_fwalk_sglue+0x22>
 800a286:	6824      	ldr	r4, [r4, #0]
 800a288:	2c00      	cmp	r4, #0
 800a28a:	d1f7      	bne.n	800a27c <_fwalk_sglue+0xc>
 800a28c:	4630      	mov	r0, r6
 800a28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d907      	bls.n	800a2a8 <_fwalk_sglue+0x38>
 800a298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a29c:	3301      	adds	r3, #1
 800a29e:	d003      	beq.n	800a2a8 <_fwalk_sglue+0x38>
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	47c0      	blx	r8
 800a2a6:	4306      	orrs	r6, r0
 800a2a8:	3568      	adds	r5, #104	@ 0x68
 800a2aa:	e7e9      	b.n	800a280 <_fwalk_sglue+0x10>

0800a2ac <setvbuf>:
 800a2ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2b0:	461d      	mov	r5, r3
 800a2b2:	4b57      	ldr	r3, [pc, #348]	@ (800a410 <setvbuf+0x164>)
 800a2b4:	681f      	ldr	r7, [r3, #0]
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	460e      	mov	r6, r1
 800a2ba:	4690      	mov	r8, r2
 800a2bc:	b127      	cbz	r7, 800a2c8 <setvbuf+0x1c>
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	b913      	cbnz	r3, 800a2c8 <setvbuf+0x1c>
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	f7ff ffaa 	bl	800a21c <__sinit>
 800a2c8:	f1b8 0f02 	cmp.w	r8, #2
 800a2cc:	d006      	beq.n	800a2dc <setvbuf+0x30>
 800a2ce:	f1b8 0f01 	cmp.w	r8, #1
 800a2d2:	f200 809a 	bhi.w	800a40a <setvbuf+0x15e>
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	f2c0 8097 	blt.w	800a40a <setvbuf+0x15e>
 800a2dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2de:	07d9      	lsls	r1, r3, #31
 800a2e0:	d405      	bmi.n	800a2ee <setvbuf+0x42>
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	059a      	lsls	r2, r3, #22
 800a2e6:	d402      	bmi.n	800a2ee <setvbuf+0x42>
 800a2e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2ea:	f000 f954 	bl	800a596 <__retarget_lock_acquire_recursive>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	f001 fdf1 	bl	800bed8 <_fflush_r>
 800a2f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2f8:	b141      	cbz	r1, 800a30c <setvbuf+0x60>
 800a2fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2fe:	4299      	cmp	r1, r3
 800a300:	d002      	beq.n	800a308 <setvbuf+0x5c>
 800a302:	4638      	mov	r0, r7
 800a304:	f000 ffa8 	bl	800b258 <_free_r>
 800a308:	2300      	movs	r3, #0
 800a30a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a30c:	2300      	movs	r3, #0
 800a30e:	61a3      	str	r3, [r4, #24]
 800a310:	6063      	str	r3, [r4, #4]
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	061b      	lsls	r3, r3, #24
 800a316:	d503      	bpl.n	800a320 <setvbuf+0x74>
 800a318:	6921      	ldr	r1, [r4, #16]
 800a31a:	4638      	mov	r0, r7
 800a31c:	f000 ff9c 	bl	800b258 <_free_r>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800a326:	f023 0303 	bic.w	r3, r3, #3
 800a32a:	f1b8 0f02 	cmp.w	r8, #2
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	d061      	beq.n	800a3f6 <setvbuf+0x14a>
 800a332:	ab01      	add	r3, sp, #4
 800a334:	466a      	mov	r2, sp
 800a336:	4621      	mov	r1, r4
 800a338:	4638      	mov	r0, r7
 800a33a:	f001 fdf5 	bl	800bf28 <__swhatbuf_r>
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	4318      	orrs	r0, r3
 800a342:	81a0      	strh	r0, [r4, #12]
 800a344:	bb2d      	cbnz	r5, 800a392 <setvbuf+0xe6>
 800a346:	9d00      	ldr	r5, [sp, #0]
 800a348:	4628      	mov	r0, r5
 800a34a:	f000 ffcf 	bl	800b2ec <malloc>
 800a34e:	4606      	mov	r6, r0
 800a350:	2800      	cmp	r0, #0
 800a352:	d152      	bne.n	800a3fa <setvbuf+0x14e>
 800a354:	f8dd 9000 	ldr.w	r9, [sp]
 800a358:	45a9      	cmp	r9, r5
 800a35a:	d140      	bne.n	800a3de <setvbuf+0x132>
 800a35c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a364:	f043 0202 	orr.w	r2, r3, #2
 800a368:	81a2      	strh	r2, [r4, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	60a2      	str	r2, [r4, #8]
 800a36e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800a372:	6022      	str	r2, [r4, #0]
 800a374:	6122      	str	r2, [r4, #16]
 800a376:	2201      	movs	r2, #1
 800a378:	6162      	str	r2, [r4, #20]
 800a37a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a37c:	07d6      	lsls	r6, r2, #31
 800a37e:	d404      	bmi.n	800a38a <setvbuf+0xde>
 800a380:	0598      	lsls	r0, r3, #22
 800a382:	d402      	bmi.n	800a38a <setvbuf+0xde>
 800a384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a386:	f000 f907 	bl	800a598 <__retarget_lock_release_recursive>
 800a38a:	4628      	mov	r0, r5
 800a38c:	b003      	add	sp, #12
 800a38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a392:	2e00      	cmp	r6, #0
 800a394:	d0d8      	beq.n	800a348 <setvbuf+0x9c>
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	b913      	cbnz	r3, 800a3a0 <setvbuf+0xf4>
 800a39a:	4638      	mov	r0, r7
 800a39c:	f7ff ff3e 	bl	800a21c <__sinit>
 800a3a0:	f1b8 0f01 	cmp.w	r8, #1
 800a3a4:	bf08      	it	eq
 800a3a6:	89a3      	ldrheq	r3, [r4, #12]
 800a3a8:	6026      	str	r6, [r4, #0]
 800a3aa:	bf04      	itt	eq
 800a3ac:	f043 0301 	orreq.w	r3, r3, #1
 800a3b0:	81a3      	strheq	r3, [r4, #12]
 800a3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b6:	f013 0208 	ands.w	r2, r3, #8
 800a3ba:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a3be:	d01e      	beq.n	800a3fe <setvbuf+0x152>
 800a3c0:	07d9      	lsls	r1, r3, #31
 800a3c2:	bf41      	itttt	mi
 800a3c4:	2200      	movmi	r2, #0
 800a3c6:	426d      	negmi	r5, r5
 800a3c8:	60a2      	strmi	r2, [r4, #8]
 800a3ca:	61a5      	strmi	r5, [r4, #24]
 800a3cc:	bf58      	it	pl
 800a3ce:	60a5      	strpl	r5, [r4, #8]
 800a3d0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3d2:	07d2      	lsls	r2, r2, #31
 800a3d4:	d401      	bmi.n	800a3da <setvbuf+0x12e>
 800a3d6:	059b      	lsls	r3, r3, #22
 800a3d8:	d513      	bpl.n	800a402 <setvbuf+0x156>
 800a3da:	2500      	movs	r5, #0
 800a3dc:	e7d5      	b.n	800a38a <setvbuf+0xde>
 800a3de:	4648      	mov	r0, r9
 800a3e0:	f000 ff84 	bl	800b2ec <malloc>
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d0b8      	beq.n	800a35c <setvbuf+0xb0>
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	464d      	mov	r5, r9
 800a3f4:	e7cf      	b.n	800a396 <setvbuf+0xea>
 800a3f6:	2500      	movs	r5, #0
 800a3f8:	e7b2      	b.n	800a360 <setvbuf+0xb4>
 800a3fa:	46a9      	mov	r9, r5
 800a3fc:	e7f5      	b.n	800a3ea <setvbuf+0x13e>
 800a3fe:	60a2      	str	r2, [r4, #8]
 800a400:	e7e6      	b.n	800a3d0 <setvbuf+0x124>
 800a402:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a404:	f000 f8c8 	bl	800a598 <__retarget_lock_release_recursive>
 800a408:	e7e7      	b.n	800a3da <setvbuf+0x12e>
 800a40a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a40e:	e7bc      	b.n	800a38a <setvbuf+0xde>
 800a410:	20000044 	.word	0x20000044

0800a414 <__sread>:
 800a414:	b510      	push	{r4, lr}
 800a416:	460c      	mov	r4, r1
 800a418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41c:	f000 f86c 	bl	800a4f8 <_read_r>
 800a420:	2800      	cmp	r0, #0
 800a422:	bfab      	itete	ge
 800a424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a426:	89a3      	ldrhlt	r3, [r4, #12]
 800a428:	181b      	addge	r3, r3, r0
 800a42a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a42e:	bfac      	ite	ge
 800a430:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a432:	81a3      	strhlt	r3, [r4, #12]
 800a434:	bd10      	pop	{r4, pc}

0800a436 <__swrite>:
 800a436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a43a:	461f      	mov	r7, r3
 800a43c:	898b      	ldrh	r3, [r1, #12]
 800a43e:	05db      	lsls	r3, r3, #23
 800a440:	4605      	mov	r5, r0
 800a442:	460c      	mov	r4, r1
 800a444:	4616      	mov	r6, r2
 800a446:	d505      	bpl.n	800a454 <__swrite+0x1e>
 800a448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44c:	2302      	movs	r3, #2
 800a44e:	2200      	movs	r2, #0
 800a450:	f000 f840 	bl	800a4d4 <_lseek_r>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a45a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	4632      	mov	r2, r6
 800a462:	463b      	mov	r3, r7
 800a464:	4628      	mov	r0, r5
 800a466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a46a:	f000 b857 	b.w	800a51c <_write_r>

0800a46e <__sseek>:
 800a46e:	b510      	push	{r4, lr}
 800a470:	460c      	mov	r4, r1
 800a472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a476:	f000 f82d 	bl	800a4d4 <_lseek_r>
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	bf15      	itete	ne
 800a480:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a48a:	81a3      	strheq	r3, [r4, #12]
 800a48c:	bf18      	it	ne
 800a48e:	81a3      	strhne	r3, [r4, #12]
 800a490:	bd10      	pop	{r4, pc}

0800a492 <__sclose>:
 800a492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a496:	f000 b80d 	b.w	800a4b4 <_close_r>

0800a49a <memset>:
 800a49a:	4402      	add	r2, r0
 800a49c:	4603      	mov	r3, r0
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d100      	bne.n	800a4a4 <memset+0xa>
 800a4a2:	4770      	bx	lr
 800a4a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a4a8:	e7f9      	b.n	800a49e <memset+0x4>
	...

0800a4ac <_localeconv_r>:
 800a4ac:	4800      	ldr	r0, [pc, #0]	@ (800a4b0 <_localeconv_r+0x4>)
 800a4ae:	4770      	bx	lr
 800a4b0:	20000184 	.word	0x20000184

0800a4b4 <_close_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4d06      	ldr	r5, [pc, #24]	@ (800a4d0 <_close_r+0x1c>)
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4608      	mov	r0, r1
 800a4be:	602b      	str	r3, [r5, #0]
 800a4c0:	f001 ff58 	bl	800c374 <_close>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d102      	bne.n	800a4ce <_close_r+0x1a>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	b103      	cbz	r3, 800a4ce <_close_r+0x1a>
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
 800a4d0:	20004144 	.word	0x20004144

0800a4d4 <_lseek_r>:
 800a4d4:	b538      	push	{r3, r4, r5, lr}
 800a4d6:	4d07      	ldr	r5, [pc, #28]	@ (800a4f4 <_lseek_r+0x20>)
 800a4d8:	4604      	mov	r4, r0
 800a4da:	4608      	mov	r0, r1
 800a4dc:	4611      	mov	r1, r2
 800a4de:	2200      	movs	r2, #0
 800a4e0:	602a      	str	r2, [r5, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f001 ff37 	bl	800c356 <_lseek>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_lseek_r+0x1e>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_lseek_r+0x1e>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	20004144 	.word	0x20004144

0800a4f8 <_read_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4d07      	ldr	r5, [pc, #28]	@ (800a518 <_read_r+0x20>)
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	4608      	mov	r0, r1
 800a500:	4611      	mov	r1, r2
 800a502:	2200      	movs	r2, #0
 800a504:	602a      	str	r2, [r5, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	f7fa f8a4 	bl	8004654 <_read>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_read_r+0x1e>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_read_r+0x1e>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	20004144 	.word	0x20004144

0800a51c <_write_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4d07      	ldr	r5, [pc, #28]	@ (800a53c <_write_r+0x20>)
 800a520:	4604      	mov	r4, r0
 800a522:	4608      	mov	r0, r1
 800a524:	4611      	mov	r1, r2
 800a526:	2200      	movs	r2, #0
 800a528:	602a      	str	r2, [r5, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	f7fa f8d2 	bl	80046d4 <_write>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	d102      	bne.n	800a53a <_write_r+0x1e>
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	b103      	cbz	r3, 800a53a <_write_r+0x1e>
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	20004144 	.word	0x20004144

0800a540 <__errno>:
 800a540:	4b01      	ldr	r3, [pc, #4]	@ (800a548 <__errno+0x8>)
 800a542:	6818      	ldr	r0, [r3, #0]
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20000044 	.word	0x20000044

0800a54c <__libc_init_array>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	4d0d      	ldr	r5, [pc, #52]	@ (800a584 <__libc_init_array+0x38>)
 800a550:	4c0d      	ldr	r4, [pc, #52]	@ (800a588 <__libc_init_array+0x3c>)
 800a552:	1b64      	subs	r4, r4, r5
 800a554:	10a4      	asrs	r4, r4, #2
 800a556:	2600      	movs	r6, #0
 800a558:	42a6      	cmp	r6, r4
 800a55a:	d109      	bne.n	800a570 <__libc_init_array+0x24>
 800a55c:	4d0b      	ldr	r5, [pc, #44]	@ (800a58c <__libc_init_array+0x40>)
 800a55e:	4c0c      	ldr	r4, [pc, #48]	@ (800a590 <__libc_init_array+0x44>)
 800a560:	f001 ff4c 	bl	800c3fc <_init>
 800a564:	1b64      	subs	r4, r4, r5
 800a566:	10a4      	asrs	r4, r4, #2
 800a568:	2600      	movs	r6, #0
 800a56a:	42a6      	cmp	r6, r4
 800a56c:	d105      	bne.n	800a57a <__libc_init_array+0x2e>
 800a56e:	bd70      	pop	{r4, r5, r6, pc}
 800a570:	f855 3b04 	ldr.w	r3, [r5], #4
 800a574:	4798      	blx	r3
 800a576:	3601      	adds	r6, #1
 800a578:	e7ee      	b.n	800a558 <__libc_init_array+0xc>
 800a57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a57e:	4798      	blx	r3
 800a580:	3601      	adds	r6, #1
 800a582:	e7f2      	b.n	800a56a <__libc_init_array+0x1e>
 800a584:	0800d7ac 	.word	0x0800d7ac
 800a588:	0800d7ac 	.word	0x0800d7ac
 800a58c:	0800d7ac 	.word	0x0800d7ac
 800a590:	0800d7b0 	.word	0x0800d7b0

0800a594 <__retarget_lock_init_recursive>:
 800a594:	4770      	bx	lr

0800a596 <__retarget_lock_acquire_recursive>:
 800a596:	4770      	bx	lr

0800a598 <__retarget_lock_release_recursive>:
 800a598:	4770      	bx	lr

0800a59a <abort>:
 800a59a:	b508      	push	{r3, lr}
 800a59c:	2006      	movs	r0, #6
 800a59e:	f001 fde1 	bl	800c164 <raise>
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	f7f8 f9cf 	bl	8002946 <_exit>

0800a5a8 <quorem>:
 800a5a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	6903      	ldr	r3, [r0, #16]
 800a5ae:	690c      	ldr	r4, [r1, #16]
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	4607      	mov	r7, r0
 800a5b4:	db7e      	blt.n	800a6b4 <quorem+0x10c>
 800a5b6:	3c01      	subs	r4, #1
 800a5b8:	f101 0814 	add.w	r8, r1, #20
 800a5bc:	00a3      	lsls	r3, r4, #2
 800a5be:	f100 0514 	add.w	r5, r0, #20
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5da:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5de:	d32e      	bcc.n	800a63e <quorem+0x96>
 800a5e0:	f04f 0a00 	mov.w	sl, #0
 800a5e4:	46c4      	mov	ip, r8
 800a5e6:	46ae      	mov	lr, r5
 800a5e8:	46d3      	mov	fp, sl
 800a5ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5ee:	b298      	uxth	r0, r3
 800a5f0:	fb06 a000 	mla	r0, r6, r0, sl
 800a5f4:	0c02      	lsrs	r2, r0, #16
 800a5f6:	0c1b      	lsrs	r3, r3, #16
 800a5f8:	fb06 2303 	mla	r3, r6, r3, r2
 800a5fc:	f8de 2000 	ldr.w	r2, [lr]
 800a600:	b280      	uxth	r0, r0
 800a602:	b292      	uxth	r2, r2
 800a604:	1a12      	subs	r2, r2, r0
 800a606:	445a      	add	r2, fp
 800a608:	f8de 0000 	ldr.w	r0, [lr]
 800a60c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a610:	b29b      	uxth	r3, r3
 800a612:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a616:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a61a:	b292      	uxth	r2, r2
 800a61c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a620:	45e1      	cmp	r9, ip
 800a622:	f84e 2b04 	str.w	r2, [lr], #4
 800a626:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a62a:	d2de      	bcs.n	800a5ea <quorem+0x42>
 800a62c:	9b00      	ldr	r3, [sp, #0]
 800a62e:	58eb      	ldr	r3, [r5, r3]
 800a630:	b92b      	cbnz	r3, 800a63e <quorem+0x96>
 800a632:	9b01      	ldr	r3, [sp, #4]
 800a634:	3b04      	subs	r3, #4
 800a636:	429d      	cmp	r5, r3
 800a638:	461a      	mov	r2, r3
 800a63a:	d32f      	bcc.n	800a69c <quorem+0xf4>
 800a63c:	613c      	str	r4, [r7, #16]
 800a63e:	4638      	mov	r0, r7
 800a640:	f001 f97c 	bl	800b93c <__mcmp>
 800a644:	2800      	cmp	r0, #0
 800a646:	db25      	blt.n	800a694 <quorem+0xec>
 800a648:	4629      	mov	r1, r5
 800a64a:	2000      	movs	r0, #0
 800a64c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a650:	f8d1 c000 	ldr.w	ip, [r1]
 800a654:	fa1f fe82 	uxth.w	lr, r2
 800a658:	fa1f f38c 	uxth.w	r3, ip
 800a65c:	eba3 030e 	sub.w	r3, r3, lr
 800a660:	4403      	add	r3, r0
 800a662:	0c12      	lsrs	r2, r2, #16
 800a664:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a668:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a672:	45c1      	cmp	r9, r8
 800a674:	f841 3b04 	str.w	r3, [r1], #4
 800a678:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a67c:	d2e6      	bcs.n	800a64c <quorem+0xa4>
 800a67e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a686:	b922      	cbnz	r2, 800a692 <quorem+0xea>
 800a688:	3b04      	subs	r3, #4
 800a68a:	429d      	cmp	r5, r3
 800a68c:	461a      	mov	r2, r3
 800a68e:	d30b      	bcc.n	800a6a8 <quorem+0x100>
 800a690:	613c      	str	r4, [r7, #16]
 800a692:	3601      	adds	r6, #1
 800a694:	4630      	mov	r0, r6
 800a696:	b003      	add	sp, #12
 800a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a69c:	6812      	ldr	r2, [r2, #0]
 800a69e:	3b04      	subs	r3, #4
 800a6a0:	2a00      	cmp	r2, #0
 800a6a2:	d1cb      	bne.n	800a63c <quorem+0x94>
 800a6a4:	3c01      	subs	r4, #1
 800a6a6:	e7c6      	b.n	800a636 <quorem+0x8e>
 800a6a8:	6812      	ldr	r2, [r2, #0]
 800a6aa:	3b04      	subs	r3, #4
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	d1ef      	bne.n	800a690 <quorem+0xe8>
 800a6b0:	3c01      	subs	r4, #1
 800a6b2:	e7ea      	b.n	800a68a <quorem+0xe2>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e7ee      	b.n	800a696 <quorem+0xee>

0800a6b8 <_dtoa_r>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	69c7      	ldr	r7, [r0, #28]
 800a6be:	b097      	sub	sp, #92	@ 0x5c
 800a6c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a6c4:	ec55 4b10 	vmov	r4, r5, d0
 800a6c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a6ca:	9107      	str	r1, [sp, #28]
 800a6cc:	4681      	mov	r9, r0
 800a6ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800a6d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a6d2:	b97f      	cbnz	r7, 800a6f4 <_dtoa_r+0x3c>
 800a6d4:	2010      	movs	r0, #16
 800a6d6:	f000 fe09 	bl	800b2ec <malloc>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	f8c9 001c 	str.w	r0, [r9, #28]
 800a6e0:	b920      	cbnz	r0, 800a6ec <_dtoa_r+0x34>
 800a6e2:	4ba9      	ldr	r3, [pc, #676]	@ (800a988 <_dtoa_r+0x2d0>)
 800a6e4:	21ef      	movs	r1, #239	@ 0xef
 800a6e6:	48a9      	ldr	r0, [pc, #676]	@ (800a98c <_dtoa_r+0x2d4>)
 800a6e8:	f7ff f898 	bl	800981c <__assert_func>
 800a6ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6f0:	6007      	str	r7, [r0, #0]
 800a6f2:	60c7      	str	r7, [r0, #12]
 800a6f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6f8:	6819      	ldr	r1, [r3, #0]
 800a6fa:	b159      	cbz	r1, 800a714 <_dtoa_r+0x5c>
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	604a      	str	r2, [r1, #4]
 800a700:	2301      	movs	r3, #1
 800a702:	4093      	lsls	r3, r2
 800a704:	608b      	str	r3, [r1, #8]
 800a706:	4648      	mov	r0, r9
 800a708:	f000 fee6 	bl	800b4d8 <_Bfree>
 800a70c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a710:	2200      	movs	r2, #0
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	1e2b      	subs	r3, r5, #0
 800a716:	bfb9      	ittee	lt
 800a718:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a71c:	9305      	strlt	r3, [sp, #20]
 800a71e:	2300      	movge	r3, #0
 800a720:	6033      	strge	r3, [r6, #0]
 800a722:	9f05      	ldr	r7, [sp, #20]
 800a724:	4b9a      	ldr	r3, [pc, #616]	@ (800a990 <_dtoa_r+0x2d8>)
 800a726:	bfbc      	itt	lt
 800a728:	2201      	movlt	r2, #1
 800a72a:	6032      	strlt	r2, [r6, #0]
 800a72c:	43bb      	bics	r3, r7
 800a72e:	d112      	bne.n	800a756 <_dtoa_r+0x9e>
 800a730:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a732:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a73c:	4323      	orrs	r3, r4
 800a73e:	f000 855a 	beq.w	800b1f6 <_dtoa_r+0xb3e>
 800a742:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a744:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a9a4 <_dtoa_r+0x2ec>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 855c 	beq.w	800b206 <_dtoa_r+0xb4e>
 800a74e:	f10a 0303 	add.w	r3, sl, #3
 800a752:	f000 bd56 	b.w	800b202 <_dtoa_r+0xb4a>
 800a756:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a75a:	2200      	movs	r2, #0
 800a75c:	ec51 0b17 	vmov	r0, r1, d7
 800a760:	2300      	movs	r3, #0
 800a762:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a766:	f7f7 f8e7 	bl	8001938 <__aeabi_dcmpeq>
 800a76a:	4680      	mov	r8, r0
 800a76c:	b158      	cbz	r0, 800a786 <_dtoa_r+0xce>
 800a76e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a770:	2301      	movs	r3, #1
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a776:	b113      	cbz	r3, 800a77e <_dtoa_r+0xc6>
 800a778:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a77a:	4b86      	ldr	r3, [pc, #536]	@ (800a994 <_dtoa_r+0x2dc>)
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a9a8 <_dtoa_r+0x2f0>
 800a782:	f000 bd40 	b.w	800b206 <_dtoa_r+0xb4e>
 800a786:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a78a:	aa14      	add	r2, sp, #80	@ 0x50
 800a78c:	a915      	add	r1, sp, #84	@ 0x54
 800a78e:	4648      	mov	r0, r9
 800a790:	f001 f984 	bl	800ba9c <__d2b>
 800a794:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a798:	9002      	str	r0, [sp, #8]
 800a79a:	2e00      	cmp	r6, #0
 800a79c:	d078      	beq.n	800a890 <_dtoa_r+0x1d8>
 800a79e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a7a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a7ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a7b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a7b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4b76      	ldr	r3, [pc, #472]	@ (800a998 <_dtoa_r+0x2e0>)
 800a7be:	f7f6 fc9b 	bl	80010f8 <__aeabi_dsub>
 800a7c2:	a36b      	add	r3, pc, #428	@ (adr r3, 800a970 <_dtoa_r+0x2b8>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f6 fe4e 	bl	8001468 <__aeabi_dmul>
 800a7cc:	a36a      	add	r3, pc, #424	@ (adr r3, 800a978 <_dtoa_r+0x2c0>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f7f6 fc93 	bl	80010fc <__adddf3>
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4630      	mov	r0, r6
 800a7da:	460d      	mov	r5, r1
 800a7dc:	f7f6 fdda 	bl	8001394 <__aeabi_i2d>
 800a7e0:	a367      	add	r3, pc, #412	@ (adr r3, 800a980 <_dtoa_r+0x2c8>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f7f6 fe3f 	bl	8001468 <__aeabi_dmul>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	f7f6 fc83 	bl	80010fc <__adddf3>
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	f7f7 f8e5 	bl	80019c8 <__aeabi_d2iz>
 800a7fe:	2200      	movs	r2, #0
 800a800:	4607      	mov	r7, r0
 800a802:	2300      	movs	r3, #0
 800a804:	4620      	mov	r0, r4
 800a806:	4629      	mov	r1, r5
 800a808:	f7f7 f8a0 	bl	800194c <__aeabi_dcmplt>
 800a80c:	b140      	cbz	r0, 800a820 <_dtoa_r+0x168>
 800a80e:	4638      	mov	r0, r7
 800a810:	f7f6 fdc0 	bl	8001394 <__aeabi_i2d>
 800a814:	4622      	mov	r2, r4
 800a816:	462b      	mov	r3, r5
 800a818:	f7f7 f88e 	bl	8001938 <__aeabi_dcmpeq>
 800a81c:	b900      	cbnz	r0, 800a820 <_dtoa_r+0x168>
 800a81e:	3f01      	subs	r7, #1
 800a820:	2f16      	cmp	r7, #22
 800a822:	d852      	bhi.n	800a8ca <_dtoa_r+0x212>
 800a824:	4b5d      	ldr	r3, [pc, #372]	@ (800a99c <_dtoa_r+0x2e4>)
 800a826:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a832:	f7f7 f88b 	bl	800194c <__aeabi_dcmplt>
 800a836:	2800      	cmp	r0, #0
 800a838:	d049      	beq.n	800a8ce <_dtoa_r+0x216>
 800a83a:	3f01      	subs	r7, #1
 800a83c:	2300      	movs	r3, #0
 800a83e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a840:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a842:	1b9b      	subs	r3, r3, r6
 800a844:	1e5a      	subs	r2, r3, #1
 800a846:	bf45      	ittet	mi
 800a848:	f1c3 0301 	rsbmi	r3, r3, #1
 800a84c:	9300      	strmi	r3, [sp, #0]
 800a84e:	2300      	movpl	r3, #0
 800a850:	2300      	movmi	r3, #0
 800a852:	9206      	str	r2, [sp, #24]
 800a854:	bf54      	ite	pl
 800a856:	9300      	strpl	r3, [sp, #0]
 800a858:	9306      	strmi	r3, [sp, #24]
 800a85a:	2f00      	cmp	r7, #0
 800a85c:	db39      	blt.n	800a8d2 <_dtoa_r+0x21a>
 800a85e:	9b06      	ldr	r3, [sp, #24]
 800a860:	970d      	str	r7, [sp, #52]	@ 0x34
 800a862:	443b      	add	r3, r7
 800a864:	9306      	str	r3, [sp, #24]
 800a866:	2300      	movs	r3, #0
 800a868:	9308      	str	r3, [sp, #32]
 800a86a:	9b07      	ldr	r3, [sp, #28]
 800a86c:	2b09      	cmp	r3, #9
 800a86e:	d863      	bhi.n	800a938 <_dtoa_r+0x280>
 800a870:	2b05      	cmp	r3, #5
 800a872:	bfc4      	itt	gt
 800a874:	3b04      	subgt	r3, #4
 800a876:	9307      	strgt	r3, [sp, #28]
 800a878:	9b07      	ldr	r3, [sp, #28]
 800a87a:	f1a3 0302 	sub.w	r3, r3, #2
 800a87e:	bfcc      	ite	gt
 800a880:	2400      	movgt	r4, #0
 800a882:	2401      	movle	r4, #1
 800a884:	2b03      	cmp	r3, #3
 800a886:	d863      	bhi.n	800a950 <_dtoa_r+0x298>
 800a888:	e8df f003 	tbb	[pc, r3]
 800a88c:	2b375452 	.word	0x2b375452
 800a890:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a894:	441e      	add	r6, r3
 800a896:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a89a:	2b20      	cmp	r3, #32
 800a89c:	bfc1      	itttt	gt
 800a89e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a8a2:	409f      	lslgt	r7, r3
 800a8a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a8a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a8ac:	bfd6      	itet	le
 800a8ae:	f1c3 0320 	rsble	r3, r3, #32
 800a8b2:	ea47 0003 	orrgt.w	r0, r7, r3
 800a8b6:	fa04 f003 	lslle.w	r0, r4, r3
 800a8ba:	f7f6 fd5b 	bl	8001374 <__aeabi_ui2d>
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a8c4:	3e01      	subs	r6, #1
 800a8c6:	9212      	str	r2, [sp, #72]	@ 0x48
 800a8c8:	e776      	b.n	800a7b8 <_dtoa_r+0x100>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e7b7      	b.n	800a83e <_dtoa_r+0x186>
 800a8ce:	9010      	str	r0, [sp, #64]	@ 0x40
 800a8d0:	e7b6      	b.n	800a840 <_dtoa_r+0x188>
 800a8d2:	9b00      	ldr	r3, [sp, #0]
 800a8d4:	1bdb      	subs	r3, r3, r7
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	427b      	negs	r3, r7
 800a8da:	9308      	str	r3, [sp, #32]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8e0:	e7c3      	b.n	800a86a <_dtoa_r+0x1b2>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8e8:	eb07 0b03 	add.w	fp, r7, r3
 800a8ec:	f10b 0301 	add.w	r3, fp, #1
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	9303      	str	r3, [sp, #12]
 800a8f4:	bfb8      	it	lt
 800a8f6:	2301      	movlt	r3, #1
 800a8f8:	e006      	b.n	800a908 <_dtoa_r+0x250>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a900:	2b00      	cmp	r3, #0
 800a902:	dd28      	ble.n	800a956 <_dtoa_r+0x29e>
 800a904:	469b      	mov	fp, r3
 800a906:	9303      	str	r3, [sp, #12]
 800a908:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a90c:	2100      	movs	r1, #0
 800a90e:	2204      	movs	r2, #4
 800a910:	f102 0514 	add.w	r5, r2, #20
 800a914:	429d      	cmp	r5, r3
 800a916:	d926      	bls.n	800a966 <_dtoa_r+0x2ae>
 800a918:	6041      	str	r1, [r0, #4]
 800a91a:	4648      	mov	r0, r9
 800a91c:	f000 fd9c 	bl	800b458 <_Balloc>
 800a920:	4682      	mov	sl, r0
 800a922:	2800      	cmp	r0, #0
 800a924:	d142      	bne.n	800a9ac <_dtoa_r+0x2f4>
 800a926:	4b1e      	ldr	r3, [pc, #120]	@ (800a9a0 <_dtoa_r+0x2e8>)
 800a928:	4602      	mov	r2, r0
 800a92a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a92e:	e6da      	b.n	800a6e6 <_dtoa_r+0x2e>
 800a930:	2300      	movs	r3, #0
 800a932:	e7e3      	b.n	800a8fc <_dtoa_r+0x244>
 800a934:	2300      	movs	r3, #0
 800a936:	e7d5      	b.n	800a8e4 <_dtoa_r+0x22c>
 800a938:	2401      	movs	r4, #1
 800a93a:	2300      	movs	r3, #0
 800a93c:	9307      	str	r3, [sp, #28]
 800a93e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a940:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a944:	2200      	movs	r2, #0
 800a946:	f8cd b00c 	str.w	fp, [sp, #12]
 800a94a:	2312      	movs	r3, #18
 800a94c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a94e:	e7db      	b.n	800a908 <_dtoa_r+0x250>
 800a950:	2301      	movs	r3, #1
 800a952:	9309      	str	r3, [sp, #36]	@ 0x24
 800a954:	e7f4      	b.n	800a940 <_dtoa_r+0x288>
 800a956:	f04f 0b01 	mov.w	fp, #1
 800a95a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a95e:	465b      	mov	r3, fp
 800a960:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a964:	e7d0      	b.n	800a908 <_dtoa_r+0x250>
 800a966:	3101      	adds	r1, #1
 800a968:	0052      	lsls	r2, r2, #1
 800a96a:	e7d1      	b.n	800a910 <_dtoa_r+0x258>
 800a96c:	f3af 8000 	nop.w
 800a970:	636f4361 	.word	0x636f4361
 800a974:	3fd287a7 	.word	0x3fd287a7
 800a978:	8b60c8b3 	.word	0x8b60c8b3
 800a97c:	3fc68a28 	.word	0x3fc68a28
 800a980:	509f79fb 	.word	0x509f79fb
 800a984:	3fd34413 	.word	0x3fd34413
 800a988:	0800d4a9 	.word	0x0800d4a9
 800a98c:	0800d4c0 	.word	0x0800d4c0
 800a990:	7ff00000 	.word	0x7ff00000
 800a994:	0800d479 	.word	0x0800d479
 800a998:	3ff80000 	.word	0x3ff80000
 800a99c:	0800d5d8 	.word	0x0800d5d8
 800a9a0:	0800d518 	.word	0x0800d518
 800a9a4:	0800d4a5 	.word	0x0800d4a5
 800a9a8:	0800d478 	.word	0x0800d478
 800a9ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a9b0:	6018      	str	r0, [r3, #0]
 800a9b2:	9b03      	ldr	r3, [sp, #12]
 800a9b4:	2b0e      	cmp	r3, #14
 800a9b6:	f200 80a1 	bhi.w	800aafc <_dtoa_r+0x444>
 800a9ba:	2c00      	cmp	r4, #0
 800a9bc:	f000 809e 	beq.w	800aafc <_dtoa_r+0x444>
 800a9c0:	2f00      	cmp	r7, #0
 800a9c2:	dd33      	ble.n	800aa2c <_dtoa_r+0x374>
 800a9c4:	4b9c      	ldr	r3, [pc, #624]	@ (800ac38 <_dtoa_r+0x580>)
 800a9c6:	f007 020f 	and.w	r2, r7, #15
 800a9ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ce:	ed93 7b00 	vldr	d7, [r3]
 800a9d2:	05f8      	lsls	r0, r7, #23
 800a9d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a9d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9dc:	d516      	bpl.n	800aa0c <_dtoa_r+0x354>
 800a9de:	4b97      	ldr	r3, [pc, #604]	@ (800ac3c <_dtoa_r+0x584>)
 800a9e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9e8:	f7f6 fe68 	bl	80016bc <__aeabi_ddiv>
 800a9ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9f0:	f004 040f 	and.w	r4, r4, #15
 800a9f4:	2603      	movs	r6, #3
 800a9f6:	4d91      	ldr	r5, [pc, #580]	@ (800ac3c <_dtoa_r+0x584>)
 800a9f8:	b954      	cbnz	r4, 800aa10 <_dtoa_r+0x358>
 800a9fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a9fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa02:	f7f6 fe5b 	bl	80016bc <__aeabi_ddiv>
 800aa06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa0a:	e028      	b.n	800aa5e <_dtoa_r+0x3a6>
 800aa0c:	2602      	movs	r6, #2
 800aa0e:	e7f2      	b.n	800a9f6 <_dtoa_r+0x33e>
 800aa10:	07e1      	lsls	r1, r4, #31
 800aa12:	d508      	bpl.n	800aa26 <_dtoa_r+0x36e>
 800aa14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa1c:	f7f6 fd24 	bl	8001468 <__aeabi_dmul>
 800aa20:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa24:	3601      	adds	r6, #1
 800aa26:	1064      	asrs	r4, r4, #1
 800aa28:	3508      	adds	r5, #8
 800aa2a:	e7e5      	b.n	800a9f8 <_dtoa_r+0x340>
 800aa2c:	f000 80af 	beq.w	800ab8e <_dtoa_r+0x4d6>
 800aa30:	427c      	negs	r4, r7
 800aa32:	4b81      	ldr	r3, [pc, #516]	@ (800ac38 <_dtoa_r+0x580>)
 800aa34:	4d81      	ldr	r5, [pc, #516]	@ (800ac3c <_dtoa_r+0x584>)
 800aa36:	f004 020f 	and.w	r2, r4, #15
 800aa3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa46:	f7f6 fd0f 	bl	8001468 <__aeabi_dmul>
 800aa4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa4e:	1124      	asrs	r4, r4, #4
 800aa50:	2300      	movs	r3, #0
 800aa52:	2602      	movs	r6, #2
 800aa54:	2c00      	cmp	r4, #0
 800aa56:	f040 808f 	bne.w	800ab78 <_dtoa_r+0x4c0>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1d3      	bne.n	800aa06 <_dtoa_r+0x34e>
 800aa5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa60:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 8094 	beq.w	800ab92 <_dtoa_r+0x4da>
 800aa6a:	4b75      	ldr	r3, [pc, #468]	@ (800ac40 <_dtoa_r+0x588>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4620      	mov	r0, r4
 800aa70:	4629      	mov	r1, r5
 800aa72:	f7f6 ff6b 	bl	800194c <__aeabi_dcmplt>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	f000 808b 	beq.w	800ab92 <_dtoa_r+0x4da>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f000 8087 	beq.w	800ab92 <_dtoa_r+0x4da>
 800aa84:	f1bb 0f00 	cmp.w	fp, #0
 800aa88:	dd34      	ble.n	800aaf4 <_dtoa_r+0x43c>
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	4b6d      	ldr	r3, [pc, #436]	@ (800ac44 <_dtoa_r+0x58c>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4629      	mov	r1, r5
 800aa92:	f7f6 fce9 	bl	8001468 <__aeabi_dmul>
 800aa96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa9a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800aa9e:	3601      	adds	r6, #1
 800aaa0:	465c      	mov	r4, fp
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7f6 fc76 	bl	8001394 <__aeabi_i2d>
 800aaa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaac:	f7f6 fcdc 	bl	8001468 <__aeabi_dmul>
 800aab0:	4b65      	ldr	r3, [pc, #404]	@ (800ac48 <_dtoa_r+0x590>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	f7f6 fb22 	bl	80010fc <__adddf3>
 800aab8:	4605      	mov	r5, r0
 800aaba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aabe:	2c00      	cmp	r4, #0
 800aac0:	d16a      	bne.n	800ab98 <_dtoa_r+0x4e0>
 800aac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aac6:	4b61      	ldr	r3, [pc, #388]	@ (800ac4c <_dtoa_r+0x594>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	f7f6 fb15 	bl	80010f8 <__aeabi_dsub>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aad6:	462a      	mov	r2, r5
 800aad8:	4633      	mov	r3, r6
 800aada:	f7f6 ff55 	bl	8001988 <__aeabi_dcmpgt>
 800aade:	2800      	cmp	r0, #0
 800aae0:	f040 8298 	bne.w	800b014 <_dtoa_r+0x95c>
 800aae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aae8:	462a      	mov	r2, r5
 800aaea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aaee:	f7f6 ff2d 	bl	800194c <__aeabi_dcmplt>
 800aaf2:	bb38      	cbnz	r0, 800ab44 <_dtoa_r+0x48c>
 800aaf4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800aaf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aafc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f2c0 8157 	blt.w	800adb2 <_dtoa_r+0x6fa>
 800ab04:	2f0e      	cmp	r7, #14
 800ab06:	f300 8154 	bgt.w	800adb2 <_dtoa_r+0x6fa>
 800ab0a:	4b4b      	ldr	r3, [pc, #300]	@ (800ac38 <_dtoa_r+0x580>)
 800ab0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab10:	ed93 7b00 	vldr	d7, [r3]
 800ab14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	ed8d 7b00 	vstr	d7, [sp]
 800ab1c:	f280 80e5 	bge.w	800acea <_dtoa_r+0x632>
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f300 80e1 	bgt.w	800acea <_dtoa_r+0x632>
 800ab28:	d10c      	bne.n	800ab44 <_dtoa_r+0x48c>
 800ab2a:	4b48      	ldr	r3, [pc, #288]	@ (800ac4c <_dtoa_r+0x594>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	ec51 0b17 	vmov	r0, r1, d7
 800ab32:	f7f6 fc99 	bl	8001468 <__aeabi_dmul>
 800ab36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab3a:	f7f6 ff1b 	bl	8001974 <__aeabi_dcmpge>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f000 8266 	beq.w	800b010 <_dtoa_r+0x958>
 800ab44:	2400      	movs	r4, #0
 800ab46:	4625      	mov	r5, r4
 800ab48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab4a:	4656      	mov	r6, sl
 800ab4c:	ea6f 0803 	mvn.w	r8, r3
 800ab50:	2700      	movs	r7, #0
 800ab52:	4621      	mov	r1, r4
 800ab54:	4648      	mov	r0, r9
 800ab56:	f000 fcbf 	bl	800b4d8 <_Bfree>
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	f000 80bd 	beq.w	800acda <_dtoa_r+0x622>
 800ab60:	b12f      	cbz	r7, 800ab6e <_dtoa_r+0x4b6>
 800ab62:	42af      	cmp	r7, r5
 800ab64:	d003      	beq.n	800ab6e <_dtoa_r+0x4b6>
 800ab66:	4639      	mov	r1, r7
 800ab68:	4648      	mov	r0, r9
 800ab6a:	f000 fcb5 	bl	800b4d8 <_Bfree>
 800ab6e:	4629      	mov	r1, r5
 800ab70:	4648      	mov	r0, r9
 800ab72:	f000 fcb1 	bl	800b4d8 <_Bfree>
 800ab76:	e0b0      	b.n	800acda <_dtoa_r+0x622>
 800ab78:	07e2      	lsls	r2, r4, #31
 800ab7a:	d505      	bpl.n	800ab88 <_dtoa_r+0x4d0>
 800ab7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab80:	f7f6 fc72 	bl	8001468 <__aeabi_dmul>
 800ab84:	3601      	adds	r6, #1
 800ab86:	2301      	movs	r3, #1
 800ab88:	1064      	asrs	r4, r4, #1
 800ab8a:	3508      	adds	r5, #8
 800ab8c:	e762      	b.n	800aa54 <_dtoa_r+0x39c>
 800ab8e:	2602      	movs	r6, #2
 800ab90:	e765      	b.n	800aa5e <_dtoa_r+0x3a6>
 800ab92:	9c03      	ldr	r4, [sp, #12]
 800ab94:	46b8      	mov	r8, r7
 800ab96:	e784      	b.n	800aaa2 <_dtoa_r+0x3ea>
 800ab98:	4b27      	ldr	r3, [pc, #156]	@ (800ac38 <_dtoa_r+0x580>)
 800ab9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aba0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aba4:	4454      	add	r4, sl
 800aba6:	2900      	cmp	r1, #0
 800aba8:	d054      	beq.n	800ac54 <_dtoa_r+0x59c>
 800abaa:	4929      	ldr	r1, [pc, #164]	@ (800ac50 <_dtoa_r+0x598>)
 800abac:	2000      	movs	r0, #0
 800abae:	f7f6 fd85 	bl	80016bc <__aeabi_ddiv>
 800abb2:	4633      	mov	r3, r6
 800abb4:	462a      	mov	r2, r5
 800abb6:	f7f6 fa9f 	bl	80010f8 <__aeabi_dsub>
 800abba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800abbe:	4656      	mov	r6, sl
 800abc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abc4:	f7f6 ff00 	bl	80019c8 <__aeabi_d2iz>
 800abc8:	4605      	mov	r5, r0
 800abca:	f7f6 fbe3 	bl	8001394 <__aeabi_i2d>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abd6:	f7f6 fa8f 	bl	80010f8 <__aeabi_dsub>
 800abda:	3530      	adds	r5, #48	@ 0x30
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abe4:	f806 5b01 	strb.w	r5, [r6], #1
 800abe8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800abec:	f7f6 feae 	bl	800194c <__aeabi_dcmplt>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d172      	bne.n	800acda <_dtoa_r+0x622>
 800abf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abf8:	4911      	ldr	r1, [pc, #68]	@ (800ac40 <_dtoa_r+0x588>)
 800abfa:	2000      	movs	r0, #0
 800abfc:	f7f6 fa7c 	bl	80010f8 <__aeabi_dsub>
 800ac00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac04:	f7f6 fea2 	bl	800194c <__aeabi_dcmplt>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	f040 80b4 	bne.w	800ad76 <_dtoa_r+0x6be>
 800ac0e:	42a6      	cmp	r6, r4
 800ac10:	f43f af70 	beq.w	800aaf4 <_dtoa_r+0x43c>
 800ac14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ac18:	4b0a      	ldr	r3, [pc, #40]	@ (800ac44 <_dtoa_r+0x58c>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f7f6 fc24 	bl	8001468 <__aeabi_dmul>
 800ac20:	4b08      	ldr	r3, [pc, #32]	@ (800ac44 <_dtoa_r+0x58c>)
 800ac22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac26:	2200      	movs	r2, #0
 800ac28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac2c:	f7f6 fc1c 	bl	8001468 <__aeabi_dmul>
 800ac30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac34:	e7c4      	b.n	800abc0 <_dtoa_r+0x508>
 800ac36:	bf00      	nop
 800ac38:	0800d5d8 	.word	0x0800d5d8
 800ac3c:	0800d5b0 	.word	0x0800d5b0
 800ac40:	3ff00000 	.word	0x3ff00000
 800ac44:	40240000 	.word	0x40240000
 800ac48:	401c0000 	.word	0x401c0000
 800ac4c:	40140000 	.word	0x40140000
 800ac50:	3fe00000 	.word	0x3fe00000
 800ac54:	4631      	mov	r1, r6
 800ac56:	4628      	mov	r0, r5
 800ac58:	f7f6 fc06 	bl	8001468 <__aeabi_dmul>
 800ac5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac60:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ac62:	4656      	mov	r6, sl
 800ac64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac68:	f7f6 feae 	bl	80019c8 <__aeabi_d2iz>
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	f7f6 fb91 	bl	8001394 <__aeabi_i2d>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac7a:	f7f6 fa3d 	bl	80010f8 <__aeabi_dsub>
 800ac7e:	3530      	adds	r5, #48	@ 0x30
 800ac80:	f806 5b01 	strb.w	r5, [r6], #1
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	42a6      	cmp	r6, r4
 800ac8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac8e:	f04f 0200 	mov.w	r2, #0
 800ac92:	d124      	bne.n	800acde <_dtoa_r+0x626>
 800ac94:	4baf      	ldr	r3, [pc, #700]	@ (800af54 <_dtoa_r+0x89c>)
 800ac96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ac9a:	f7f6 fa2f 	bl	80010fc <__adddf3>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aca6:	f7f6 fe6f 	bl	8001988 <__aeabi_dcmpgt>
 800acaa:	2800      	cmp	r0, #0
 800acac:	d163      	bne.n	800ad76 <_dtoa_r+0x6be>
 800acae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800acb2:	49a8      	ldr	r1, [pc, #672]	@ (800af54 <_dtoa_r+0x89c>)
 800acb4:	2000      	movs	r0, #0
 800acb6:	f7f6 fa1f 	bl	80010f8 <__aeabi_dsub>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acc2:	f7f6 fe43 	bl	800194c <__aeabi_dcmplt>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	f43f af14 	beq.w	800aaf4 <_dtoa_r+0x43c>
 800accc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800acce:	1e73      	subs	r3, r6, #1
 800acd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800acd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acd6:	2b30      	cmp	r3, #48	@ 0x30
 800acd8:	d0f8      	beq.n	800accc <_dtoa_r+0x614>
 800acda:	4647      	mov	r7, r8
 800acdc:	e03b      	b.n	800ad56 <_dtoa_r+0x69e>
 800acde:	4b9e      	ldr	r3, [pc, #632]	@ (800af58 <_dtoa_r+0x8a0>)
 800ace0:	f7f6 fbc2 	bl	8001468 <__aeabi_dmul>
 800ace4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ace8:	e7bc      	b.n	800ac64 <_dtoa_r+0x5ac>
 800acea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800acee:	4656      	mov	r6, sl
 800acf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acf4:	4620      	mov	r0, r4
 800acf6:	4629      	mov	r1, r5
 800acf8:	f7f6 fce0 	bl	80016bc <__aeabi_ddiv>
 800acfc:	f7f6 fe64 	bl	80019c8 <__aeabi_d2iz>
 800ad00:	4680      	mov	r8, r0
 800ad02:	f7f6 fb47 	bl	8001394 <__aeabi_i2d>
 800ad06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad0a:	f7f6 fbad 	bl	8001468 <__aeabi_dmul>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	460b      	mov	r3, r1
 800ad12:	4620      	mov	r0, r4
 800ad14:	4629      	mov	r1, r5
 800ad16:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad1a:	f7f6 f9ed 	bl	80010f8 <__aeabi_dsub>
 800ad1e:	f806 4b01 	strb.w	r4, [r6], #1
 800ad22:	9d03      	ldr	r5, [sp, #12]
 800ad24:	eba6 040a 	sub.w	r4, r6, sl
 800ad28:	42a5      	cmp	r5, r4
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	d133      	bne.n	800ad98 <_dtoa_r+0x6e0>
 800ad30:	f7f6 f9e4 	bl	80010fc <__adddf3>
 800ad34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad38:	4604      	mov	r4, r0
 800ad3a:	460d      	mov	r5, r1
 800ad3c:	f7f6 fe24 	bl	8001988 <__aeabi_dcmpgt>
 800ad40:	b9c0      	cbnz	r0, 800ad74 <_dtoa_r+0x6bc>
 800ad42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad46:	4620      	mov	r0, r4
 800ad48:	4629      	mov	r1, r5
 800ad4a:	f7f6 fdf5 	bl	8001938 <__aeabi_dcmpeq>
 800ad4e:	b110      	cbz	r0, 800ad56 <_dtoa_r+0x69e>
 800ad50:	f018 0f01 	tst.w	r8, #1
 800ad54:	d10e      	bne.n	800ad74 <_dtoa_r+0x6bc>
 800ad56:	9902      	ldr	r1, [sp, #8]
 800ad58:	4648      	mov	r0, r9
 800ad5a:	f000 fbbd 	bl	800b4d8 <_Bfree>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	7033      	strb	r3, [r6, #0]
 800ad62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad64:	3701      	adds	r7, #1
 800ad66:	601f      	str	r7, [r3, #0]
 800ad68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 824b 	beq.w	800b206 <_dtoa_r+0xb4e>
 800ad70:	601e      	str	r6, [r3, #0]
 800ad72:	e248      	b.n	800b206 <_dtoa_r+0xb4e>
 800ad74:	46b8      	mov	r8, r7
 800ad76:	4633      	mov	r3, r6
 800ad78:	461e      	mov	r6, r3
 800ad7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad7e:	2a39      	cmp	r2, #57	@ 0x39
 800ad80:	d106      	bne.n	800ad90 <_dtoa_r+0x6d8>
 800ad82:	459a      	cmp	sl, r3
 800ad84:	d1f8      	bne.n	800ad78 <_dtoa_r+0x6c0>
 800ad86:	2230      	movs	r2, #48	@ 0x30
 800ad88:	f108 0801 	add.w	r8, r8, #1
 800ad8c:	f88a 2000 	strb.w	r2, [sl]
 800ad90:	781a      	ldrb	r2, [r3, #0]
 800ad92:	3201      	adds	r2, #1
 800ad94:	701a      	strb	r2, [r3, #0]
 800ad96:	e7a0      	b.n	800acda <_dtoa_r+0x622>
 800ad98:	4b6f      	ldr	r3, [pc, #444]	@ (800af58 <_dtoa_r+0x8a0>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f7f6 fb64 	bl	8001468 <__aeabi_dmul>
 800ada0:	2200      	movs	r2, #0
 800ada2:	2300      	movs	r3, #0
 800ada4:	4604      	mov	r4, r0
 800ada6:	460d      	mov	r5, r1
 800ada8:	f7f6 fdc6 	bl	8001938 <__aeabi_dcmpeq>
 800adac:	2800      	cmp	r0, #0
 800adae:	d09f      	beq.n	800acf0 <_dtoa_r+0x638>
 800adb0:	e7d1      	b.n	800ad56 <_dtoa_r+0x69e>
 800adb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adb4:	2a00      	cmp	r2, #0
 800adb6:	f000 80ea 	beq.w	800af8e <_dtoa_r+0x8d6>
 800adba:	9a07      	ldr	r2, [sp, #28]
 800adbc:	2a01      	cmp	r2, #1
 800adbe:	f300 80cd 	bgt.w	800af5c <_dtoa_r+0x8a4>
 800adc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800adc4:	2a00      	cmp	r2, #0
 800adc6:	f000 80c1 	beq.w	800af4c <_dtoa_r+0x894>
 800adca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800adce:	9c08      	ldr	r4, [sp, #32]
 800add0:	9e00      	ldr	r6, [sp, #0]
 800add2:	9a00      	ldr	r2, [sp, #0]
 800add4:	441a      	add	r2, r3
 800add6:	9200      	str	r2, [sp, #0]
 800add8:	9a06      	ldr	r2, [sp, #24]
 800adda:	2101      	movs	r1, #1
 800addc:	441a      	add	r2, r3
 800adde:	4648      	mov	r0, r9
 800ade0:	9206      	str	r2, [sp, #24]
 800ade2:	f000 fc2d 	bl	800b640 <__i2b>
 800ade6:	4605      	mov	r5, r0
 800ade8:	b166      	cbz	r6, 800ae04 <_dtoa_r+0x74c>
 800adea:	9b06      	ldr	r3, [sp, #24]
 800adec:	2b00      	cmp	r3, #0
 800adee:	dd09      	ble.n	800ae04 <_dtoa_r+0x74c>
 800adf0:	42b3      	cmp	r3, r6
 800adf2:	9a00      	ldr	r2, [sp, #0]
 800adf4:	bfa8      	it	ge
 800adf6:	4633      	movge	r3, r6
 800adf8:	1ad2      	subs	r2, r2, r3
 800adfa:	9200      	str	r2, [sp, #0]
 800adfc:	9a06      	ldr	r2, [sp, #24]
 800adfe:	1af6      	subs	r6, r6, r3
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	9306      	str	r3, [sp, #24]
 800ae04:	9b08      	ldr	r3, [sp, #32]
 800ae06:	b30b      	cbz	r3, 800ae4c <_dtoa_r+0x794>
 800ae08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 80c6 	beq.w	800af9c <_dtoa_r+0x8e4>
 800ae10:	2c00      	cmp	r4, #0
 800ae12:	f000 80c0 	beq.w	800af96 <_dtoa_r+0x8de>
 800ae16:	4629      	mov	r1, r5
 800ae18:	4622      	mov	r2, r4
 800ae1a:	4648      	mov	r0, r9
 800ae1c:	f000 fcc8 	bl	800b7b0 <__pow5mult>
 800ae20:	9a02      	ldr	r2, [sp, #8]
 800ae22:	4601      	mov	r1, r0
 800ae24:	4605      	mov	r5, r0
 800ae26:	4648      	mov	r0, r9
 800ae28:	f000 fc20 	bl	800b66c <__multiply>
 800ae2c:	9902      	ldr	r1, [sp, #8]
 800ae2e:	4680      	mov	r8, r0
 800ae30:	4648      	mov	r0, r9
 800ae32:	f000 fb51 	bl	800b4d8 <_Bfree>
 800ae36:	9b08      	ldr	r3, [sp, #32]
 800ae38:	1b1b      	subs	r3, r3, r4
 800ae3a:	9308      	str	r3, [sp, #32]
 800ae3c:	f000 80b1 	beq.w	800afa2 <_dtoa_r+0x8ea>
 800ae40:	9a08      	ldr	r2, [sp, #32]
 800ae42:	4641      	mov	r1, r8
 800ae44:	4648      	mov	r0, r9
 800ae46:	f000 fcb3 	bl	800b7b0 <__pow5mult>
 800ae4a:	9002      	str	r0, [sp, #8]
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	4648      	mov	r0, r9
 800ae50:	f000 fbf6 	bl	800b640 <__i2b>
 800ae54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae56:	4604      	mov	r4, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 81d8 	beq.w	800b20e <_dtoa_r+0xb56>
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4601      	mov	r1, r0
 800ae62:	4648      	mov	r0, r9
 800ae64:	f000 fca4 	bl	800b7b0 <__pow5mult>
 800ae68:	9b07      	ldr	r3, [sp, #28]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	f300 809f 	bgt.w	800afb0 <_dtoa_r+0x8f8>
 800ae72:	9b04      	ldr	r3, [sp, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f040 8097 	bne.w	800afa8 <_dtoa_r+0x8f0>
 800ae7a:	9b05      	ldr	r3, [sp, #20]
 800ae7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f040 8093 	bne.w	800afac <_dtoa_r+0x8f4>
 800ae86:	9b05      	ldr	r3, [sp, #20]
 800ae88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae8c:	0d1b      	lsrs	r3, r3, #20
 800ae8e:	051b      	lsls	r3, r3, #20
 800ae90:	b133      	cbz	r3, 800aea0 <_dtoa_r+0x7e8>
 800ae92:	9b00      	ldr	r3, [sp, #0]
 800ae94:	3301      	adds	r3, #1
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	9b06      	ldr	r3, [sp, #24]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	9306      	str	r3, [sp, #24]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	9308      	str	r3, [sp, #32]
 800aea2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 81b8 	beq.w	800b21a <_dtoa_r+0xb62>
 800aeaa:	6923      	ldr	r3, [r4, #16]
 800aeac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aeb0:	6918      	ldr	r0, [r3, #16]
 800aeb2:	f000 fb79 	bl	800b5a8 <__hi0bits>
 800aeb6:	f1c0 0020 	rsb	r0, r0, #32
 800aeba:	9b06      	ldr	r3, [sp, #24]
 800aebc:	4418      	add	r0, r3
 800aebe:	f010 001f 	ands.w	r0, r0, #31
 800aec2:	f000 8082 	beq.w	800afca <_dtoa_r+0x912>
 800aec6:	f1c0 0320 	rsb	r3, r0, #32
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	dd73      	ble.n	800afb6 <_dtoa_r+0x8fe>
 800aece:	9b00      	ldr	r3, [sp, #0]
 800aed0:	f1c0 001c 	rsb	r0, r0, #28
 800aed4:	4403      	add	r3, r0
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	9b06      	ldr	r3, [sp, #24]
 800aeda:	4403      	add	r3, r0
 800aedc:	4406      	add	r6, r0
 800aede:	9306      	str	r3, [sp, #24]
 800aee0:	9b00      	ldr	r3, [sp, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dd05      	ble.n	800aef2 <_dtoa_r+0x83a>
 800aee6:	9902      	ldr	r1, [sp, #8]
 800aee8:	461a      	mov	r2, r3
 800aeea:	4648      	mov	r0, r9
 800aeec:	f000 fcba 	bl	800b864 <__lshift>
 800aef0:	9002      	str	r0, [sp, #8]
 800aef2:	9b06      	ldr	r3, [sp, #24]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dd05      	ble.n	800af04 <_dtoa_r+0x84c>
 800aef8:	4621      	mov	r1, r4
 800aefa:	461a      	mov	r2, r3
 800aefc:	4648      	mov	r0, r9
 800aefe:	f000 fcb1 	bl	800b864 <__lshift>
 800af02:	4604      	mov	r4, r0
 800af04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af06:	2b00      	cmp	r3, #0
 800af08:	d061      	beq.n	800afce <_dtoa_r+0x916>
 800af0a:	9802      	ldr	r0, [sp, #8]
 800af0c:	4621      	mov	r1, r4
 800af0e:	f000 fd15 	bl	800b93c <__mcmp>
 800af12:	2800      	cmp	r0, #0
 800af14:	da5b      	bge.n	800afce <_dtoa_r+0x916>
 800af16:	2300      	movs	r3, #0
 800af18:	9902      	ldr	r1, [sp, #8]
 800af1a:	220a      	movs	r2, #10
 800af1c:	4648      	mov	r0, r9
 800af1e:	f000 fafd 	bl	800b51c <__multadd>
 800af22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af24:	9002      	str	r0, [sp, #8]
 800af26:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 8177 	beq.w	800b21e <_dtoa_r+0xb66>
 800af30:	4629      	mov	r1, r5
 800af32:	2300      	movs	r3, #0
 800af34:	220a      	movs	r2, #10
 800af36:	4648      	mov	r0, r9
 800af38:	f000 faf0 	bl	800b51c <__multadd>
 800af3c:	f1bb 0f00 	cmp.w	fp, #0
 800af40:	4605      	mov	r5, r0
 800af42:	dc6f      	bgt.n	800b024 <_dtoa_r+0x96c>
 800af44:	9b07      	ldr	r3, [sp, #28]
 800af46:	2b02      	cmp	r3, #2
 800af48:	dc49      	bgt.n	800afde <_dtoa_r+0x926>
 800af4a:	e06b      	b.n	800b024 <_dtoa_r+0x96c>
 800af4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af52:	e73c      	b.n	800adce <_dtoa_r+0x716>
 800af54:	3fe00000 	.word	0x3fe00000
 800af58:	40240000 	.word	0x40240000
 800af5c:	9b03      	ldr	r3, [sp, #12]
 800af5e:	1e5c      	subs	r4, r3, #1
 800af60:	9b08      	ldr	r3, [sp, #32]
 800af62:	42a3      	cmp	r3, r4
 800af64:	db09      	blt.n	800af7a <_dtoa_r+0x8c2>
 800af66:	1b1c      	subs	r4, r3, r4
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f6bf af30 	bge.w	800add0 <_dtoa_r+0x718>
 800af70:	9b00      	ldr	r3, [sp, #0]
 800af72:	9a03      	ldr	r2, [sp, #12]
 800af74:	1a9e      	subs	r6, r3, r2
 800af76:	2300      	movs	r3, #0
 800af78:	e72b      	b.n	800add2 <_dtoa_r+0x71a>
 800af7a:	9b08      	ldr	r3, [sp, #32]
 800af7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af7e:	9408      	str	r4, [sp, #32]
 800af80:	1ae3      	subs	r3, r4, r3
 800af82:	441a      	add	r2, r3
 800af84:	9e00      	ldr	r6, [sp, #0]
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	920d      	str	r2, [sp, #52]	@ 0x34
 800af8a:	2400      	movs	r4, #0
 800af8c:	e721      	b.n	800add2 <_dtoa_r+0x71a>
 800af8e:	9c08      	ldr	r4, [sp, #32]
 800af90:	9e00      	ldr	r6, [sp, #0]
 800af92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800af94:	e728      	b.n	800ade8 <_dtoa_r+0x730>
 800af96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800af9a:	e751      	b.n	800ae40 <_dtoa_r+0x788>
 800af9c:	9a08      	ldr	r2, [sp, #32]
 800af9e:	9902      	ldr	r1, [sp, #8]
 800afa0:	e750      	b.n	800ae44 <_dtoa_r+0x78c>
 800afa2:	f8cd 8008 	str.w	r8, [sp, #8]
 800afa6:	e751      	b.n	800ae4c <_dtoa_r+0x794>
 800afa8:	2300      	movs	r3, #0
 800afaa:	e779      	b.n	800aea0 <_dtoa_r+0x7e8>
 800afac:	9b04      	ldr	r3, [sp, #16]
 800afae:	e777      	b.n	800aea0 <_dtoa_r+0x7e8>
 800afb0:	2300      	movs	r3, #0
 800afb2:	9308      	str	r3, [sp, #32]
 800afb4:	e779      	b.n	800aeaa <_dtoa_r+0x7f2>
 800afb6:	d093      	beq.n	800aee0 <_dtoa_r+0x828>
 800afb8:	9a00      	ldr	r2, [sp, #0]
 800afba:	331c      	adds	r3, #28
 800afbc:	441a      	add	r2, r3
 800afbe:	9200      	str	r2, [sp, #0]
 800afc0:	9a06      	ldr	r2, [sp, #24]
 800afc2:	441a      	add	r2, r3
 800afc4:	441e      	add	r6, r3
 800afc6:	9206      	str	r2, [sp, #24]
 800afc8:	e78a      	b.n	800aee0 <_dtoa_r+0x828>
 800afca:	4603      	mov	r3, r0
 800afcc:	e7f4      	b.n	800afb8 <_dtoa_r+0x900>
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	46b8      	mov	r8, r7
 800afd4:	dc20      	bgt.n	800b018 <_dtoa_r+0x960>
 800afd6:	469b      	mov	fp, r3
 800afd8:	9b07      	ldr	r3, [sp, #28]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	dd1e      	ble.n	800b01c <_dtoa_r+0x964>
 800afde:	f1bb 0f00 	cmp.w	fp, #0
 800afe2:	f47f adb1 	bne.w	800ab48 <_dtoa_r+0x490>
 800afe6:	4621      	mov	r1, r4
 800afe8:	465b      	mov	r3, fp
 800afea:	2205      	movs	r2, #5
 800afec:	4648      	mov	r0, r9
 800afee:	f000 fa95 	bl	800b51c <__multadd>
 800aff2:	4601      	mov	r1, r0
 800aff4:	4604      	mov	r4, r0
 800aff6:	9802      	ldr	r0, [sp, #8]
 800aff8:	f000 fca0 	bl	800b93c <__mcmp>
 800affc:	2800      	cmp	r0, #0
 800affe:	f77f ada3 	ble.w	800ab48 <_dtoa_r+0x490>
 800b002:	4656      	mov	r6, sl
 800b004:	2331      	movs	r3, #49	@ 0x31
 800b006:	f806 3b01 	strb.w	r3, [r6], #1
 800b00a:	f108 0801 	add.w	r8, r8, #1
 800b00e:	e59f      	b.n	800ab50 <_dtoa_r+0x498>
 800b010:	9c03      	ldr	r4, [sp, #12]
 800b012:	46b8      	mov	r8, r7
 800b014:	4625      	mov	r5, r4
 800b016:	e7f4      	b.n	800b002 <_dtoa_r+0x94a>
 800b018:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b01c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 8101 	beq.w	800b226 <_dtoa_r+0xb6e>
 800b024:	2e00      	cmp	r6, #0
 800b026:	dd05      	ble.n	800b034 <_dtoa_r+0x97c>
 800b028:	4629      	mov	r1, r5
 800b02a:	4632      	mov	r2, r6
 800b02c:	4648      	mov	r0, r9
 800b02e:	f000 fc19 	bl	800b864 <__lshift>
 800b032:	4605      	mov	r5, r0
 800b034:	9b08      	ldr	r3, [sp, #32]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d05c      	beq.n	800b0f4 <_dtoa_r+0xa3c>
 800b03a:	6869      	ldr	r1, [r5, #4]
 800b03c:	4648      	mov	r0, r9
 800b03e:	f000 fa0b 	bl	800b458 <_Balloc>
 800b042:	4606      	mov	r6, r0
 800b044:	b928      	cbnz	r0, 800b052 <_dtoa_r+0x99a>
 800b046:	4b82      	ldr	r3, [pc, #520]	@ (800b250 <_dtoa_r+0xb98>)
 800b048:	4602      	mov	r2, r0
 800b04a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b04e:	f7ff bb4a 	b.w	800a6e6 <_dtoa_r+0x2e>
 800b052:	692a      	ldr	r2, [r5, #16]
 800b054:	3202      	adds	r2, #2
 800b056:	0092      	lsls	r2, r2, #2
 800b058:	f105 010c 	add.w	r1, r5, #12
 800b05c:	300c      	adds	r0, #12
 800b05e:	f001 f8cf 	bl	800c200 <memcpy>
 800b062:	2201      	movs	r2, #1
 800b064:	4631      	mov	r1, r6
 800b066:	4648      	mov	r0, r9
 800b068:	f000 fbfc 	bl	800b864 <__lshift>
 800b06c:	f10a 0301 	add.w	r3, sl, #1
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	eb0a 030b 	add.w	r3, sl, fp
 800b076:	9308      	str	r3, [sp, #32]
 800b078:	9b04      	ldr	r3, [sp, #16]
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	462f      	mov	r7, r5
 800b080:	9306      	str	r3, [sp, #24]
 800b082:	4605      	mov	r5, r0
 800b084:	9b00      	ldr	r3, [sp, #0]
 800b086:	9802      	ldr	r0, [sp, #8]
 800b088:	4621      	mov	r1, r4
 800b08a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b08e:	f7ff fa8b 	bl	800a5a8 <quorem>
 800b092:	4603      	mov	r3, r0
 800b094:	3330      	adds	r3, #48	@ 0x30
 800b096:	9003      	str	r0, [sp, #12]
 800b098:	4639      	mov	r1, r7
 800b09a:	9802      	ldr	r0, [sp, #8]
 800b09c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b09e:	f000 fc4d 	bl	800b93c <__mcmp>
 800b0a2:	462a      	mov	r2, r5
 800b0a4:	9004      	str	r0, [sp, #16]
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4648      	mov	r0, r9
 800b0aa:	f000 fc63 	bl	800b974 <__mdiff>
 800b0ae:	68c2      	ldr	r2, [r0, #12]
 800b0b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	bb02      	cbnz	r2, 800b0f8 <_dtoa_r+0xa40>
 800b0b6:	4601      	mov	r1, r0
 800b0b8:	9802      	ldr	r0, [sp, #8]
 800b0ba:	f000 fc3f 	bl	800b93c <__mcmp>
 800b0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	4648      	mov	r0, r9
 800b0c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b0c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ca:	f000 fa05 	bl	800b4d8 <_Bfree>
 800b0ce:	9b07      	ldr	r3, [sp, #28]
 800b0d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b0d2:	9e00      	ldr	r6, [sp, #0]
 800b0d4:	ea42 0103 	orr.w	r1, r2, r3
 800b0d8:	9b06      	ldr	r3, [sp, #24]
 800b0da:	4319      	orrs	r1, r3
 800b0dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0de:	d10d      	bne.n	800b0fc <_dtoa_r+0xa44>
 800b0e0:	2b39      	cmp	r3, #57	@ 0x39
 800b0e2:	d027      	beq.n	800b134 <_dtoa_r+0xa7c>
 800b0e4:	9a04      	ldr	r2, [sp, #16]
 800b0e6:	2a00      	cmp	r2, #0
 800b0e8:	dd01      	ble.n	800b0ee <_dtoa_r+0xa36>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	3331      	adds	r3, #49	@ 0x31
 800b0ee:	f88b 3000 	strb.w	r3, [fp]
 800b0f2:	e52e      	b.n	800ab52 <_dtoa_r+0x49a>
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	e7b9      	b.n	800b06c <_dtoa_r+0x9b4>
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	e7e2      	b.n	800b0c2 <_dtoa_r+0xa0a>
 800b0fc:	9904      	ldr	r1, [sp, #16]
 800b0fe:	2900      	cmp	r1, #0
 800b100:	db04      	blt.n	800b10c <_dtoa_r+0xa54>
 800b102:	9807      	ldr	r0, [sp, #28]
 800b104:	4301      	orrs	r1, r0
 800b106:	9806      	ldr	r0, [sp, #24]
 800b108:	4301      	orrs	r1, r0
 800b10a:	d120      	bne.n	800b14e <_dtoa_r+0xa96>
 800b10c:	2a00      	cmp	r2, #0
 800b10e:	ddee      	ble.n	800b0ee <_dtoa_r+0xa36>
 800b110:	9902      	ldr	r1, [sp, #8]
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	2201      	movs	r2, #1
 800b116:	4648      	mov	r0, r9
 800b118:	f000 fba4 	bl	800b864 <__lshift>
 800b11c:	4621      	mov	r1, r4
 800b11e:	9002      	str	r0, [sp, #8]
 800b120:	f000 fc0c 	bl	800b93c <__mcmp>
 800b124:	2800      	cmp	r0, #0
 800b126:	9b00      	ldr	r3, [sp, #0]
 800b128:	dc02      	bgt.n	800b130 <_dtoa_r+0xa78>
 800b12a:	d1e0      	bne.n	800b0ee <_dtoa_r+0xa36>
 800b12c:	07da      	lsls	r2, r3, #31
 800b12e:	d5de      	bpl.n	800b0ee <_dtoa_r+0xa36>
 800b130:	2b39      	cmp	r3, #57	@ 0x39
 800b132:	d1da      	bne.n	800b0ea <_dtoa_r+0xa32>
 800b134:	2339      	movs	r3, #57	@ 0x39
 800b136:	f88b 3000 	strb.w	r3, [fp]
 800b13a:	4633      	mov	r3, r6
 800b13c:	461e      	mov	r6, r3
 800b13e:	3b01      	subs	r3, #1
 800b140:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b144:	2a39      	cmp	r2, #57	@ 0x39
 800b146:	d04e      	beq.n	800b1e6 <_dtoa_r+0xb2e>
 800b148:	3201      	adds	r2, #1
 800b14a:	701a      	strb	r2, [r3, #0]
 800b14c:	e501      	b.n	800ab52 <_dtoa_r+0x49a>
 800b14e:	2a00      	cmp	r2, #0
 800b150:	dd03      	ble.n	800b15a <_dtoa_r+0xaa2>
 800b152:	2b39      	cmp	r3, #57	@ 0x39
 800b154:	d0ee      	beq.n	800b134 <_dtoa_r+0xa7c>
 800b156:	3301      	adds	r3, #1
 800b158:	e7c9      	b.n	800b0ee <_dtoa_r+0xa36>
 800b15a:	9a00      	ldr	r2, [sp, #0]
 800b15c:	9908      	ldr	r1, [sp, #32]
 800b15e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b162:	428a      	cmp	r2, r1
 800b164:	d028      	beq.n	800b1b8 <_dtoa_r+0xb00>
 800b166:	9902      	ldr	r1, [sp, #8]
 800b168:	2300      	movs	r3, #0
 800b16a:	220a      	movs	r2, #10
 800b16c:	4648      	mov	r0, r9
 800b16e:	f000 f9d5 	bl	800b51c <__multadd>
 800b172:	42af      	cmp	r7, r5
 800b174:	9002      	str	r0, [sp, #8]
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	f04f 020a 	mov.w	r2, #10
 800b17e:	4639      	mov	r1, r7
 800b180:	4648      	mov	r0, r9
 800b182:	d107      	bne.n	800b194 <_dtoa_r+0xadc>
 800b184:	f000 f9ca 	bl	800b51c <__multadd>
 800b188:	4607      	mov	r7, r0
 800b18a:	4605      	mov	r5, r0
 800b18c:	9b00      	ldr	r3, [sp, #0]
 800b18e:	3301      	adds	r3, #1
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	e777      	b.n	800b084 <_dtoa_r+0x9cc>
 800b194:	f000 f9c2 	bl	800b51c <__multadd>
 800b198:	4629      	mov	r1, r5
 800b19a:	4607      	mov	r7, r0
 800b19c:	2300      	movs	r3, #0
 800b19e:	220a      	movs	r2, #10
 800b1a0:	4648      	mov	r0, r9
 800b1a2:	f000 f9bb 	bl	800b51c <__multadd>
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	e7f0      	b.n	800b18c <_dtoa_r+0xad4>
 800b1aa:	f1bb 0f00 	cmp.w	fp, #0
 800b1ae:	bfcc      	ite	gt
 800b1b0:	465e      	movgt	r6, fp
 800b1b2:	2601      	movle	r6, #1
 800b1b4:	4456      	add	r6, sl
 800b1b6:	2700      	movs	r7, #0
 800b1b8:	9902      	ldr	r1, [sp, #8]
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	4648      	mov	r0, r9
 800b1c0:	f000 fb50 	bl	800b864 <__lshift>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	9002      	str	r0, [sp, #8]
 800b1c8:	f000 fbb8 	bl	800b93c <__mcmp>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	dcb4      	bgt.n	800b13a <_dtoa_r+0xa82>
 800b1d0:	d102      	bne.n	800b1d8 <_dtoa_r+0xb20>
 800b1d2:	9b00      	ldr	r3, [sp, #0]
 800b1d4:	07db      	lsls	r3, r3, #31
 800b1d6:	d4b0      	bmi.n	800b13a <_dtoa_r+0xa82>
 800b1d8:	4633      	mov	r3, r6
 800b1da:	461e      	mov	r6, r3
 800b1dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1e0:	2a30      	cmp	r2, #48	@ 0x30
 800b1e2:	d0fa      	beq.n	800b1da <_dtoa_r+0xb22>
 800b1e4:	e4b5      	b.n	800ab52 <_dtoa_r+0x49a>
 800b1e6:	459a      	cmp	sl, r3
 800b1e8:	d1a8      	bne.n	800b13c <_dtoa_r+0xa84>
 800b1ea:	2331      	movs	r3, #49	@ 0x31
 800b1ec:	f108 0801 	add.w	r8, r8, #1
 800b1f0:	f88a 3000 	strb.w	r3, [sl]
 800b1f4:	e4ad      	b.n	800ab52 <_dtoa_r+0x49a>
 800b1f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b254 <_dtoa_r+0xb9c>
 800b1fc:	b11b      	cbz	r3, 800b206 <_dtoa_r+0xb4e>
 800b1fe:	f10a 0308 	add.w	r3, sl, #8
 800b202:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	4650      	mov	r0, sl
 800b208:	b017      	add	sp, #92	@ 0x5c
 800b20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20e:	9b07      	ldr	r3, [sp, #28]
 800b210:	2b01      	cmp	r3, #1
 800b212:	f77f ae2e 	ble.w	800ae72 <_dtoa_r+0x7ba>
 800b216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b218:	9308      	str	r3, [sp, #32]
 800b21a:	2001      	movs	r0, #1
 800b21c:	e64d      	b.n	800aeba <_dtoa_r+0x802>
 800b21e:	f1bb 0f00 	cmp.w	fp, #0
 800b222:	f77f aed9 	ble.w	800afd8 <_dtoa_r+0x920>
 800b226:	4656      	mov	r6, sl
 800b228:	9802      	ldr	r0, [sp, #8]
 800b22a:	4621      	mov	r1, r4
 800b22c:	f7ff f9bc 	bl	800a5a8 <quorem>
 800b230:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b234:	f806 3b01 	strb.w	r3, [r6], #1
 800b238:	eba6 020a 	sub.w	r2, r6, sl
 800b23c:	4593      	cmp	fp, r2
 800b23e:	ddb4      	ble.n	800b1aa <_dtoa_r+0xaf2>
 800b240:	9902      	ldr	r1, [sp, #8]
 800b242:	2300      	movs	r3, #0
 800b244:	220a      	movs	r2, #10
 800b246:	4648      	mov	r0, r9
 800b248:	f000 f968 	bl	800b51c <__multadd>
 800b24c:	9002      	str	r0, [sp, #8]
 800b24e:	e7eb      	b.n	800b228 <_dtoa_r+0xb70>
 800b250:	0800d518 	.word	0x0800d518
 800b254:	0800d49c 	.word	0x0800d49c

0800b258 <_free_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	4605      	mov	r5, r0
 800b25c:	2900      	cmp	r1, #0
 800b25e:	d041      	beq.n	800b2e4 <_free_r+0x8c>
 800b260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b264:	1f0c      	subs	r4, r1, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	bfb8      	it	lt
 800b26a:	18e4      	addlt	r4, r4, r3
 800b26c:	f000 f8e8 	bl	800b440 <__malloc_lock>
 800b270:	4a1d      	ldr	r2, [pc, #116]	@ (800b2e8 <_free_r+0x90>)
 800b272:	6813      	ldr	r3, [r2, #0]
 800b274:	b933      	cbnz	r3, 800b284 <_free_r+0x2c>
 800b276:	6063      	str	r3, [r4, #4]
 800b278:	6014      	str	r4, [r2, #0]
 800b27a:	4628      	mov	r0, r5
 800b27c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b280:	f000 b8e4 	b.w	800b44c <__malloc_unlock>
 800b284:	42a3      	cmp	r3, r4
 800b286:	d908      	bls.n	800b29a <_free_r+0x42>
 800b288:	6820      	ldr	r0, [r4, #0]
 800b28a:	1821      	adds	r1, r4, r0
 800b28c:	428b      	cmp	r3, r1
 800b28e:	bf01      	itttt	eq
 800b290:	6819      	ldreq	r1, [r3, #0]
 800b292:	685b      	ldreq	r3, [r3, #4]
 800b294:	1809      	addeq	r1, r1, r0
 800b296:	6021      	streq	r1, [r4, #0]
 800b298:	e7ed      	b.n	800b276 <_free_r+0x1e>
 800b29a:	461a      	mov	r2, r3
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	b10b      	cbz	r3, 800b2a4 <_free_r+0x4c>
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	d9fa      	bls.n	800b29a <_free_r+0x42>
 800b2a4:	6811      	ldr	r1, [r2, #0]
 800b2a6:	1850      	adds	r0, r2, r1
 800b2a8:	42a0      	cmp	r0, r4
 800b2aa:	d10b      	bne.n	800b2c4 <_free_r+0x6c>
 800b2ac:	6820      	ldr	r0, [r4, #0]
 800b2ae:	4401      	add	r1, r0
 800b2b0:	1850      	adds	r0, r2, r1
 800b2b2:	4283      	cmp	r3, r0
 800b2b4:	6011      	str	r1, [r2, #0]
 800b2b6:	d1e0      	bne.n	800b27a <_free_r+0x22>
 800b2b8:	6818      	ldr	r0, [r3, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	6053      	str	r3, [r2, #4]
 800b2be:	4408      	add	r0, r1
 800b2c0:	6010      	str	r0, [r2, #0]
 800b2c2:	e7da      	b.n	800b27a <_free_r+0x22>
 800b2c4:	d902      	bls.n	800b2cc <_free_r+0x74>
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	602b      	str	r3, [r5, #0]
 800b2ca:	e7d6      	b.n	800b27a <_free_r+0x22>
 800b2cc:	6820      	ldr	r0, [r4, #0]
 800b2ce:	1821      	adds	r1, r4, r0
 800b2d0:	428b      	cmp	r3, r1
 800b2d2:	bf04      	itt	eq
 800b2d4:	6819      	ldreq	r1, [r3, #0]
 800b2d6:	685b      	ldreq	r3, [r3, #4]
 800b2d8:	6063      	str	r3, [r4, #4]
 800b2da:	bf04      	itt	eq
 800b2dc:	1809      	addeq	r1, r1, r0
 800b2de:	6021      	streq	r1, [r4, #0]
 800b2e0:	6054      	str	r4, [r2, #4]
 800b2e2:	e7ca      	b.n	800b27a <_free_r+0x22>
 800b2e4:	bd38      	pop	{r3, r4, r5, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20004150 	.word	0x20004150

0800b2ec <malloc>:
 800b2ec:	4b02      	ldr	r3, [pc, #8]	@ (800b2f8 <malloc+0xc>)
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	f000 b825 	b.w	800b340 <_malloc_r>
 800b2f6:	bf00      	nop
 800b2f8:	20000044 	.word	0x20000044

0800b2fc <sbrk_aligned>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	4e0f      	ldr	r6, [pc, #60]	@ (800b33c <sbrk_aligned+0x40>)
 800b300:	460c      	mov	r4, r1
 800b302:	6831      	ldr	r1, [r6, #0]
 800b304:	4605      	mov	r5, r0
 800b306:	b911      	cbnz	r1, 800b30e <sbrk_aligned+0x12>
 800b308:	f000 ff6a 	bl	800c1e0 <_sbrk_r>
 800b30c:	6030      	str	r0, [r6, #0]
 800b30e:	4621      	mov	r1, r4
 800b310:	4628      	mov	r0, r5
 800b312:	f000 ff65 	bl	800c1e0 <_sbrk_r>
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	d103      	bne.n	800b322 <sbrk_aligned+0x26>
 800b31a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b31e:	4620      	mov	r0, r4
 800b320:	bd70      	pop	{r4, r5, r6, pc}
 800b322:	1cc4      	adds	r4, r0, #3
 800b324:	f024 0403 	bic.w	r4, r4, #3
 800b328:	42a0      	cmp	r0, r4
 800b32a:	d0f8      	beq.n	800b31e <sbrk_aligned+0x22>
 800b32c:	1a21      	subs	r1, r4, r0
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 ff56 	bl	800c1e0 <_sbrk_r>
 800b334:	3001      	adds	r0, #1
 800b336:	d1f2      	bne.n	800b31e <sbrk_aligned+0x22>
 800b338:	e7ef      	b.n	800b31a <sbrk_aligned+0x1e>
 800b33a:	bf00      	nop
 800b33c:	2000414c 	.word	0x2000414c

0800b340 <_malloc_r>:
 800b340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b344:	1ccd      	adds	r5, r1, #3
 800b346:	f025 0503 	bic.w	r5, r5, #3
 800b34a:	3508      	adds	r5, #8
 800b34c:	2d0c      	cmp	r5, #12
 800b34e:	bf38      	it	cc
 800b350:	250c      	movcc	r5, #12
 800b352:	2d00      	cmp	r5, #0
 800b354:	4606      	mov	r6, r0
 800b356:	db01      	blt.n	800b35c <_malloc_r+0x1c>
 800b358:	42a9      	cmp	r1, r5
 800b35a:	d904      	bls.n	800b366 <_malloc_r+0x26>
 800b35c:	230c      	movs	r3, #12
 800b35e:	6033      	str	r3, [r6, #0]
 800b360:	2000      	movs	r0, #0
 800b362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b43c <_malloc_r+0xfc>
 800b36a:	f000 f869 	bl	800b440 <__malloc_lock>
 800b36e:	f8d8 3000 	ldr.w	r3, [r8]
 800b372:	461c      	mov	r4, r3
 800b374:	bb44      	cbnz	r4, 800b3c8 <_malloc_r+0x88>
 800b376:	4629      	mov	r1, r5
 800b378:	4630      	mov	r0, r6
 800b37a:	f7ff ffbf 	bl	800b2fc <sbrk_aligned>
 800b37e:	1c43      	adds	r3, r0, #1
 800b380:	4604      	mov	r4, r0
 800b382:	d158      	bne.n	800b436 <_malloc_r+0xf6>
 800b384:	f8d8 4000 	ldr.w	r4, [r8]
 800b388:	4627      	mov	r7, r4
 800b38a:	2f00      	cmp	r7, #0
 800b38c:	d143      	bne.n	800b416 <_malloc_r+0xd6>
 800b38e:	2c00      	cmp	r4, #0
 800b390:	d04b      	beq.n	800b42a <_malloc_r+0xea>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	4639      	mov	r1, r7
 800b396:	4630      	mov	r0, r6
 800b398:	eb04 0903 	add.w	r9, r4, r3
 800b39c:	f000 ff20 	bl	800c1e0 <_sbrk_r>
 800b3a0:	4581      	cmp	r9, r0
 800b3a2:	d142      	bne.n	800b42a <_malloc_r+0xea>
 800b3a4:	6821      	ldr	r1, [r4, #0]
 800b3a6:	1a6d      	subs	r5, r5, r1
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f7ff ffa6 	bl	800b2fc <sbrk_aligned>
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	d03a      	beq.n	800b42a <_malloc_r+0xea>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	442b      	add	r3, r5
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	bb62      	cbnz	r2, 800b41c <_malloc_r+0xdc>
 800b3c2:	f8c8 7000 	str.w	r7, [r8]
 800b3c6:	e00f      	b.n	800b3e8 <_malloc_r+0xa8>
 800b3c8:	6822      	ldr	r2, [r4, #0]
 800b3ca:	1b52      	subs	r2, r2, r5
 800b3cc:	d420      	bmi.n	800b410 <_malloc_r+0xd0>
 800b3ce:	2a0b      	cmp	r2, #11
 800b3d0:	d917      	bls.n	800b402 <_malloc_r+0xc2>
 800b3d2:	1961      	adds	r1, r4, r5
 800b3d4:	42a3      	cmp	r3, r4
 800b3d6:	6025      	str	r5, [r4, #0]
 800b3d8:	bf18      	it	ne
 800b3da:	6059      	strne	r1, [r3, #4]
 800b3dc:	6863      	ldr	r3, [r4, #4]
 800b3de:	bf08      	it	eq
 800b3e0:	f8c8 1000 	streq.w	r1, [r8]
 800b3e4:	5162      	str	r2, [r4, r5]
 800b3e6:	604b      	str	r3, [r1, #4]
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	f000 f82f 	bl	800b44c <__malloc_unlock>
 800b3ee:	f104 000b 	add.w	r0, r4, #11
 800b3f2:	1d23      	adds	r3, r4, #4
 800b3f4:	f020 0007 	bic.w	r0, r0, #7
 800b3f8:	1ac2      	subs	r2, r0, r3
 800b3fa:	bf1c      	itt	ne
 800b3fc:	1a1b      	subne	r3, r3, r0
 800b3fe:	50a3      	strne	r3, [r4, r2]
 800b400:	e7af      	b.n	800b362 <_malloc_r+0x22>
 800b402:	6862      	ldr	r2, [r4, #4]
 800b404:	42a3      	cmp	r3, r4
 800b406:	bf0c      	ite	eq
 800b408:	f8c8 2000 	streq.w	r2, [r8]
 800b40c:	605a      	strne	r2, [r3, #4]
 800b40e:	e7eb      	b.n	800b3e8 <_malloc_r+0xa8>
 800b410:	4623      	mov	r3, r4
 800b412:	6864      	ldr	r4, [r4, #4]
 800b414:	e7ae      	b.n	800b374 <_malloc_r+0x34>
 800b416:	463c      	mov	r4, r7
 800b418:	687f      	ldr	r7, [r7, #4]
 800b41a:	e7b6      	b.n	800b38a <_malloc_r+0x4a>
 800b41c:	461a      	mov	r2, r3
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	42a3      	cmp	r3, r4
 800b422:	d1fb      	bne.n	800b41c <_malloc_r+0xdc>
 800b424:	2300      	movs	r3, #0
 800b426:	6053      	str	r3, [r2, #4]
 800b428:	e7de      	b.n	800b3e8 <_malloc_r+0xa8>
 800b42a:	230c      	movs	r3, #12
 800b42c:	6033      	str	r3, [r6, #0]
 800b42e:	4630      	mov	r0, r6
 800b430:	f000 f80c 	bl	800b44c <__malloc_unlock>
 800b434:	e794      	b.n	800b360 <_malloc_r+0x20>
 800b436:	6005      	str	r5, [r0, #0]
 800b438:	e7d6      	b.n	800b3e8 <_malloc_r+0xa8>
 800b43a:	bf00      	nop
 800b43c:	20004150 	.word	0x20004150

0800b440 <__malloc_lock>:
 800b440:	4801      	ldr	r0, [pc, #4]	@ (800b448 <__malloc_lock+0x8>)
 800b442:	f7ff b8a8 	b.w	800a596 <__retarget_lock_acquire_recursive>
 800b446:	bf00      	nop
 800b448:	20004148 	.word	0x20004148

0800b44c <__malloc_unlock>:
 800b44c:	4801      	ldr	r0, [pc, #4]	@ (800b454 <__malloc_unlock+0x8>)
 800b44e:	f7ff b8a3 	b.w	800a598 <__retarget_lock_release_recursive>
 800b452:	bf00      	nop
 800b454:	20004148 	.word	0x20004148

0800b458 <_Balloc>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	69c6      	ldr	r6, [r0, #28]
 800b45c:	4604      	mov	r4, r0
 800b45e:	460d      	mov	r5, r1
 800b460:	b976      	cbnz	r6, 800b480 <_Balloc+0x28>
 800b462:	2010      	movs	r0, #16
 800b464:	f7ff ff42 	bl	800b2ec <malloc>
 800b468:	4602      	mov	r2, r0
 800b46a:	61e0      	str	r0, [r4, #28]
 800b46c:	b920      	cbnz	r0, 800b478 <_Balloc+0x20>
 800b46e:	4b18      	ldr	r3, [pc, #96]	@ (800b4d0 <_Balloc+0x78>)
 800b470:	4818      	ldr	r0, [pc, #96]	@ (800b4d4 <_Balloc+0x7c>)
 800b472:	216b      	movs	r1, #107	@ 0x6b
 800b474:	f7fe f9d2 	bl	800981c <__assert_func>
 800b478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b47c:	6006      	str	r6, [r0, #0]
 800b47e:	60c6      	str	r6, [r0, #12]
 800b480:	69e6      	ldr	r6, [r4, #28]
 800b482:	68f3      	ldr	r3, [r6, #12]
 800b484:	b183      	cbz	r3, 800b4a8 <_Balloc+0x50>
 800b486:	69e3      	ldr	r3, [r4, #28]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b48e:	b9b8      	cbnz	r0, 800b4c0 <_Balloc+0x68>
 800b490:	2101      	movs	r1, #1
 800b492:	fa01 f605 	lsl.w	r6, r1, r5
 800b496:	1d72      	adds	r2, r6, #5
 800b498:	0092      	lsls	r2, r2, #2
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 febe 	bl	800c21c <_calloc_r>
 800b4a0:	b160      	cbz	r0, 800b4bc <_Balloc+0x64>
 800b4a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4a6:	e00e      	b.n	800b4c6 <_Balloc+0x6e>
 800b4a8:	2221      	movs	r2, #33	@ 0x21
 800b4aa:	2104      	movs	r1, #4
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 feb5 	bl	800c21c <_calloc_r>
 800b4b2:	69e3      	ldr	r3, [r4, #28]
 800b4b4:	60f0      	str	r0, [r6, #12]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1e4      	bne.n	800b486 <_Balloc+0x2e>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	bd70      	pop	{r4, r5, r6, pc}
 800b4c0:	6802      	ldr	r2, [r0, #0]
 800b4c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4cc:	e7f7      	b.n	800b4be <_Balloc+0x66>
 800b4ce:	bf00      	nop
 800b4d0:	0800d4a9 	.word	0x0800d4a9
 800b4d4:	0800d529 	.word	0x0800d529

0800b4d8 <_Bfree>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	69c6      	ldr	r6, [r0, #28]
 800b4dc:	4605      	mov	r5, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	b976      	cbnz	r6, 800b500 <_Bfree+0x28>
 800b4e2:	2010      	movs	r0, #16
 800b4e4:	f7ff ff02 	bl	800b2ec <malloc>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	61e8      	str	r0, [r5, #28]
 800b4ec:	b920      	cbnz	r0, 800b4f8 <_Bfree+0x20>
 800b4ee:	4b09      	ldr	r3, [pc, #36]	@ (800b514 <_Bfree+0x3c>)
 800b4f0:	4809      	ldr	r0, [pc, #36]	@ (800b518 <_Bfree+0x40>)
 800b4f2:	218f      	movs	r1, #143	@ 0x8f
 800b4f4:	f7fe f992 	bl	800981c <__assert_func>
 800b4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4fc:	6006      	str	r6, [r0, #0]
 800b4fe:	60c6      	str	r6, [r0, #12]
 800b500:	b13c      	cbz	r4, 800b512 <_Bfree+0x3a>
 800b502:	69eb      	ldr	r3, [r5, #28]
 800b504:	6862      	ldr	r2, [r4, #4]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b50c:	6021      	str	r1, [r4, #0]
 800b50e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b512:	bd70      	pop	{r4, r5, r6, pc}
 800b514:	0800d4a9 	.word	0x0800d4a9
 800b518:	0800d529 	.word	0x0800d529

0800b51c <__multadd>:
 800b51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b520:	690d      	ldr	r5, [r1, #16]
 800b522:	4607      	mov	r7, r0
 800b524:	460c      	mov	r4, r1
 800b526:	461e      	mov	r6, r3
 800b528:	f101 0c14 	add.w	ip, r1, #20
 800b52c:	2000      	movs	r0, #0
 800b52e:	f8dc 3000 	ldr.w	r3, [ip]
 800b532:	b299      	uxth	r1, r3
 800b534:	fb02 6101 	mla	r1, r2, r1, r6
 800b538:	0c1e      	lsrs	r6, r3, #16
 800b53a:	0c0b      	lsrs	r3, r1, #16
 800b53c:	fb02 3306 	mla	r3, r2, r6, r3
 800b540:	b289      	uxth	r1, r1
 800b542:	3001      	adds	r0, #1
 800b544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b548:	4285      	cmp	r5, r0
 800b54a:	f84c 1b04 	str.w	r1, [ip], #4
 800b54e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b552:	dcec      	bgt.n	800b52e <__multadd+0x12>
 800b554:	b30e      	cbz	r6, 800b59a <__multadd+0x7e>
 800b556:	68a3      	ldr	r3, [r4, #8]
 800b558:	42ab      	cmp	r3, r5
 800b55a:	dc19      	bgt.n	800b590 <__multadd+0x74>
 800b55c:	6861      	ldr	r1, [r4, #4]
 800b55e:	4638      	mov	r0, r7
 800b560:	3101      	adds	r1, #1
 800b562:	f7ff ff79 	bl	800b458 <_Balloc>
 800b566:	4680      	mov	r8, r0
 800b568:	b928      	cbnz	r0, 800b576 <__multadd+0x5a>
 800b56a:	4602      	mov	r2, r0
 800b56c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a0 <__multadd+0x84>)
 800b56e:	480d      	ldr	r0, [pc, #52]	@ (800b5a4 <__multadd+0x88>)
 800b570:	21ba      	movs	r1, #186	@ 0xba
 800b572:	f7fe f953 	bl	800981c <__assert_func>
 800b576:	6922      	ldr	r2, [r4, #16]
 800b578:	3202      	adds	r2, #2
 800b57a:	f104 010c 	add.w	r1, r4, #12
 800b57e:	0092      	lsls	r2, r2, #2
 800b580:	300c      	adds	r0, #12
 800b582:	f000 fe3d 	bl	800c200 <memcpy>
 800b586:	4621      	mov	r1, r4
 800b588:	4638      	mov	r0, r7
 800b58a:	f7ff ffa5 	bl	800b4d8 <_Bfree>
 800b58e:	4644      	mov	r4, r8
 800b590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b594:	3501      	adds	r5, #1
 800b596:	615e      	str	r6, [r3, #20]
 800b598:	6125      	str	r5, [r4, #16]
 800b59a:	4620      	mov	r0, r4
 800b59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a0:	0800d518 	.word	0x0800d518
 800b5a4:	0800d529 	.word	0x0800d529

0800b5a8 <__hi0bits>:
 800b5a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	bf36      	itet	cc
 800b5b0:	0403      	lslcc	r3, r0, #16
 800b5b2:	2000      	movcs	r0, #0
 800b5b4:	2010      	movcc	r0, #16
 800b5b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5ba:	bf3c      	itt	cc
 800b5bc:	021b      	lslcc	r3, r3, #8
 800b5be:	3008      	addcc	r0, #8
 800b5c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5c4:	bf3c      	itt	cc
 800b5c6:	011b      	lslcc	r3, r3, #4
 800b5c8:	3004      	addcc	r0, #4
 800b5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ce:	bf3c      	itt	cc
 800b5d0:	009b      	lslcc	r3, r3, #2
 800b5d2:	3002      	addcc	r0, #2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	db05      	blt.n	800b5e4 <__hi0bits+0x3c>
 800b5d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5dc:	f100 0001 	add.w	r0, r0, #1
 800b5e0:	bf08      	it	eq
 800b5e2:	2020      	moveq	r0, #32
 800b5e4:	4770      	bx	lr

0800b5e6 <__lo0bits>:
 800b5e6:	6803      	ldr	r3, [r0, #0]
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	f013 0007 	ands.w	r0, r3, #7
 800b5ee:	d00b      	beq.n	800b608 <__lo0bits+0x22>
 800b5f0:	07d9      	lsls	r1, r3, #31
 800b5f2:	d421      	bmi.n	800b638 <__lo0bits+0x52>
 800b5f4:	0798      	lsls	r0, r3, #30
 800b5f6:	bf49      	itett	mi
 800b5f8:	085b      	lsrmi	r3, r3, #1
 800b5fa:	089b      	lsrpl	r3, r3, #2
 800b5fc:	2001      	movmi	r0, #1
 800b5fe:	6013      	strmi	r3, [r2, #0]
 800b600:	bf5c      	itt	pl
 800b602:	6013      	strpl	r3, [r2, #0]
 800b604:	2002      	movpl	r0, #2
 800b606:	4770      	bx	lr
 800b608:	b299      	uxth	r1, r3
 800b60a:	b909      	cbnz	r1, 800b610 <__lo0bits+0x2a>
 800b60c:	0c1b      	lsrs	r3, r3, #16
 800b60e:	2010      	movs	r0, #16
 800b610:	b2d9      	uxtb	r1, r3
 800b612:	b909      	cbnz	r1, 800b618 <__lo0bits+0x32>
 800b614:	3008      	adds	r0, #8
 800b616:	0a1b      	lsrs	r3, r3, #8
 800b618:	0719      	lsls	r1, r3, #28
 800b61a:	bf04      	itt	eq
 800b61c:	091b      	lsreq	r3, r3, #4
 800b61e:	3004      	addeq	r0, #4
 800b620:	0799      	lsls	r1, r3, #30
 800b622:	bf04      	itt	eq
 800b624:	089b      	lsreq	r3, r3, #2
 800b626:	3002      	addeq	r0, #2
 800b628:	07d9      	lsls	r1, r3, #31
 800b62a:	d403      	bmi.n	800b634 <__lo0bits+0x4e>
 800b62c:	085b      	lsrs	r3, r3, #1
 800b62e:	f100 0001 	add.w	r0, r0, #1
 800b632:	d003      	beq.n	800b63c <__lo0bits+0x56>
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	4770      	bx	lr
 800b638:	2000      	movs	r0, #0
 800b63a:	4770      	bx	lr
 800b63c:	2020      	movs	r0, #32
 800b63e:	4770      	bx	lr

0800b640 <__i2b>:
 800b640:	b510      	push	{r4, lr}
 800b642:	460c      	mov	r4, r1
 800b644:	2101      	movs	r1, #1
 800b646:	f7ff ff07 	bl	800b458 <_Balloc>
 800b64a:	4602      	mov	r2, r0
 800b64c:	b928      	cbnz	r0, 800b65a <__i2b+0x1a>
 800b64e:	4b05      	ldr	r3, [pc, #20]	@ (800b664 <__i2b+0x24>)
 800b650:	4805      	ldr	r0, [pc, #20]	@ (800b668 <__i2b+0x28>)
 800b652:	f240 1145 	movw	r1, #325	@ 0x145
 800b656:	f7fe f8e1 	bl	800981c <__assert_func>
 800b65a:	2301      	movs	r3, #1
 800b65c:	6144      	str	r4, [r0, #20]
 800b65e:	6103      	str	r3, [r0, #16]
 800b660:	bd10      	pop	{r4, pc}
 800b662:	bf00      	nop
 800b664:	0800d518 	.word	0x0800d518
 800b668:	0800d529 	.word	0x0800d529

0800b66c <__multiply>:
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	4617      	mov	r7, r2
 800b672:	690a      	ldr	r2, [r1, #16]
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	429a      	cmp	r2, r3
 800b678:	bfa8      	it	ge
 800b67a:	463b      	movge	r3, r7
 800b67c:	4689      	mov	r9, r1
 800b67e:	bfa4      	itt	ge
 800b680:	460f      	movge	r7, r1
 800b682:	4699      	movge	r9, r3
 800b684:	693d      	ldr	r5, [r7, #16]
 800b686:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	eb05 060a 	add.w	r6, r5, sl
 800b692:	42b3      	cmp	r3, r6
 800b694:	b085      	sub	sp, #20
 800b696:	bfb8      	it	lt
 800b698:	3101      	addlt	r1, #1
 800b69a:	f7ff fedd 	bl	800b458 <_Balloc>
 800b69e:	b930      	cbnz	r0, 800b6ae <__multiply+0x42>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	4b41      	ldr	r3, [pc, #260]	@ (800b7a8 <__multiply+0x13c>)
 800b6a4:	4841      	ldr	r0, [pc, #260]	@ (800b7ac <__multiply+0x140>)
 800b6a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6aa:	f7fe f8b7 	bl	800981c <__assert_func>
 800b6ae:	f100 0414 	add.w	r4, r0, #20
 800b6b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b6b6:	4623      	mov	r3, r4
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	4573      	cmp	r3, lr
 800b6bc:	d320      	bcc.n	800b700 <__multiply+0x94>
 800b6be:	f107 0814 	add.w	r8, r7, #20
 800b6c2:	f109 0114 	add.w	r1, r9, #20
 800b6c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b6ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b6ce:	9302      	str	r3, [sp, #8]
 800b6d0:	1beb      	subs	r3, r5, r7
 800b6d2:	3b15      	subs	r3, #21
 800b6d4:	f023 0303 	bic.w	r3, r3, #3
 800b6d8:	3304      	adds	r3, #4
 800b6da:	3715      	adds	r7, #21
 800b6dc:	42bd      	cmp	r5, r7
 800b6de:	bf38      	it	cc
 800b6e0:	2304      	movcc	r3, #4
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	9b02      	ldr	r3, [sp, #8]
 800b6e6:	9103      	str	r1, [sp, #12]
 800b6e8:	428b      	cmp	r3, r1
 800b6ea:	d80c      	bhi.n	800b706 <__multiply+0x9a>
 800b6ec:	2e00      	cmp	r6, #0
 800b6ee:	dd03      	ble.n	800b6f8 <__multiply+0x8c>
 800b6f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d055      	beq.n	800b7a4 <__multiply+0x138>
 800b6f8:	6106      	str	r6, [r0, #16]
 800b6fa:	b005      	add	sp, #20
 800b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b700:	f843 2b04 	str.w	r2, [r3], #4
 800b704:	e7d9      	b.n	800b6ba <__multiply+0x4e>
 800b706:	f8b1 a000 	ldrh.w	sl, [r1]
 800b70a:	f1ba 0f00 	cmp.w	sl, #0
 800b70e:	d01f      	beq.n	800b750 <__multiply+0xe4>
 800b710:	46c4      	mov	ip, r8
 800b712:	46a1      	mov	r9, r4
 800b714:	2700      	movs	r7, #0
 800b716:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b71a:	f8d9 3000 	ldr.w	r3, [r9]
 800b71e:	fa1f fb82 	uxth.w	fp, r2
 800b722:	b29b      	uxth	r3, r3
 800b724:	fb0a 330b 	mla	r3, sl, fp, r3
 800b728:	443b      	add	r3, r7
 800b72a:	f8d9 7000 	ldr.w	r7, [r9]
 800b72e:	0c12      	lsrs	r2, r2, #16
 800b730:	0c3f      	lsrs	r7, r7, #16
 800b732:	fb0a 7202 	mla	r2, sl, r2, r7
 800b736:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b740:	4565      	cmp	r5, ip
 800b742:	f849 3b04 	str.w	r3, [r9], #4
 800b746:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b74a:	d8e4      	bhi.n	800b716 <__multiply+0xaa>
 800b74c:	9b01      	ldr	r3, [sp, #4]
 800b74e:	50e7      	str	r7, [r4, r3]
 800b750:	9b03      	ldr	r3, [sp, #12]
 800b752:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b756:	3104      	adds	r1, #4
 800b758:	f1b9 0f00 	cmp.w	r9, #0
 800b75c:	d020      	beq.n	800b7a0 <__multiply+0x134>
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	4647      	mov	r7, r8
 800b762:	46a4      	mov	ip, r4
 800b764:	f04f 0a00 	mov.w	sl, #0
 800b768:	f8b7 b000 	ldrh.w	fp, [r7]
 800b76c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b770:	fb09 220b 	mla	r2, r9, fp, r2
 800b774:	4452      	add	r2, sl
 800b776:	b29b      	uxth	r3, r3
 800b778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b77c:	f84c 3b04 	str.w	r3, [ip], #4
 800b780:	f857 3b04 	ldr.w	r3, [r7], #4
 800b784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b788:	f8bc 3000 	ldrh.w	r3, [ip]
 800b78c:	fb09 330a 	mla	r3, r9, sl, r3
 800b790:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b794:	42bd      	cmp	r5, r7
 800b796:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b79a:	d8e5      	bhi.n	800b768 <__multiply+0xfc>
 800b79c:	9a01      	ldr	r2, [sp, #4]
 800b79e:	50a3      	str	r3, [r4, r2]
 800b7a0:	3404      	adds	r4, #4
 800b7a2:	e79f      	b.n	800b6e4 <__multiply+0x78>
 800b7a4:	3e01      	subs	r6, #1
 800b7a6:	e7a1      	b.n	800b6ec <__multiply+0x80>
 800b7a8:	0800d518 	.word	0x0800d518
 800b7ac:	0800d529 	.word	0x0800d529

0800b7b0 <__pow5mult>:
 800b7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b4:	4615      	mov	r5, r2
 800b7b6:	f012 0203 	ands.w	r2, r2, #3
 800b7ba:	4607      	mov	r7, r0
 800b7bc:	460e      	mov	r6, r1
 800b7be:	d007      	beq.n	800b7d0 <__pow5mult+0x20>
 800b7c0:	4c25      	ldr	r4, [pc, #148]	@ (800b858 <__pow5mult+0xa8>)
 800b7c2:	3a01      	subs	r2, #1
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7ca:	f7ff fea7 	bl	800b51c <__multadd>
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	10ad      	asrs	r5, r5, #2
 800b7d2:	d03d      	beq.n	800b850 <__pow5mult+0xa0>
 800b7d4:	69fc      	ldr	r4, [r7, #28]
 800b7d6:	b97c      	cbnz	r4, 800b7f8 <__pow5mult+0x48>
 800b7d8:	2010      	movs	r0, #16
 800b7da:	f7ff fd87 	bl	800b2ec <malloc>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	61f8      	str	r0, [r7, #28]
 800b7e2:	b928      	cbnz	r0, 800b7f0 <__pow5mult+0x40>
 800b7e4:	4b1d      	ldr	r3, [pc, #116]	@ (800b85c <__pow5mult+0xac>)
 800b7e6:	481e      	ldr	r0, [pc, #120]	@ (800b860 <__pow5mult+0xb0>)
 800b7e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7ec:	f7fe f816 	bl	800981c <__assert_func>
 800b7f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7f4:	6004      	str	r4, [r0, #0]
 800b7f6:	60c4      	str	r4, [r0, #12]
 800b7f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b800:	b94c      	cbnz	r4, 800b816 <__pow5mult+0x66>
 800b802:	f240 2171 	movw	r1, #625	@ 0x271
 800b806:	4638      	mov	r0, r7
 800b808:	f7ff ff1a 	bl	800b640 <__i2b>
 800b80c:	2300      	movs	r3, #0
 800b80e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b812:	4604      	mov	r4, r0
 800b814:	6003      	str	r3, [r0, #0]
 800b816:	f04f 0900 	mov.w	r9, #0
 800b81a:	07eb      	lsls	r3, r5, #31
 800b81c:	d50a      	bpl.n	800b834 <__pow5mult+0x84>
 800b81e:	4631      	mov	r1, r6
 800b820:	4622      	mov	r2, r4
 800b822:	4638      	mov	r0, r7
 800b824:	f7ff ff22 	bl	800b66c <__multiply>
 800b828:	4631      	mov	r1, r6
 800b82a:	4680      	mov	r8, r0
 800b82c:	4638      	mov	r0, r7
 800b82e:	f7ff fe53 	bl	800b4d8 <_Bfree>
 800b832:	4646      	mov	r6, r8
 800b834:	106d      	asrs	r5, r5, #1
 800b836:	d00b      	beq.n	800b850 <__pow5mult+0xa0>
 800b838:	6820      	ldr	r0, [r4, #0]
 800b83a:	b938      	cbnz	r0, 800b84c <__pow5mult+0x9c>
 800b83c:	4622      	mov	r2, r4
 800b83e:	4621      	mov	r1, r4
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff ff13 	bl	800b66c <__multiply>
 800b846:	6020      	str	r0, [r4, #0]
 800b848:	f8c0 9000 	str.w	r9, [r0]
 800b84c:	4604      	mov	r4, r0
 800b84e:	e7e4      	b.n	800b81a <__pow5mult+0x6a>
 800b850:	4630      	mov	r0, r6
 800b852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b856:	bf00      	nop
 800b858:	0800d5a0 	.word	0x0800d5a0
 800b85c:	0800d4a9 	.word	0x0800d4a9
 800b860:	0800d529 	.word	0x0800d529

0800b864 <__lshift>:
 800b864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b868:	460c      	mov	r4, r1
 800b86a:	6849      	ldr	r1, [r1, #4]
 800b86c:	6923      	ldr	r3, [r4, #16]
 800b86e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	4607      	mov	r7, r0
 800b876:	4691      	mov	r9, r2
 800b878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b87c:	f108 0601 	add.w	r6, r8, #1
 800b880:	42b3      	cmp	r3, r6
 800b882:	db0b      	blt.n	800b89c <__lshift+0x38>
 800b884:	4638      	mov	r0, r7
 800b886:	f7ff fde7 	bl	800b458 <_Balloc>
 800b88a:	4605      	mov	r5, r0
 800b88c:	b948      	cbnz	r0, 800b8a2 <__lshift+0x3e>
 800b88e:	4602      	mov	r2, r0
 800b890:	4b28      	ldr	r3, [pc, #160]	@ (800b934 <__lshift+0xd0>)
 800b892:	4829      	ldr	r0, [pc, #164]	@ (800b938 <__lshift+0xd4>)
 800b894:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b898:	f7fd ffc0 	bl	800981c <__assert_func>
 800b89c:	3101      	adds	r1, #1
 800b89e:	005b      	lsls	r3, r3, #1
 800b8a0:	e7ee      	b.n	800b880 <__lshift+0x1c>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f100 0114 	add.w	r1, r0, #20
 800b8a8:	f100 0210 	add.w	r2, r0, #16
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	4553      	cmp	r3, sl
 800b8b0:	db33      	blt.n	800b91a <__lshift+0xb6>
 800b8b2:	6920      	ldr	r0, [r4, #16]
 800b8b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8b8:	f104 0314 	add.w	r3, r4, #20
 800b8bc:	f019 091f 	ands.w	r9, r9, #31
 800b8c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8c8:	d02b      	beq.n	800b922 <__lshift+0xbe>
 800b8ca:	f1c9 0e20 	rsb	lr, r9, #32
 800b8ce:	468a      	mov	sl, r1
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	fa00 f009 	lsl.w	r0, r0, r9
 800b8d8:	4310      	orrs	r0, r2
 800b8da:	f84a 0b04 	str.w	r0, [sl], #4
 800b8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e2:	459c      	cmp	ip, r3
 800b8e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8e8:	d8f3      	bhi.n	800b8d2 <__lshift+0x6e>
 800b8ea:	ebac 0304 	sub.w	r3, ip, r4
 800b8ee:	3b15      	subs	r3, #21
 800b8f0:	f023 0303 	bic.w	r3, r3, #3
 800b8f4:	3304      	adds	r3, #4
 800b8f6:	f104 0015 	add.w	r0, r4, #21
 800b8fa:	4560      	cmp	r0, ip
 800b8fc:	bf88      	it	hi
 800b8fe:	2304      	movhi	r3, #4
 800b900:	50ca      	str	r2, [r1, r3]
 800b902:	b10a      	cbz	r2, 800b908 <__lshift+0xa4>
 800b904:	f108 0602 	add.w	r6, r8, #2
 800b908:	3e01      	subs	r6, #1
 800b90a:	4638      	mov	r0, r7
 800b90c:	612e      	str	r6, [r5, #16]
 800b90e:	4621      	mov	r1, r4
 800b910:	f7ff fde2 	bl	800b4d8 <_Bfree>
 800b914:	4628      	mov	r0, r5
 800b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b91e:	3301      	adds	r3, #1
 800b920:	e7c5      	b.n	800b8ae <__lshift+0x4a>
 800b922:	3904      	subs	r1, #4
 800b924:	f853 2b04 	ldr.w	r2, [r3], #4
 800b928:	f841 2f04 	str.w	r2, [r1, #4]!
 800b92c:	459c      	cmp	ip, r3
 800b92e:	d8f9      	bhi.n	800b924 <__lshift+0xc0>
 800b930:	e7ea      	b.n	800b908 <__lshift+0xa4>
 800b932:	bf00      	nop
 800b934:	0800d518 	.word	0x0800d518
 800b938:	0800d529 	.word	0x0800d529

0800b93c <__mcmp>:
 800b93c:	690a      	ldr	r2, [r1, #16]
 800b93e:	4603      	mov	r3, r0
 800b940:	6900      	ldr	r0, [r0, #16]
 800b942:	1a80      	subs	r0, r0, r2
 800b944:	b530      	push	{r4, r5, lr}
 800b946:	d10e      	bne.n	800b966 <__mcmp+0x2a>
 800b948:	3314      	adds	r3, #20
 800b94a:	3114      	adds	r1, #20
 800b94c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b950:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b954:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b958:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b95c:	4295      	cmp	r5, r2
 800b95e:	d003      	beq.n	800b968 <__mcmp+0x2c>
 800b960:	d205      	bcs.n	800b96e <__mcmp+0x32>
 800b962:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b966:	bd30      	pop	{r4, r5, pc}
 800b968:	42a3      	cmp	r3, r4
 800b96a:	d3f3      	bcc.n	800b954 <__mcmp+0x18>
 800b96c:	e7fb      	b.n	800b966 <__mcmp+0x2a>
 800b96e:	2001      	movs	r0, #1
 800b970:	e7f9      	b.n	800b966 <__mcmp+0x2a>
	...

0800b974 <__mdiff>:
 800b974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b978:	4689      	mov	r9, r1
 800b97a:	4606      	mov	r6, r0
 800b97c:	4611      	mov	r1, r2
 800b97e:	4648      	mov	r0, r9
 800b980:	4614      	mov	r4, r2
 800b982:	f7ff ffdb 	bl	800b93c <__mcmp>
 800b986:	1e05      	subs	r5, r0, #0
 800b988:	d112      	bne.n	800b9b0 <__mdiff+0x3c>
 800b98a:	4629      	mov	r1, r5
 800b98c:	4630      	mov	r0, r6
 800b98e:	f7ff fd63 	bl	800b458 <_Balloc>
 800b992:	4602      	mov	r2, r0
 800b994:	b928      	cbnz	r0, 800b9a2 <__mdiff+0x2e>
 800b996:	4b3f      	ldr	r3, [pc, #252]	@ (800ba94 <__mdiff+0x120>)
 800b998:	f240 2137 	movw	r1, #567	@ 0x237
 800b99c:	483e      	ldr	r0, [pc, #248]	@ (800ba98 <__mdiff+0x124>)
 800b99e:	f7fd ff3d 	bl	800981c <__assert_func>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	b003      	add	sp, #12
 800b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b0:	bfbc      	itt	lt
 800b9b2:	464b      	movlt	r3, r9
 800b9b4:	46a1      	movlt	r9, r4
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9bc:	bfba      	itte	lt
 800b9be:	461c      	movlt	r4, r3
 800b9c0:	2501      	movlt	r5, #1
 800b9c2:	2500      	movge	r5, #0
 800b9c4:	f7ff fd48 	bl	800b458 <_Balloc>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	b918      	cbnz	r0, 800b9d4 <__mdiff+0x60>
 800b9cc:	4b31      	ldr	r3, [pc, #196]	@ (800ba94 <__mdiff+0x120>)
 800b9ce:	f240 2145 	movw	r1, #581	@ 0x245
 800b9d2:	e7e3      	b.n	800b99c <__mdiff+0x28>
 800b9d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9d8:	6926      	ldr	r6, [r4, #16]
 800b9da:	60c5      	str	r5, [r0, #12]
 800b9dc:	f109 0310 	add.w	r3, r9, #16
 800b9e0:	f109 0514 	add.w	r5, r9, #20
 800b9e4:	f104 0e14 	add.w	lr, r4, #20
 800b9e8:	f100 0b14 	add.w	fp, r0, #20
 800b9ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	46d9      	mov	r9, fp
 800b9f8:	f04f 0c00 	mov.w	ip, #0
 800b9fc:	9b01      	ldr	r3, [sp, #4]
 800b9fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba02:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba06:	9301      	str	r3, [sp, #4]
 800ba08:	fa1f f38a 	uxth.w	r3, sl
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	b283      	uxth	r3, r0
 800ba10:	1acb      	subs	r3, r1, r3
 800ba12:	0c00      	lsrs	r0, r0, #16
 800ba14:	4463      	add	r3, ip
 800ba16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba24:	4576      	cmp	r6, lr
 800ba26:	f849 3b04 	str.w	r3, [r9], #4
 800ba2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba2e:	d8e5      	bhi.n	800b9fc <__mdiff+0x88>
 800ba30:	1b33      	subs	r3, r6, r4
 800ba32:	3b15      	subs	r3, #21
 800ba34:	f023 0303 	bic.w	r3, r3, #3
 800ba38:	3415      	adds	r4, #21
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	42a6      	cmp	r6, r4
 800ba3e:	bf38      	it	cc
 800ba40:	2304      	movcc	r3, #4
 800ba42:	441d      	add	r5, r3
 800ba44:	445b      	add	r3, fp
 800ba46:	461e      	mov	r6, r3
 800ba48:	462c      	mov	r4, r5
 800ba4a:	4544      	cmp	r4, r8
 800ba4c:	d30e      	bcc.n	800ba6c <__mdiff+0xf8>
 800ba4e:	f108 0103 	add.w	r1, r8, #3
 800ba52:	1b49      	subs	r1, r1, r5
 800ba54:	f021 0103 	bic.w	r1, r1, #3
 800ba58:	3d03      	subs	r5, #3
 800ba5a:	45a8      	cmp	r8, r5
 800ba5c:	bf38      	it	cc
 800ba5e:	2100      	movcc	r1, #0
 800ba60:	440b      	add	r3, r1
 800ba62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba66:	b191      	cbz	r1, 800ba8e <__mdiff+0x11a>
 800ba68:	6117      	str	r7, [r2, #16]
 800ba6a:	e79d      	b.n	800b9a8 <__mdiff+0x34>
 800ba6c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba70:	46e6      	mov	lr, ip
 800ba72:	0c08      	lsrs	r0, r1, #16
 800ba74:	fa1c fc81 	uxtah	ip, ip, r1
 800ba78:	4471      	add	r1, lr
 800ba7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba7e:	b289      	uxth	r1, r1
 800ba80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba84:	f846 1b04 	str.w	r1, [r6], #4
 800ba88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba8c:	e7dd      	b.n	800ba4a <__mdiff+0xd6>
 800ba8e:	3f01      	subs	r7, #1
 800ba90:	e7e7      	b.n	800ba62 <__mdiff+0xee>
 800ba92:	bf00      	nop
 800ba94:	0800d518 	.word	0x0800d518
 800ba98:	0800d529 	.word	0x0800d529

0800ba9c <__d2b>:
 800ba9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800baa0:	460f      	mov	r7, r1
 800baa2:	2101      	movs	r1, #1
 800baa4:	ec59 8b10 	vmov	r8, r9, d0
 800baa8:	4616      	mov	r6, r2
 800baaa:	f7ff fcd5 	bl	800b458 <_Balloc>
 800baae:	4604      	mov	r4, r0
 800bab0:	b930      	cbnz	r0, 800bac0 <__d2b+0x24>
 800bab2:	4602      	mov	r2, r0
 800bab4:	4b23      	ldr	r3, [pc, #140]	@ (800bb44 <__d2b+0xa8>)
 800bab6:	4824      	ldr	r0, [pc, #144]	@ (800bb48 <__d2b+0xac>)
 800bab8:	f240 310f 	movw	r1, #783	@ 0x30f
 800babc:	f7fd feae 	bl	800981c <__assert_func>
 800bac0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bac4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bac8:	b10d      	cbz	r5, 800bace <__d2b+0x32>
 800baca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	f1b8 0300 	subs.w	r3, r8, #0
 800bad4:	d023      	beq.n	800bb1e <__d2b+0x82>
 800bad6:	4668      	mov	r0, sp
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	f7ff fd84 	bl	800b5e6 <__lo0bits>
 800bade:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bae2:	b1d0      	cbz	r0, 800bb1a <__d2b+0x7e>
 800bae4:	f1c0 0320 	rsb	r3, r0, #32
 800bae8:	fa02 f303 	lsl.w	r3, r2, r3
 800baec:	430b      	orrs	r3, r1
 800baee:	40c2      	lsrs	r2, r0
 800baf0:	6163      	str	r3, [r4, #20]
 800baf2:	9201      	str	r2, [sp, #4]
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	61a3      	str	r3, [r4, #24]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	bf0c      	ite	eq
 800bafc:	2201      	moveq	r2, #1
 800bafe:	2202      	movne	r2, #2
 800bb00:	6122      	str	r2, [r4, #16]
 800bb02:	b1a5      	cbz	r5, 800bb2e <__d2b+0x92>
 800bb04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb08:	4405      	add	r5, r0
 800bb0a:	603d      	str	r5, [r7, #0]
 800bb0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb10:	6030      	str	r0, [r6, #0]
 800bb12:	4620      	mov	r0, r4
 800bb14:	b003      	add	sp, #12
 800bb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb1a:	6161      	str	r1, [r4, #20]
 800bb1c:	e7ea      	b.n	800baf4 <__d2b+0x58>
 800bb1e:	a801      	add	r0, sp, #4
 800bb20:	f7ff fd61 	bl	800b5e6 <__lo0bits>
 800bb24:	9b01      	ldr	r3, [sp, #4]
 800bb26:	6163      	str	r3, [r4, #20]
 800bb28:	3020      	adds	r0, #32
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	e7e8      	b.n	800bb00 <__d2b+0x64>
 800bb2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb36:	6038      	str	r0, [r7, #0]
 800bb38:	6918      	ldr	r0, [r3, #16]
 800bb3a:	f7ff fd35 	bl	800b5a8 <__hi0bits>
 800bb3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb42:	e7e5      	b.n	800bb10 <__d2b+0x74>
 800bb44:	0800d518 	.word	0x0800d518
 800bb48:	0800d529 	.word	0x0800d529

0800bb4c <__sfputc_r>:
 800bb4c:	6893      	ldr	r3, [r2, #8]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	b410      	push	{r4}
 800bb54:	6093      	str	r3, [r2, #8]
 800bb56:	da08      	bge.n	800bb6a <__sfputc_r+0x1e>
 800bb58:	6994      	ldr	r4, [r2, #24]
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	db01      	blt.n	800bb62 <__sfputc_r+0x16>
 800bb5e:	290a      	cmp	r1, #10
 800bb60:	d103      	bne.n	800bb6a <__sfputc_r+0x1e>
 800bb62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb66:	f000 ba41 	b.w	800bfec <__swbuf_r>
 800bb6a:	6813      	ldr	r3, [r2, #0]
 800bb6c:	1c58      	adds	r0, r3, #1
 800bb6e:	6010      	str	r0, [r2, #0]
 800bb70:	7019      	strb	r1, [r3, #0]
 800bb72:	4608      	mov	r0, r1
 800bb74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <__sfputs_r>:
 800bb7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	460f      	mov	r7, r1
 800bb80:	4614      	mov	r4, r2
 800bb82:	18d5      	adds	r5, r2, r3
 800bb84:	42ac      	cmp	r4, r5
 800bb86:	d101      	bne.n	800bb8c <__sfputs_r+0x12>
 800bb88:	2000      	movs	r0, #0
 800bb8a:	e007      	b.n	800bb9c <__sfputs_r+0x22>
 800bb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb90:	463a      	mov	r2, r7
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7ff ffda 	bl	800bb4c <__sfputc_r>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d1f3      	bne.n	800bb84 <__sfputs_r+0xa>
 800bb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bba0 <_vfiprintf_r>:
 800bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	460d      	mov	r5, r1
 800bba6:	b09d      	sub	sp, #116	@ 0x74
 800bba8:	4614      	mov	r4, r2
 800bbaa:	4698      	mov	r8, r3
 800bbac:	4606      	mov	r6, r0
 800bbae:	b118      	cbz	r0, 800bbb8 <_vfiprintf_r+0x18>
 800bbb0:	6a03      	ldr	r3, [r0, #32]
 800bbb2:	b90b      	cbnz	r3, 800bbb8 <_vfiprintf_r+0x18>
 800bbb4:	f7fe fb32 	bl	800a21c <__sinit>
 800bbb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbba:	07d9      	lsls	r1, r3, #31
 800bbbc:	d405      	bmi.n	800bbca <_vfiprintf_r+0x2a>
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	059a      	lsls	r2, r3, #22
 800bbc2:	d402      	bmi.n	800bbca <_vfiprintf_r+0x2a>
 800bbc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbc6:	f7fe fce6 	bl	800a596 <__retarget_lock_acquire_recursive>
 800bbca:	89ab      	ldrh	r3, [r5, #12]
 800bbcc:	071b      	lsls	r3, r3, #28
 800bbce:	d501      	bpl.n	800bbd4 <_vfiprintf_r+0x34>
 800bbd0:	692b      	ldr	r3, [r5, #16]
 800bbd2:	b99b      	cbnz	r3, 800bbfc <_vfiprintf_r+0x5c>
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f000 fa46 	bl	800c068 <__swsetup_r>
 800bbdc:	b170      	cbz	r0, 800bbfc <_vfiprintf_r+0x5c>
 800bbde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbe0:	07dc      	lsls	r4, r3, #31
 800bbe2:	d504      	bpl.n	800bbee <_vfiprintf_r+0x4e>
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbe8:	b01d      	add	sp, #116	@ 0x74
 800bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	0598      	lsls	r0, r3, #22
 800bbf2:	d4f7      	bmi.n	800bbe4 <_vfiprintf_r+0x44>
 800bbf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbf6:	f7fe fccf 	bl	800a598 <__retarget_lock_release_recursive>
 800bbfa:	e7f3      	b.n	800bbe4 <_vfiprintf_r+0x44>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc00:	2320      	movs	r3, #32
 800bc02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc06:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc0a:	2330      	movs	r3, #48	@ 0x30
 800bc0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bdbc <_vfiprintf_r+0x21c>
 800bc10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc14:	f04f 0901 	mov.w	r9, #1
 800bc18:	4623      	mov	r3, r4
 800bc1a:	469a      	mov	sl, r3
 800bc1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc20:	b10a      	cbz	r2, 800bc26 <_vfiprintf_r+0x86>
 800bc22:	2a25      	cmp	r2, #37	@ 0x25
 800bc24:	d1f9      	bne.n	800bc1a <_vfiprintf_r+0x7a>
 800bc26:	ebba 0b04 	subs.w	fp, sl, r4
 800bc2a:	d00b      	beq.n	800bc44 <_vfiprintf_r+0xa4>
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	4622      	mov	r2, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7ff ffa1 	bl	800bb7a <__sfputs_r>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	f000 80a7 	beq.w	800bd8c <_vfiprintf_r+0x1ec>
 800bc3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc40:	445a      	add	r2, fp
 800bc42:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc44:	f89a 3000 	ldrb.w	r3, [sl]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 809f 	beq.w	800bd8c <_vfiprintf_r+0x1ec>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc58:	f10a 0a01 	add.w	sl, sl, #1
 800bc5c:	9304      	str	r3, [sp, #16]
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc64:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc66:	4654      	mov	r4, sl
 800bc68:	2205      	movs	r2, #5
 800bc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6e:	4853      	ldr	r0, [pc, #332]	@ (800bdbc <_vfiprintf_r+0x21c>)
 800bc70:	f7f5 f9e6 	bl	8001040 <memchr>
 800bc74:	9a04      	ldr	r2, [sp, #16]
 800bc76:	b9d8      	cbnz	r0, 800bcb0 <_vfiprintf_r+0x110>
 800bc78:	06d1      	lsls	r1, r2, #27
 800bc7a:	bf44      	itt	mi
 800bc7c:	2320      	movmi	r3, #32
 800bc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc82:	0713      	lsls	r3, r2, #28
 800bc84:	bf44      	itt	mi
 800bc86:	232b      	movmi	r3, #43	@ 0x2b
 800bc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc90:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc92:	d015      	beq.n	800bcc0 <_vfiprintf_r+0x120>
 800bc94:	9a07      	ldr	r2, [sp, #28]
 800bc96:	4654      	mov	r4, sl
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f04f 0c0a 	mov.w	ip, #10
 800bc9e:	4621      	mov	r1, r4
 800bca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca4:	3b30      	subs	r3, #48	@ 0x30
 800bca6:	2b09      	cmp	r3, #9
 800bca8:	d94b      	bls.n	800bd42 <_vfiprintf_r+0x1a2>
 800bcaa:	b1b0      	cbz	r0, 800bcda <_vfiprintf_r+0x13a>
 800bcac:	9207      	str	r2, [sp, #28]
 800bcae:	e014      	b.n	800bcda <_vfiprintf_r+0x13a>
 800bcb0:	eba0 0308 	sub.w	r3, r0, r8
 800bcb4:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	46a2      	mov	sl, r4
 800bcbe:	e7d2      	b.n	800bc66 <_vfiprintf_r+0xc6>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	1d19      	adds	r1, r3, #4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	9103      	str	r1, [sp, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	bfbb      	ittet	lt
 800bccc:	425b      	neglt	r3, r3
 800bcce:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd2:	9307      	strge	r3, [sp, #28]
 800bcd4:	9307      	strlt	r3, [sp, #28]
 800bcd6:	bfb8      	it	lt
 800bcd8:	9204      	strlt	r2, [sp, #16]
 800bcda:	7823      	ldrb	r3, [r4, #0]
 800bcdc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcde:	d10a      	bne.n	800bcf6 <_vfiprintf_r+0x156>
 800bce0:	7863      	ldrb	r3, [r4, #1]
 800bce2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bce4:	d132      	bne.n	800bd4c <_vfiprintf_r+0x1ac>
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	1d1a      	adds	r2, r3, #4
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	9203      	str	r2, [sp, #12]
 800bcee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcf2:	3402      	adds	r4, #2
 800bcf4:	9305      	str	r3, [sp, #20]
 800bcf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bdcc <_vfiprintf_r+0x22c>
 800bcfa:	7821      	ldrb	r1, [r4, #0]
 800bcfc:	2203      	movs	r2, #3
 800bcfe:	4650      	mov	r0, sl
 800bd00:	f7f5 f99e 	bl	8001040 <memchr>
 800bd04:	b138      	cbz	r0, 800bd16 <_vfiprintf_r+0x176>
 800bd06:	9b04      	ldr	r3, [sp, #16]
 800bd08:	eba0 000a 	sub.w	r0, r0, sl
 800bd0c:	2240      	movs	r2, #64	@ 0x40
 800bd0e:	4082      	lsls	r2, r0
 800bd10:	4313      	orrs	r3, r2
 800bd12:	3401      	adds	r4, #1
 800bd14:	9304      	str	r3, [sp, #16]
 800bd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd1a:	4829      	ldr	r0, [pc, #164]	@ (800bdc0 <_vfiprintf_r+0x220>)
 800bd1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd20:	2206      	movs	r2, #6
 800bd22:	f7f5 f98d 	bl	8001040 <memchr>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d03f      	beq.n	800bdaa <_vfiprintf_r+0x20a>
 800bd2a:	4b26      	ldr	r3, [pc, #152]	@ (800bdc4 <_vfiprintf_r+0x224>)
 800bd2c:	bb1b      	cbnz	r3, 800bd76 <_vfiprintf_r+0x1d6>
 800bd2e:	9b03      	ldr	r3, [sp, #12]
 800bd30:	3307      	adds	r3, #7
 800bd32:	f023 0307 	bic.w	r3, r3, #7
 800bd36:	3308      	adds	r3, #8
 800bd38:	9303      	str	r3, [sp, #12]
 800bd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3c:	443b      	add	r3, r7
 800bd3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd40:	e76a      	b.n	800bc18 <_vfiprintf_r+0x78>
 800bd42:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd46:	460c      	mov	r4, r1
 800bd48:	2001      	movs	r0, #1
 800bd4a:	e7a8      	b.n	800bc9e <_vfiprintf_r+0xfe>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	3401      	adds	r4, #1
 800bd50:	9305      	str	r3, [sp, #20]
 800bd52:	4619      	mov	r1, r3
 800bd54:	f04f 0c0a 	mov.w	ip, #10
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd5e:	3a30      	subs	r2, #48	@ 0x30
 800bd60:	2a09      	cmp	r2, #9
 800bd62:	d903      	bls.n	800bd6c <_vfiprintf_r+0x1cc>
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d0c6      	beq.n	800bcf6 <_vfiprintf_r+0x156>
 800bd68:	9105      	str	r1, [sp, #20]
 800bd6a:	e7c4      	b.n	800bcf6 <_vfiprintf_r+0x156>
 800bd6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd70:	4604      	mov	r4, r0
 800bd72:	2301      	movs	r3, #1
 800bd74:	e7f0      	b.n	800bd58 <_vfiprintf_r+0x1b8>
 800bd76:	ab03      	add	r3, sp, #12
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	462a      	mov	r2, r5
 800bd7c:	4b12      	ldr	r3, [pc, #72]	@ (800bdc8 <_vfiprintf_r+0x228>)
 800bd7e:	a904      	add	r1, sp, #16
 800bd80:	4630      	mov	r0, r6
 800bd82:	f7fd fe09 	bl	8009998 <_printf_float>
 800bd86:	4607      	mov	r7, r0
 800bd88:	1c78      	adds	r0, r7, #1
 800bd8a:	d1d6      	bne.n	800bd3a <_vfiprintf_r+0x19a>
 800bd8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd8e:	07d9      	lsls	r1, r3, #31
 800bd90:	d405      	bmi.n	800bd9e <_vfiprintf_r+0x1fe>
 800bd92:	89ab      	ldrh	r3, [r5, #12]
 800bd94:	059a      	lsls	r2, r3, #22
 800bd96:	d402      	bmi.n	800bd9e <_vfiprintf_r+0x1fe>
 800bd98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd9a:	f7fe fbfd 	bl	800a598 <__retarget_lock_release_recursive>
 800bd9e:	89ab      	ldrh	r3, [r5, #12]
 800bda0:	065b      	lsls	r3, r3, #25
 800bda2:	f53f af1f 	bmi.w	800bbe4 <_vfiprintf_r+0x44>
 800bda6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bda8:	e71e      	b.n	800bbe8 <_vfiprintf_r+0x48>
 800bdaa:	ab03      	add	r3, sp, #12
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	462a      	mov	r2, r5
 800bdb0:	4b05      	ldr	r3, [pc, #20]	@ (800bdc8 <_vfiprintf_r+0x228>)
 800bdb2:	a904      	add	r1, sp, #16
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	f7fe f887 	bl	8009ec8 <_printf_i>
 800bdba:	e7e4      	b.n	800bd86 <_vfiprintf_r+0x1e6>
 800bdbc:	0800d582 	.word	0x0800d582
 800bdc0:	0800d58c 	.word	0x0800d58c
 800bdc4:	08009999 	.word	0x08009999
 800bdc8:	0800bb7b 	.word	0x0800bb7b
 800bdcc:	0800d588 	.word	0x0800d588

0800bdd0 <__sflush_r>:
 800bdd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd8:	0716      	lsls	r6, r2, #28
 800bdda:	4605      	mov	r5, r0
 800bddc:	460c      	mov	r4, r1
 800bdde:	d454      	bmi.n	800be8a <__sflush_r+0xba>
 800bde0:	684b      	ldr	r3, [r1, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dc02      	bgt.n	800bdec <__sflush_r+0x1c>
 800bde6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	dd48      	ble.n	800be7e <__sflush_r+0xae>
 800bdec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdee:	2e00      	cmp	r6, #0
 800bdf0:	d045      	beq.n	800be7e <__sflush_r+0xae>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bdf8:	682f      	ldr	r7, [r5, #0]
 800bdfa:	6a21      	ldr	r1, [r4, #32]
 800bdfc:	602b      	str	r3, [r5, #0]
 800bdfe:	d030      	beq.n	800be62 <__sflush_r+0x92>
 800be00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	0759      	lsls	r1, r3, #29
 800be06:	d505      	bpl.n	800be14 <__sflush_r+0x44>
 800be08:	6863      	ldr	r3, [r4, #4]
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be0e:	b10b      	cbz	r3, 800be14 <__sflush_r+0x44>
 800be10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be12:	1ad2      	subs	r2, r2, r3
 800be14:	2300      	movs	r3, #0
 800be16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be18:	6a21      	ldr	r1, [r4, #32]
 800be1a:	4628      	mov	r0, r5
 800be1c:	47b0      	blx	r6
 800be1e:	1c43      	adds	r3, r0, #1
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	d106      	bne.n	800be32 <__sflush_r+0x62>
 800be24:	6829      	ldr	r1, [r5, #0]
 800be26:	291d      	cmp	r1, #29
 800be28:	d82b      	bhi.n	800be82 <__sflush_r+0xb2>
 800be2a:	4a2a      	ldr	r2, [pc, #168]	@ (800bed4 <__sflush_r+0x104>)
 800be2c:	40ca      	lsrs	r2, r1
 800be2e:	07d6      	lsls	r6, r2, #31
 800be30:	d527      	bpl.n	800be82 <__sflush_r+0xb2>
 800be32:	2200      	movs	r2, #0
 800be34:	6062      	str	r2, [r4, #4]
 800be36:	04d9      	lsls	r1, r3, #19
 800be38:	6922      	ldr	r2, [r4, #16]
 800be3a:	6022      	str	r2, [r4, #0]
 800be3c:	d504      	bpl.n	800be48 <__sflush_r+0x78>
 800be3e:	1c42      	adds	r2, r0, #1
 800be40:	d101      	bne.n	800be46 <__sflush_r+0x76>
 800be42:	682b      	ldr	r3, [r5, #0]
 800be44:	b903      	cbnz	r3, 800be48 <__sflush_r+0x78>
 800be46:	6560      	str	r0, [r4, #84]	@ 0x54
 800be48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be4a:	602f      	str	r7, [r5, #0]
 800be4c:	b1b9      	cbz	r1, 800be7e <__sflush_r+0xae>
 800be4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be52:	4299      	cmp	r1, r3
 800be54:	d002      	beq.n	800be5c <__sflush_r+0x8c>
 800be56:	4628      	mov	r0, r5
 800be58:	f7ff f9fe 	bl	800b258 <_free_r>
 800be5c:	2300      	movs	r3, #0
 800be5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800be60:	e00d      	b.n	800be7e <__sflush_r+0xae>
 800be62:	2301      	movs	r3, #1
 800be64:	4628      	mov	r0, r5
 800be66:	47b0      	blx	r6
 800be68:	4602      	mov	r2, r0
 800be6a:	1c50      	adds	r0, r2, #1
 800be6c:	d1c9      	bne.n	800be02 <__sflush_r+0x32>
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0c6      	beq.n	800be02 <__sflush_r+0x32>
 800be74:	2b1d      	cmp	r3, #29
 800be76:	d001      	beq.n	800be7c <__sflush_r+0xac>
 800be78:	2b16      	cmp	r3, #22
 800be7a:	d11e      	bne.n	800beba <__sflush_r+0xea>
 800be7c:	602f      	str	r7, [r5, #0]
 800be7e:	2000      	movs	r0, #0
 800be80:	e022      	b.n	800bec8 <__sflush_r+0xf8>
 800be82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be86:	b21b      	sxth	r3, r3
 800be88:	e01b      	b.n	800bec2 <__sflush_r+0xf2>
 800be8a:	690f      	ldr	r7, [r1, #16]
 800be8c:	2f00      	cmp	r7, #0
 800be8e:	d0f6      	beq.n	800be7e <__sflush_r+0xae>
 800be90:	0793      	lsls	r3, r2, #30
 800be92:	680e      	ldr	r6, [r1, #0]
 800be94:	bf08      	it	eq
 800be96:	694b      	ldreq	r3, [r1, #20]
 800be98:	600f      	str	r7, [r1, #0]
 800be9a:	bf18      	it	ne
 800be9c:	2300      	movne	r3, #0
 800be9e:	eba6 0807 	sub.w	r8, r6, r7
 800bea2:	608b      	str	r3, [r1, #8]
 800bea4:	f1b8 0f00 	cmp.w	r8, #0
 800bea8:	dde9      	ble.n	800be7e <__sflush_r+0xae>
 800beaa:	6a21      	ldr	r1, [r4, #32]
 800beac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800beae:	4643      	mov	r3, r8
 800beb0:	463a      	mov	r2, r7
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b0      	blx	r6
 800beb6:	2800      	cmp	r0, #0
 800beb8:	dc08      	bgt.n	800becc <__sflush_r+0xfc>
 800beba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bec2:	81a3      	strh	r3, [r4, #12]
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800becc:	4407      	add	r7, r0
 800bece:	eba8 0800 	sub.w	r8, r8, r0
 800bed2:	e7e7      	b.n	800bea4 <__sflush_r+0xd4>
 800bed4:	20400001 	.word	0x20400001

0800bed8 <_fflush_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	690b      	ldr	r3, [r1, #16]
 800bedc:	4605      	mov	r5, r0
 800bede:	460c      	mov	r4, r1
 800bee0:	b913      	cbnz	r3, 800bee8 <_fflush_r+0x10>
 800bee2:	2500      	movs	r5, #0
 800bee4:	4628      	mov	r0, r5
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	b118      	cbz	r0, 800bef2 <_fflush_r+0x1a>
 800beea:	6a03      	ldr	r3, [r0, #32]
 800beec:	b90b      	cbnz	r3, 800bef2 <_fflush_r+0x1a>
 800beee:	f7fe f995 	bl	800a21c <__sinit>
 800bef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d0f3      	beq.n	800bee2 <_fflush_r+0xa>
 800befa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800befc:	07d0      	lsls	r0, r2, #31
 800befe:	d404      	bmi.n	800bf0a <_fflush_r+0x32>
 800bf00:	0599      	lsls	r1, r3, #22
 800bf02:	d402      	bmi.n	800bf0a <_fflush_r+0x32>
 800bf04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf06:	f7fe fb46 	bl	800a596 <__retarget_lock_acquire_recursive>
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	f7ff ff5f 	bl	800bdd0 <__sflush_r>
 800bf12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf14:	07da      	lsls	r2, r3, #31
 800bf16:	4605      	mov	r5, r0
 800bf18:	d4e4      	bmi.n	800bee4 <_fflush_r+0xc>
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	059b      	lsls	r3, r3, #22
 800bf1e:	d4e1      	bmi.n	800bee4 <_fflush_r+0xc>
 800bf20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf22:	f7fe fb39 	bl	800a598 <__retarget_lock_release_recursive>
 800bf26:	e7dd      	b.n	800bee4 <_fflush_r+0xc>

0800bf28 <__swhatbuf_r>:
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf30:	2900      	cmp	r1, #0
 800bf32:	b096      	sub	sp, #88	@ 0x58
 800bf34:	4615      	mov	r5, r2
 800bf36:	461e      	mov	r6, r3
 800bf38:	da0d      	bge.n	800bf56 <__swhatbuf_r+0x2e>
 800bf3a:	89a3      	ldrh	r3, [r4, #12]
 800bf3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf40:	f04f 0100 	mov.w	r1, #0
 800bf44:	bf14      	ite	ne
 800bf46:	2340      	movne	r3, #64	@ 0x40
 800bf48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	6031      	str	r1, [r6, #0]
 800bf50:	602b      	str	r3, [r5, #0]
 800bf52:	b016      	add	sp, #88	@ 0x58
 800bf54:	bd70      	pop	{r4, r5, r6, pc}
 800bf56:	466a      	mov	r2, sp
 800bf58:	f000 f90c 	bl	800c174 <_fstat_r>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	dbec      	blt.n	800bf3a <__swhatbuf_r+0x12>
 800bf60:	9901      	ldr	r1, [sp, #4]
 800bf62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf6a:	4259      	negs	r1, r3
 800bf6c:	4159      	adcs	r1, r3
 800bf6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf72:	e7eb      	b.n	800bf4c <__swhatbuf_r+0x24>

0800bf74 <__smakebuf_r>:
 800bf74:	898b      	ldrh	r3, [r1, #12]
 800bf76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf78:	079d      	lsls	r5, r3, #30
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	d507      	bpl.n	800bf90 <__smakebuf_r+0x1c>
 800bf80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	6123      	str	r3, [r4, #16]
 800bf88:	2301      	movs	r3, #1
 800bf8a:	6163      	str	r3, [r4, #20]
 800bf8c:	b003      	add	sp, #12
 800bf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf90:	ab01      	add	r3, sp, #4
 800bf92:	466a      	mov	r2, sp
 800bf94:	f7ff ffc8 	bl	800bf28 <__swhatbuf_r>
 800bf98:	9f00      	ldr	r7, [sp, #0]
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	4639      	mov	r1, r7
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f7ff f9ce 	bl	800b340 <_malloc_r>
 800bfa4:	b948      	cbnz	r0, 800bfba <__smakebuf_r+0x46>
 800bfa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfaa:	059a      	lsls	r2, r3, #22
 800bfac:	d4ee      	bmi.n	800bf8c <__smakebuf_r+0x18>
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	f043 0302 	orr.w	r3, r3, #2
 800bfb6:	81a3      	strh	r3, [r4, #12]
 800bfb8:	e7e2      	b.n	800bf80 <__smakebuf_r+0xc>
 800bfba:	89a3      	ldrh	r3, [r4, #12]
 800bfbc:	6020      	str	r0, [r4, #0]
 800bfbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfc2:	81a3      	strh	r3, [r4, #12]
 800bfc4:	9b01      	ldr	r3, [sp, #4]
 800bfc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bfca:	b15b      	cbz	r3, 800bfe4 <__smakebuf_r+0x70>
 800bfcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f000 f8e1 	bl	800c198 <_isatty_r>
 800bfd6:	b128      	cbz	r0, 800bfe4 <__smakebuf_r+0x70>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	f023 0303 	bic.w	r3, r3, #3
 800bfde:	f043 0301 	orr.w	r3, r3, #1
 800bfe2:	81a3      	strh	r3, [r4, #12]
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	431d      	orrs	r5, r3
 800bfe8:	81a5      	strh	r5, [r4, #12]
 800bfea:	e7cf      	b.n	800bf8c <__smakebuf_r+0x18>

0800bfec <__swbuf_r>:
 800bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfee:	460e      	mov	r6, r1
 800bff0:	4614      	mov	r4, r2
 800bff2:	4605      	mov	r5, r0
 800bff4:	b118      	cbz	r0, 800bffe <__swbuf_r+0x12>
 800bff6:	6a03      	ldr	r3, [r0, #32]
 800bff8:	b90b      	cbnz	r3, 800bffe <__swbuf_r+0x12>
 800bffa:	f7fe f90f 	bl	800a21c <__sinit>
 800bffe:	69a3      	ldr	r3, [r4, #24]
 800c000:	60a3      	str	r3, [r4, #8]
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	071a      	lsls	r2, r3, #28
 800c006:	d501      	bpl.n	800c00c <__swbuf_r+0x20>
 800c008:	6923      	ldr	r3, [r4, #16]
 800c00a:	b943      	cbnz	r3, 800c01e <__swbuf_r+0x32>
 800c00c:	4621      	mov	r1, r4
 800c00e:	4628      	mov	r0, r5
 800c010:	f000 f82a 	bl	800c068 <__swsetup_r>
 800c014:	b118      	cbz	r0, 800c01e <__swbuf_r+0x32>
 800c016:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c01a:	4638      	mov	r0, r7
 800c01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	6922      	ldr	r2, [r4, #16]
 800c022:	1a98      	subs	r0, r3, r2
 800c024:	6963      	ldr	r3, [r4, #20]
 800c026:	b2f6      	uxtb	r6, r6
 800c028:	4283      	cmp	r3, r0
 800c02a:	4637      	mov	r7, r6
 800c02c:	dc05      	bgt.n	800c03a <__swbuf_r+0x4e>
 800c02e:	4621      	mov	r1, r4
 800c030:	4628      	mov	r0, r5
 800c032:	f7ff ff51 	bl	800bed8 <_fflush_r>
 800c036:	2800      	cmp	r0, #0
 800c038:	d1ed      	bne.n	800c016 <__swbuf_r+0x2a>
 800c03a:	68a3      	ldr	r3, [r4, #8]
 800c03c:	3b01      	subs	r3, #1
 800c03e:	60a3      	str	r3, [r4, #8]
 800c040:	6823      	ldr	r3, [r4, #0]
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	6022      	str	r2, [r4, #0]
 800c046:	701e      	strb	r6, [r3, #0]
 800c048:	6962      	ldr	r2, [r4, #20]
 800c04a:	1c43      	adds	r3, r0, #1
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d004      	beq.n	800c05a <__swbuf_r+0x6e>
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	07db      	lsls	r3, r3, #31
 800c054:	d5e1      	bpl.n	800c01a <__swbuf_r+0x2e>
 800c056:	2e0a      	cmp	r6, #10
 800c058:	d1df      	bne.n	800c01a <__swbuf_r+0x2e>
 800c05a:	4621      	mov	r1, r4
 800c05c:	4628      	mov	r0, r5
 800c05e:	f7ff ff3b 	bl	800bed8 <_fflush_r>
 800c062:	2800      	cmp	r0, #0
 800c064:	d0d9      	beq.n	800c01a <__swbuf_r+0x2e>
 800c066:	e7d6      	b.n	800c016 <__swbuf_r+0x2a>

0800c068 <__swsetup_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4b29      	ldr	r3, [pc, #164]	@ (800c110 <__swsetup_r+0xa8>)
 800c06c:	4605      	mov	r5, r0
 800c06e:	6818      	ldr	r0, [r3, #0]
 800c070:	460c      	mov	r4, r1
 800c072:	b118      	cbz	r0, 800c07c <__swsetup_r+0x14>
 800c074:	6a03      	ldr	r3, [r0, #32]
 800c076:	b90b      	cbnz	r3, 800c07c <__swsetup_r+0x14>
 800c078:	f7fe f8d0 	bl	800a21c <__sinit>
 800c07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c080:	0719      	lsls	r1, r3, #28
 800c082:	d422      	bmi.n	800c0ca <__swsetup_r+0x62>
 800c084:	06da      	lsls	r2, r3, #27
 800c086:	d407      	bmi.n	800c098 <__swsetup_r+0x30>
 800c088:	2209      	movs	r2, #9
 800c08a:	602a      	str	r2, [r5, #0]
 800c08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c090:	81a3      	strh	r3, [r4, #12]
 800c092:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c096:	e033      	b.n	800c100 <__swsetup_r+0x98>
 800c098:	0758      	lsls	r0, r3, #29
 800c09a:	d512      	bpl.n	800c0c2 <__swsetup_r+0x5a>
 800c09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c09e:	b141      	cbz	r1, 800c0b2 <__swsetup_r+0x4a>
 800c0a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0a4:	4299      	cmp	r1, r3
 800c0a6:	d002      	beq.n	800c0ae <__swsetup_r+0x46>
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f7ff f8d5 	bl	800b258 <_free_r>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0b2:	89a3      	ldrh	r3, [r4, #12]
 800c0b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	6063      	str	r3, [r4, #4]
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	f043 0308 	orr.w	r3, r3, #8
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	6923      	ldr	r3, [r4, #16]
 800c0cc:	b94b      	cbnz	r3, 800c0e2 <__swsetup_r+0x7a>
 800c0ce:	89a3      	ldrh	r3, [r4, #12]
 800c0d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0d8:	d003      	beq.n	800c0e2 <__swsetup_r+0x7a>
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f7ff ff49 	bl	800bf74 <__smakebuf_r>
 800c0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0e6:	f013 0201 	ands.w	r2, r3, #1
 800c0ea:	d00a      	beq.n	800c102 <__swsetup_r+0x9a>
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	60a2      	str	r2, [r4, #8]
 800c0f0:	6962      	ldr	r2, [r4, #20]
 800c0f2:	4252      	negs	r2, r2
 800c0f4:	61a2      	str	r2, [r4, #24]
 800c0f6:	6922      	ldr	r2, [r4, #16]
 800c0f8:	b942      	cbnz	r2, 800c10c <__swsetup_r+0xa4>
 800c0fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c0fe:	d1c5      	bne.n	800c08c <__swsetup_r+0x24>
 800c100:	bd38      	pop	{r3, r4, r5, pc}
 800c102:	0799      	lsls	r1, r3, #30
 800c104:	bf58      	it	pl
 800c106:	6962      	ldrpl	r2, [r4, #20]
 800c108:	60a2      	str	r2, [r4, #8]
 800c10a:	e7f4      	b.n	800c0f6 <__swsetup_r+0x8e>
 800c10c:	2000      	movs	r0, #0
 800c10e:	e7f7      	b.n	800c100 <__swsetup_r+0x98>
 800c110:	20000044 	.word	0x20000044

0800c114 <_raise_r>:
 800c114:	291f      	cmp	r1, #31
 800c116:	b538      	push	{r3, r4, r5, lr}
 800c118:	4605      	mov	r5, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	d904      	bls.n	800c128 <_raise_r+0x14>
 800c11e:	2316      	movs	r3, #22
 800c120:	6003      	str	r3, [r0, #0]
 800c122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c12a:	b112      	cbz	r2, 800c132 <_raise_r+0x1e>
 800c12c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c130:	b94b      	cbnz	r3, 800c146 <_raise_r+0x32>
 800c132:	4628      	mov	r0, r5
 800c134:	f000 f852 	bl	800c1dc <_getpid_r>
 800c138:	4622      	mov	r2, r4
 800c13a:	4601      	mov	r1, r0
 800c13c:	4628      	mov	r0, r5
 800c13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c142:	f000 b839 	b.w	800c1b8 <_kill_r>
 800c146:	2b01      	cmp	r3, #1
 800c148:	d00a      	beq.n	800c160 <_raise_r+0x4c>
 800c14a:	1c59      	adds	r1, r3, #1
 800c14c:	d103      	bne.n	800c156 <_raise_r+0x42>
 800c14e:	2316      	movs	r3, #22
 800c150:	6003      	str	r3, [r0, #0]
 800c152:	2001      	movs	r0, #1
 800c154:	e7e7      	b.n	800c126 <_raise_r+0x12>
 800c156:	2100      	movs	r1, #0
 800c158:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c15c:	4620      	mov	r0, r4
 800c15e:	4798      	blx	r3
 800c160:	2000      	movs	r0, #0
 800c162:	e7e0      	b.n	800c126 <_raise_r+0x12>

0800c164 <raise>:
 800c164:	4b02      	ldr	r3, [pc, #8]	@ (800c170 <raise+0xc>)
 800c166:	4601      	mov	r1, r0
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	f7ff bfd3 	b.w	800c114 <_raise_r>
 800c16e:	bf00      	nop
 800c170:	20000044 	.word	0x20000044

0800c174 <_fstat_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	4d07      	ldr	r5, [pc, #28]	@ (800c194 <_fstat_r+0x20>)
 800c178:	2300      	movs	r3, #0
 800c17a:	4604      	mov	r4, r0
 800c17c:	4608      	mov	r0, r1
 800c17e:	4611      	mov	r1, r2
 800c180:	602b      	str	r3, [r5, #0]
 800c182:	f7f6 fbeb 	bl	800295c <_fstat>
 800c186:	1c43      	adds	r3, r0, #1
 800c188:	d102      	bne.n	800c190 <_fstat_r+0x1c>
 800c18a:	682b      	ldr	r3, [r5, #0]
 800c18c:	b103      	cbz	r3, 800c190 <_fstat_r+0x1c>
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	bd38      	pop	{r3, r4, r5, pc}
 800c192:	bf00      	nop
 800c194:	20004144 	.word	0x20004144

0800c198 <_isatty_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	4d06      	ldr	r5, [pc, #24]	@ (800c1b4 <_isatty_r+0x1c>)
 800c19c:	2300      	movs	r3, #0
 800c19e:	4604      	mov	r4, r0
 800c1a0:	4608      	mov	r0, r1
 800c1a2:	602b      	str	r3, [r5, #0]
 800c1a4:	f000 f90c 	bl	800c3c0 <_isatty>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	d102      	bne.n	800c1b2 <_isatty_r+0x1a>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	b103      	cbz	r3, 800c1b2 <_isatty_r+0x1a>
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	20004144 	.word	0x20004144

0800c1b8 <_kill_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4d07      	ldr	r5, [pc, #28]	@ (800c1d8 <_kill_r+0x20>)
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4604      	mov	r4, r0
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	602b      	str	r3, [r5, #0]
 800c1c6:	f7f6 fbae 	bl	8002926 <_kill>
 800c1ca:	1c43      	adds	r3, r0, #1
 800c1cc:	d102      	bne.n	800c1d4 <_kill_r+0x1c>
 800c1ce:	682b      	ldr	r3, [r5, #0]
 800c1d0:	b103      	cbz	r3, 800c1d4 <_kill_r+0x1c>
 800c1d2:	6023      	str	r3, [r4, #0]
 800c1d4:	bd38      	pop	{r3, r4, r5, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20004144 	.word	0x20004144

0800c1dc <_getpid_r>:
 800c1dc:	f7f6 bb9b 	b.w	8002916 <_getpid>

0800c1e0 <_sbrk_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	4d06      	ldr	r5, [pc, #24]	@ (800c1fc <_sbrk_r+0x1c>)
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	4608      	mov	r0, r1
 800c1ea:	602b      	str	r3, [r5, #0]
 800c1ec:	f7f6 fbc6 	bl	800297c <_sbrk>
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	d102      	bne.n	800c1fa <_sbrk_r+0x1a>
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	b103      	cbz	r3, 800c1fa <_sbrk_r+0x1a>
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	20004144 	.word	0x20004144

0800c200 <memcpy>:
 800c200:	440a      	add	r2, r1
 800c202:	4291      	cmp	r1, r2
 800c204:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c208:	d100      	bne.n	800c20c <memcpy+0xc>
 800c20a:	4770      	bx	lr
 800c20c:	b510      	push	{r4, lr}
 800c20e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c212:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c216:	4291      	cmp	r1, r2
 800c218:	d1f9      	bne.n	800c20e <memcpy+0xe>
 800c21a:	bd10      	pop	{r4, pc}

0800c21c <_calloc_r>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	fba1 5402 	umull	r5, r4, r1, r2
 800c222:	b934      	cbnz	r4, 800c232 <_calloc_r+0x16>
 800c224:	4629      	mov	r1, r5
 800c226:	f7ff f88b 	bl	800b340 <_malloc_r>
 800c22a:	4606      	mov	r6, r0
 800c22c:	b928      	cbnz	r0, 800c23a <_calloc_r+0x1e>
 800c22e:	4630      	mov	r0, r6
 800c230:	bd70      	pop	{r4, r5, r6, pc}
 800c232:	220c      	movs	r2, #12
 800c234:	6002      	str	r2, [r0, #0]
 800c236:	2600      	movs	r6, #0
 800c238:	e7f9      	b.n	800c22e <_calloc_r+0x12>
 800c23a:	462a      	mov	r2, r5
 800c23c:	4621      	mov	r1, r4
 800c23e:	f7fe f92c 	bl	800a49a <memset>
 800c242:	e7f4      	b.n	800c22e <_calloc_r+0x12>

0800c244 <__ascii_mbtowc>:
 800c244:	b082      	sub	sp, #8
 800c246:	b901      	cbnz	r1, 800c24a <__ascii_mbtowc+0x6>
 800c248:	a901      	add	r1, sp, #4
 800c24a:	b142      	cbz	r2, 800c25e <__ascii_mbtowc+0x1a>
 800c24c:	b14b      	cbz	r3, 800c262 <__ascii_mbtowc+0x1e>
 800c24e:	7813      	ldrb	r3, [r2, #0]
 800c250:	600b      	str	r3, [r1, #0]
 800c252:	7812      	ldrb	r2, [r2, #0]
 800c254:	1e10      	subs	r0, r2, #0
 800c256:	bf18      	it	ne
 800c258:	2001      	movne	r0, #1
 800c25a:	b002      	add	sp, #8
 800c25c:	4770      	bx	lr
 800c25e:	4610      	mov	r0, r2
 800c260:	e7fb      	b.n	800c25a <__ascii_mbtowc+0x16>
 800c262:	f06f 0001 	mvn.w	r0, #1
 800c266:	e7f8      	b.n	800c25a <__ascii_mbtowc+0x16>

0800c268 <__ascii_wctomb>:
 800c268:	4603      	mov	r3, r0
 800c26a:	4608      	mov	r0, r1
 800c26c:	b141      	cbz	r1, 800c280 <__ascii_wctomb+0x18>
 800c26e:	2aff      	cmp	r2, #255	@ 0xff
 800c270:	d904      	bls.n	800c27c <__ascii_wctomb+0x14>
 800c272:	228a      	movs	r2, #138	@ 0x8a
 800c274:	601a      	str	r2, [r3, #0]
 800c276:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c27a:	4770      	bx	lr
 800c27c:	700a      	strb	r2, [r1, #0]
 800c27e:	2001      	movs	r0, #1
 800c280:	4770      	bx	lr
	...

0800c284 <findslot>:
 800c284:	4b0a      	ldr	r3, [pc, #40]	@ (800c2b0 <findslot+0x2c>)
 800c286:	b510      	push	{r4, lr}
 800c288:	4604      	mov	r4, r0
 800c28a:	6818      	ldr	r0, [r3, #0]
 800c28c:	b118      	cbz	r0, 800c296 <findslot+0x12>
 800c28e:	6a03      	ldr	r3, [r0, #32]
 800c290:	b90b      	cbnz	r3, 800c296 <findslot+0x12>
 800c292:	f7fd ffc3 	bl	800a21c <__sinit>
 800c296:	2c13      	cmp	r4, #19
 800c298:	d807      	bhi.n	800c2aa <findslot+0x26>
 800c29a:	4806      	ldr	r0, [pc, #24]	@ (800c2b4 <findslot+0x30>)
 800c29c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800c2a0:	3201      	adds	r2, #1
 800c2a2:	d002      	beq.n	800c2aa <findslot+0x26>
 800c2a4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800c2a8:	bd10      	pop	{r4, pc}
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	e7fc      	b.n	800c2a8 <findslot+0x24>
 800c2ae:	bf00      	nop
 800c2b0:	20000044 	.word	0x20000044
 800c2b4:	20004154 	.word	0x20004154

0800c2b8 <error>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	f7fe f940 	bl	800a540 <__errno>
 800c2c0:	2613      	movs	r6, #19
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	2700      	movs	r7, #0
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	beab      	bkpt	0x00ab
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	602e      	str	r6, [r5, #0]
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2d4 <checkerror>:
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d101      	bne.n	800c2dc <checkerror+0x8>
 800c2d8:	f7ff bfee 	b.w	800c2b8 <error>
 800c2dc:	4770      	bx	lr

0800c2de <_swilseek>:
 800c2de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	4616      	mov	r6, r2
 800c2e4:	f7ff ffce 	bl	800c284 <findslot>
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	b940      	cbnz	r0, 800c2fe <_swilseek+0x20>
 800c2ec:	f7fe f928 	bl	800a540 <__errno>
 800c2f0:	2309      	movs	r3, #9
 800c2f2:	6003      	str	r3, [r0, #0]
 800c2f4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	b003      	add	sp, #12
 800c2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2fe:	2e02      	cmp	r6, #2
 800c300:	d903      	bls.n	800c30a <_swilseek+0x2c>
 800c302:	f7fe f91d 	bl	800a540 <__errno>
 800c306:	2316      	movs	r3, #22
 800c308:	e7f3      	b.n	800c2f2 <_swilseek+0x14>
 800c30a:	2e01      	cmp	r6, #1
 800c30c:	d112      	bne.n	800c334 <_swilseek+0x56>
 800c30e:	6843      	ldr	r3, [r0, #4]
 800c310:	18e4      	adds	r4, r4, r3
 800c312:	d4f6      	bmi.n	800c302 <_swilseek+0x24>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	260a      	movs	r6, #10
 800c318:	e9cd 3400 	strd	r3, r4, [sp]
 800c31c:	466f      	mov	r7, sp
 800c31e:	4630      	mov	r0, r6
 800c320:	4639      	mov	r1, r7
 800c322:	beab      	bkpt	0x00ab
 800c324:	4606      	mov	r6, r0
 800c326:	4630      	mov	r0, r6
 800c328:	f7ff ffd4 	bl	800c2d4 <checkerror>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	dbe1      	blt.n	800c2f4 <_swilseek+0x16>
 800c330:	606c      	str	r4, [r5, #4]
 800c332:	e7e1      	b.n	800c2f8 <_swilseek+0x1a>
 800c334:	2e02      	cmp	r6, #2
 800c336:	6803      	ldr	r3, [r0, #0]
 800c338:	d1ec      	bne.n	800c314 <_swilseek+0x36>
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	260c      	movs	r6, #12
 800c33e:	466f      	mov	r7, sp
 800c340:	4630      	mov	r0, r6
 800c342:	4639      	mov	r1, r7
 800c344:	beab      	bkpt	0x00ab
 800c346:	4606      	mov	r6, r0
 800c348:	4630      	mov	r0, r6
 800c34a:	f7ff ffc3 	bl	800c2d4 <checkerror>
 800c34e:	1c43      	adds	r3, r0, #1
 800c350:	d0d0      	beq.n	800c2f4 <_swilseek+0x16>
 800c352:	4404      	add	r4, r0
 800c354:	e7de      	b.n	800c314 <_swilseek+0x36>

0800c356 <_lseek>:
 800c356:	f7ff bfc2 	b.w	800c2de <_swilseek>

0800c35a <_swiclose>:
 800c35a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c35c:	2402      	movs	r4, #2
 800c35e:	9001      	str	r0, [sp, #4]
 800c360:	ad01      	add	r5, sp, #4
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	beab      	bkpt	0x00ab
 800c368:	4604      	mov	r4, r0
 800c36a:	4620      	mov	r0, r4
 800c36c:	f7ff ffb2 	bl	800c2d4 <checkerror>
 800c370:	b003      	add	sp, #12
 800c372:	bd30      	pop	{r4, r5, pc}

0800c374 <_close>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4605      	mov	r5, r0
 800c378:	f7ff ff84 	bl	800c284 <findslot>
 800c37c:	4604      	mov	r4, r0
 800c37e:	b930      	cbnz	r0, 800c38e <_close+0x1a>
 800c380:	f7fe f8de 	bl	800a540 <__errno>
 800c384:	2309      	movs	r3, #9
 800c386:	6003      	str	r3, [r0, #0]
 800c388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c38c:	bd38      	pop	{r3, r4, r5, pc}
 800c38e:	3d01      	subs	r5, #1
 800c390:	2d01      	cmp	r5, #1
 800c392:	d809      	bhi.n	800c3a8 <_close+0x34>
 800c394:	4b09      	ldr	r3, [pc, #36]	@ (800c3bc <_close+0x48>)
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d104      	bne.n	800c3a8 <_close+0x34>
 800c39e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3a2:	6003      	str	r3, [r0, #0]
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	e7f1      	b.n	800c38c <_close+0x18>
 800c3a8:	6820      	ldr	r0, [r4, #0]
 800c3aa:	f7ff ffd6 	bl	800c35a <_swiclose>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d1ec      	bne.n	800c38c <_close+0x18>
 800c3b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3b6:	6023      	str	r3, [r4, #0]
 800c3b8:	e7e8      	b.n	800c38c <_close+0x18>
 800c3ba:	bf00      	nop
 800c3bc:	20004154 	.word	0x20004154

0800c3c0 <_isatty>:
 800c3c0:	b570      	push	{r4, r5, r6, lr}
 800c3c2:	f7ff ff5f 	bl	800c284 <findslot>
 800c3c6:	2409      	movs	r4, #9
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	b920      	cbnz	r0, 800c3d6 <_isatty+0x16>
 800c3cc:	f7fe f8b8 	bl	800a540 <__errno>
 800c3d0:	6004      	str	r4, [r0, #0]
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	bd70      	pop	{r4, r5, r6, pc}
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	4629      	mov	r1, r5
 800c3da:	beab      	bkpt	0x00ab
 800c3dc:	4604      	mov	r4, r0
 800c3de:	2c01      	cmp	r4, #1
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	d0f7      	beq.n	800c3d4 <_isatty+0x14>
 800c3e4:	f7fe f8ac 	bl	800a540 <__errno>
 800c3e8:	2513      	movs	r5, #19
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	2600      	movs	r6, #0
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	beab      	bkpt	0x00ab
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	6025      	str	r5, [r4, #0]
 800c3f8:	e7eb      	b.n	800c3d2 <_isatty+0x12>
	...

0800c3fc <_init>:
 800c3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fe:	bf00      	nop
 800c400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c402:	bc08      	pop	{r3}
 800c404:	469e      	mov	lr, r3
 800c406:	4770      	bx	lr

0800c408 <_fini>:
 800c408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40a:	bf00      	nop
 800c40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c40e:	bc08      	pop	{r3}
 800c410:	469e      	mov	lr, r3
 800c412:	4770      	bx	lr
